// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAthenPs.API.Data;

#nullable disable

namespace WebAthenPs.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241120231525_testingAfterWork4")]
    partial class testingAfterWork4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenericProfessionalProjecty", b =>
                {
                    b.Property<int>("ProfessionalsId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsProjectId")
                        .HasColumnType("int");

                    b.HasKey("ProfessionalsId", "ProjectsProjectId");

                    b.HasIndex("ProjectsProjectId");

                    b.ToTable("GenericProfessionalProjecty");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectProfessional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContractedAs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectProfessionals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContractedAs = "[\"Arquiteto\"]",
                            ProfessionalId = 1,
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            ContractedAs = "[\"Arquiteto\"]",
                            ProfessionalId = 6,
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            ContractedAs = "[\"Eletricista\"]",
                            ProfessionalId = 2,
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 4,
                            ContractedAs = "[\"Eletricista\"]",
                            ProfessionalId = 7,
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 5,
                            ContractedAs = "[\"Engenheiro\"]",
                            ProfessionalId = 3,
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 6,
                            ContractedAs = "[\"Engenheiro\"]",
                            ProfessionalId = 8,
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 7,
                            ContractedAs = "[\"Pedreiro\"]",
                            ProfessionalId = 4,
                            ProjectId = 4
                        },
                        new
                        {
                            Id = 8,
                            ContractedAs = "[\"Pedreiro\"]",
                            ProfessionalId = 9,
                            ProjectId = 4
                        },
                        new
                        {
                            Id = 9,
                            ContractedAs = "[\"Encanador\"]",
                            ProfessionalId = 5,
                            ProjectId = 5
                        },
                        new
                        {
                            Id = 10,
                            ContractedAs = "[\"Encanador\"]",
                            ProfessionalId = 10,
                            ProjectId = 5
                        },
                        new
                        {
                            Id = 11,
                            ContractedAs = "[\"Eletricista\"]",
                            ProfessionalId = 11,
                            ProjectId = 6
                        },
                        new
                        {
                            Id = 12,
                            ContractedAs = "[\"Arquiteto\"]",
                            ProfessionalId = 12,
                            ProjectId = 6
                        },
                        new
                        {
                            Id = 13,
                            ContractedAs = "[\"Engenheiro\"]",
                            ProfessionalId = 13,
                            ProjectId = 7
                        },
                        new
                        {
                            Id = 14,
                            ContractedAs = "[\"Pedreiro\"]",
                            ProfessionalId = 14,
                            ProjectId = 7
                        },
                        new
                        {
                            Id = 15,
                            ContractedAs = "[\"Encanador\"]",
                            ProfessionalId = 15,
                            ProjectId = 8
                        },
                        new
                        {
                            Id = 16,
                            ContractedAs = "[\"Arquiteto\"]",
                            ProfessionalId = 1,
                            ProjectId = 8
                        },
                        new
                        {
                            Id = 17,
                            ContractedAs = "[\"Arquiteto\"]",
                            ProfessionalId = 6,
                            ProjectId = 9
                        },
                        new
                        {
                            Id = 18,
                            ContractedAs = "[\"Eletricista\"]",
                            ProfessionalId = 2,
                            ProjectId = 9
                        },
                        new
                        {
                            Id = 19,
                            ContractedAs = "[\"Eletricista\"]",
                            ProfessionalId = 7,
                            ProjectId = 10
                        },
                        new
                        {
                            Id = 20,
                            ContractedAs = "[\"Engenheiro\"]",
                            ProfessionalId = 3,
                            ProjectId = 10
                        },
                        new
                        {
                            Id = 21,
                            ContractedAs = "[\"Engenheiro\"]",
                            ProfessionalId = 8,
                            ProjectId = 11
                        },
                        new
                        {
                            Id = 22,
                            ContractedAs = "[\"Pedreiro\"]",
                            ProfessionalId = 4,
                            ProjectId = 11
                        },
                        new
                        {
                            Id = 23,
                            ContractedAs = "[\"Pedreiro\"]",
                            ProfessionalId = 9,
                            ProjectId = 12
                        },
                        new
                        {
                            Id = 24,
                            ContractedAs = "[\"Encanador\"]",
                            ProfessionalId = 5,
                            ProjectId = 12
                        },
                        new
                        {
                            Id = 25,
                            ContractedAs = "[\"Encanador\"]",
                            ProfessionalId = 10,
                            ProjectId = 13
                        },
                        new
                        {
                            Id = 26,
                            ContractedAs = "[\"Eletricista\"]",
                            ProfessionalId = 11,
                            ProjectId = 13
                        },
                        new
                        {
                            Id = 27,
                            ContractedAs = "[\"Arquiteto\"]",
                            ProfessionalId = 12,
                            ProjectId = 14
                        },
                        new
                        {
                            Id = 28,
                            ContractedAs = "[\"Engenheiro\"]",
                            ProfessionalId = 13,
                            ProjectId = 14
                        },
                        new
                        {
                            Id = 29,
                            ContractedAs = "[\"Pedreiro\"]",
                            ProfessionalId = 14,
                            ProjectId = 15
                        },
                        new
                        {
                            Id = 30,
                            ContractedAs = "[\"Encanador\"]",
                            ProfessionalId = 15,
                            ProjectId = 15
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            Address = "Rua A, 123",
                            CPF = "12345678901",
                            City = "São Paulo",
                            ConcurrencyStamp = "ce368433-85c3-473a-9671-75b078d88c41",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6524),
                            Email = "carlos.silva@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "01000-000",
                            RG = "1234567",
                            SecurityStamp = "f7a6bfc5-a086-4fa7-a7e8-12a2526732fa",
                            State = "SP",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6526),
                            UserName = "Carlos Silva",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            Address = "Rua B, 456",
                            CPF = "23456789012",
                            City = "Rio de Janeiro",
                            ConcurrencyStamp = "1ba9a168-bbec-436b-824e-6b6070eefc56",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6654),
                            Email = "ana.souza@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "20000-000",
                            RG = "2345678",
                            SecurityStamp = "3dc00e10-e726-47b9-a1d4-211f1fd08b92",
                            State = "RJ",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6655),
                            UserName = "Ana Souza",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            Address = "Rua C, 789",
                            CPF = "34567890123",
                            City = "Belo Horizonte",
                            ConcurrencyStamp = "e73f4eca-a627-44a5-8a58-9bce777e866e",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6667),
                            Email = "joao.oliveira@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "30000-000",
                            RG = "3456789",
                            SecurityStamp = "a8ec07e8-98ba-472c-bf71-1c90d482078a",
                            State = "MG",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6667),
                            UserName = "João Oliveira",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            Address = "Rua D, 101",
                            CPF = "45678901234",
                            City = "Salvador",
                            ConcurrencyStamp = "db89dec5-a713-412a-8c13-3022171ccbac",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6707),
                            Email = "maria.santos@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "40000-000",
                            RG = "4567890",
                            SecurityStamp = "833b91ed-12cd-4413-aac2-24544e9a5560",
                            State = "BA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6708),
                            UserName = "Maria Santos",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user5",
                            AccessFailedCount = 0,
                            Address = "Rua E, 202",
                            CPF = "56789012345",
                            City = "Fortaleza",
                            ConcurrencyStamp = "381586f8-d6f0-4c6e-8f37-7ee153f4c9db",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6720),
                            Email = "pedro.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "60000-000",
                            RG = "5678901",
                            SecurityStamp = "fc51f59b-fdbe-44ba-9781-b22245445f88",
                            State = "CE",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6720),
                            UserName = "Pedro Almeida",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user6",
                            AccessFailedCount = 0,
                            Address = "Rua F, 303",
                            CPF = "67890123456",
                            City = "Curitiba",
                            ConcurrencyStamp = "8b9103b6-9d7b-4cf6-808b-a99369dec426",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6732),
                            Email = "juliana.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "80000-000",
                            RG = "6789012",
                            SecurityStamp = "63f5ccad-034d-49cc-98a1-5d2a4cdc2117",
                            State = "PR",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6732),
                            UserName = "Juliana Costa",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user7",
                            AccessFailedCount = 0,
                            Address = "Rua G, 404",
                            CPF = "78901234567",
                            City = "Porto Alegre",
                            ConcurrencyStamp = "5694f453-a22f-456b-b15f-cb4e1b652d79",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6745),
                            Email = "roberto.lima@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "90000-000",
                            RG = "7890123",
                            SecurityStamp = "f79664d6-8ac7-4d00-883b-1fb6a09cbdef",
                            State = "RS",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6746),
                            UserName = "Roberto Lima",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user8",
                            AccessFailedCount = 0,
                            Address = "Rua H, 505",
                            CPF = "89012345678",
                            City = "Recife",
                            ConcurrencyStamp = "7ccf2b01-bf7e-4e6b-9582-c27a6d74fbfe",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6757),
                            Email = "patricia.martins@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "50000-000",
                            RG = "8901234",
                            SecurityStamp = "087d1909-b31b-4b14-9f91-721bf544b737",
                            State = "PE",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6757),
                            UserName = "Patricia Martins",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user9",
                            AccessFailedCount = 0,
                            Address = "Rua I, 606",
                            CPF = "90123456789",
                            City = "Belém",
                            ConcurrencyStamp = "cc94f387-ea7f-4599-a3dc-4959c6efb229",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6770),
                            Email = "ricardo.fernandes@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "66000-000",
                            RG = "9012345",
                            SecurityStamp = "920f44a5-2deb-4cd4-b944-6aae8f1e970d",
                            State = "PA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6770),
                            UserName = "Ricardo Fernandes",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user10",
                            AccessFailedCount = 0,
                            Address = "Rua J, 707",
                            CPF = "01234567890",
                            City = "Manaus",
                            ConcurrencyStamp = "456d0e22-95f7-40ae-96b6-ee276965ce9e",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6783),
                            Email = "claudia.rodrigues@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "69000-000",
                            RG = "0123456",
                            SecurityStamp = "075720c9-12a8-42ad-ab35-e61d9b6df9d1",
                            State = "AM",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6784),
                            UserName = "Claudia Rodrigues",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user11",
                            AccessFailedCount = 0,
                            Address = "Rua K, 808",
                            CPF = "12345678901",
                            City = "São Luís",
                            ConcurrencyStamp = "9cbc6cab-f5eb-4cdf-a926-15314f932adc",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6795),
                            Email = "fernando.oliveira@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "65000-000",
                            RG = "1234567",
                            SecurityStamp = "afc20dd8-c3b7-4caf-8203-865c5a5f09c0",
                            State = "MA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6795),
                            UserName = "Fernando Oliveira",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user12",
                            AccessFailedCount = 0,
                            Address = "Rua L, 909",
                            CPF = "23456789012",
                            City = "São José de Ribamar",
                            ConcurrencyStamp = "39e4c53a-cbbe-446d-aac5-5b9218e78aba",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6808),
                            Email = "luciana.pereira@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "65100-000",
                            RG = "2345678",
                            SecurityStamp = "38419cf4-28d2-4546-bd87-276b6720ffd9",
                            State = "MA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6808),
                            UserName = "Luciana Pereira",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user13",
                            AccessFailedCount = 0,
                            Address = "Rua M, 1010",
                            CPF = "34567890123",
                            City = "Teresina",
                            ConcurrencyStamp = "17c56696-5f9f-4b0c-b227-95e5a7b55fd3",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6820),
                            Email = "eduardo.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "64000-000",
                            RG = "3456789",
                            SecurityStamp = "1f18b427-38ab-4ac5-9272-1ae70c24b1d7",
                            State = "PI",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6820),
                            UserName = "Eduardo Costa",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user14",
                            AccessFailedCount = 0,
                            Address = "Rua N, 1111",
                            CPF = "45678901234",
                            City = "Maceió",
                            ConcurrencyStamp = "75662968-6e37-4d7e-af7f-e59096ece070",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6832),
                            Email = "renata.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "57000-000",
                            RG = "4567890",
                            SecurityStamp = "cab895b7-2bae-43e0-ab0b-a29e5fd90641",
                            State = "AL",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6832),
                            UserName = "Renata Almeida",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user15",
                            AccessFailedCount = 0,
                            Address = "Rua O, 1212",
                            CPF = "56789012345",
                            City = "João Pessoa",
                            ConcurrencyStamp = "318a0b12-57f6-4e0c-b934-496de3ad5c02",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6845),
                            Email = "carlos.eduardo@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "58000-000",
                            RG = "5678901",
                            SecurityStamp = "3a15457f-f5b0-4202-b4a6-95f41e35f7c5",
                            State = "PB",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6845),
                            UserName = "Carlos Eduardo",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user16",
                            AccessFailedCount = 0,
                            Address = "Rua P, 1313",
                            CPF = "67890123456",
                            City = "São Paulo",
                            ConcurrencyStamp = "2306305f-f6c1-4707-97b8-96efb6e1264e",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6857),
                            Email = "lucas.oliveira@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "01001-000",
                            RG = "6789012",
                            SecurityStamp = "6f2a9b62-2595-4472-932d-b498896c994e",
                            State = "SP",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6857),
                            UserName = "Lucas Oliveira",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user17",
                            AccessFailedCount = 0,
                            Address = "Rua Q, 1414",
                            CPF = "78901234567",
                            City = "Rio de Janeiro",
                            ConcurrencyStamp = "d061a7b5-42de-48b2-beca-d31fef637827",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6869),
                            Email = "mariana.silva@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "20001-000",
                            RG = "7890123",
                            SecurityStamp = "4f3dd097-9803-45d7-adea-9b0f2c5f3f22",
                            State = "RJ",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6869),
                            UserName = "Mariana Silva",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user18",
                            AccessFailedCount = 0,
                            Address = "Rua R, 1515",
                            CPF = "89012345678",
                            City = "Belo Horizonte",
                            ConcurrencyStamp = "f36fc16a-1f1b-427a-b4bf-36bb0f221c40",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6882),
                            Email = "gabriel.santos@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "30001-000",
                            RG = "8901234",
                            SecurityStamp = "44225d10-eecf-49cb-b024-84a900e0de11",
                            State = "MG",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6882),
                            UserName = "Gabriel Santos",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user19",
                            AccessFailedCount = 0,
                            Address = "Rua S, 1616",
                            CPF = "90123456789",
                            City = "Salvador",
                            ConcurrencyStamp = "ec22ae0f-fed5-4be0-94bc-72e008319c82",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6894),
                            Email = "juliana.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "40001-000",
                            RG = "9012345",
                            SecurityStamp = "15f8d5d0-d88c-4901-bd2e-939c81b9994d",
                            State = "BA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6894),
                            UserName = "Juliana Costa",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user20",
                            AccessFailedCount = 0,
                            Address = "Rua T, 1717",
                            CPF = "01234567890",
                            City = "Fortaleza",
                            ConcurrencyStamp = "2e32479f-e9ce-4800-8f5f-89ccafea9d94",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6949),
                            Email = "roberto.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "60001-000",
                            RG = "0123456",
                            SecurityStamp = "ae0bfaa4-06d2-4a0e-a051-91b661ae4e8f",
                            State = "CE",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6950),
                            UserName = "Roberto Almeida",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user21",
                            AccessFailedCount = 0,
                            Address = "Rua U, 1818",
                            CPF = "12345678901",
                            City = "Curitiba",
                            ConcurrencyStamp = "d30b3c36-6818-490e-8f65-00ac96258bf6",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6964),
                            Email = "patricia.martins@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "80001-000",
                            RG = "1234567",
                            SecurityStamp = "b44f97fe-874d-441e-9b9b-ba089440549c",
                            State = "PR",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6965),
                            UserName = "Patricia Martins",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user22",
                            AccessFailedCount = 0,
                            Address = "Rua V, 1919",
                            CPF = "23456789012",
                            City = "Porto Alegre",
                            ConcurrencyStamp = "71d534e4-21cb-4701-bb6f-e50df0f9121f",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6978),
                            Email = "ricardo.lima@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "90001-000",
                            RG = "2345678",
                            SecurityStamp = "746d6707-d6d9-4ced-9785-5216c03c5b57",
                            State = "RS",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6978),
                            UserName = "Ricardo Lima",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user23",
                            AccessFailedCount = 0,
                            Address = "Rua W, 2020",
                            CPF = "34567890123",
                            City = "São Luís",
                            ConcurrencyStamp = "16a89031-e8d6-45fa-89c0-8e7390b62e4b",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6994),
                            Email = "claudia.souza@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "65001-000",
                            RG = "3456789",
                            SecurityStamp = "a8154237-5064-4712-8618-97299c49fa76",
                            State = "MA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(6994),
                            UserName = "Claudia Souza",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user24",
                            AccessFailedCount = 0,
                            Address = "Rua X, 2121",
                            CPF = "45678901234",
                            City = "Teresina",
                            ConcurrencyStamp = "e34c775c-652e-4252-8a1b-88e8b5c8df81",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(7009),
                            Email = "fernando.santos@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "64001-000",
                            RG = "4567890",
                            SecurityStamp = "e47d8a5b-458a-4a04-9551-8664ef8bd77f",
                            State = "PI",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(7009),
                            UserName = "Fernando Santos",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user25",
                            AccessFailedCount = 0,
                            Address = "Rua Y, 2222",
                            CPF = "56789012345",
                            City = "Maceió",
                            ConcurrencyStamp = "d539e2e8-b738-4313-adbe-fd8bf10e11eb",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(7023),
                            Email = "juliana.lima@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "57001-000",
                            RG = "5678901",
                            SecurityStamp = "15d9fa2e-7d21-429a-9a73-a97e7c86fa2f",
                            State = "AL",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(7023),
                            UserName = "Juliana Lima",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user26",
                            AccessFailedCount = 0,
                            Address = "Rua Z, 2323",
                            CPF = "67890123456",
                            City = "João Pessoa",
                            ConcurrencyStamp = "5300e1c3-0142-414a-b274-f77e531eb5a0",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(7041),
                            Email = "ricardo.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "58001-000",
                            RG = "6789012",
                            SecurityStamp = "4229c1d5-52de-437b-89a9-eb931631ce0e",
                            State = "PB",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(7041),
                            UserName = "Ricardo Costa",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user27",
                            AccessFailedCount = 0,
                            Address = "Rua AA, 2424",
                            CPF = "78901234567",
                            City = "São Paulo",
                            ConcurrencyStamp = "2657ca7e-42d7-4164-a650-fdd25d74d3a0",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(7055),
                            Email = "mariana.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "01002-000",
                            RG = "7890123",
                            SecurityStamp = "e0d2686a-a906-41c7-8f9a-677b8f36416b",
                            State = "SP",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(7056),
                            UserName = "Mariana Almeida",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user28",
                            AccessFailedCount = 0,
                            Address = "Rua BB, 2525",
                            CPF = "89012345678",
                            City = "Rio de Janeiro",
                            ConcurrencyStamp = "09a80f1a-7521-4044-8c12-f864641a092d",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(7072),
                            Email = "gabriel.souza@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "20002-000",
                            RG = "8901234",
                            SecurityStamp = "20f6428a-c753-4756-b87f-5e5e20f4e105",
                            State = "RJ",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(7072),
                            UserName = "Gabriel Souza",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user29",
                            AccessFailedCount = 0,
                            Address = "Rua CC, 2626",
                            CPF = "90123456789",
                            City = "Belo Horizonte",
                            ConcurrencyStamp = "b0d8d4a5-00ef-4758-b853-76d2d90cf851",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(7088),
                            Email = "juliana.rodrigues@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "30002-000",
                            RG = "9012345",
                            SecurityStamp = "7cec4ed9-8e5a-487d-8a75-39b262bbde37",
                            State = "MG",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(7088),
                            UserName = "Juliana Rodrigues",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user30",
                            AccessFailedCount = 0,
                            Address = "Rua DD, 2727",
                            CPF = "01234567890",
                            City = "Salvador",
                            ConcurrencyStamp = "c1a53e92-c5b8-4a60-916a-98ed4aaee6e6",
                            CreatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(7101),
                            Email = "roberto.fernandes@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "40002-000",
                            RG = "0123456",
                            SecurityStamp = "6b48399b-5611-4bf1-a783-e609198092d6",
                            State = "BA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 11, 20, 23, 15, 24, 778, DateTimeKind.Utc).AddTicks(7101),
                            UserName = "Roberto Fernandes",
                            UserType = "Professional"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Clients.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            UserId = "user1"
                        },
                        new
                        {
                            ClientId = 2,
                            UserId = "user2"
                        },
                        new
                        {
                            ClientId = 3,
                            UserId = "user3"
                        },
                        new
                        {
                            ClientId = 4,
                            UserId = "user4"
                        },
                        new
                        {
                            ClientId = 5,
                            UserId = "user5"
                        },
                        new
                        {
                            ClientId = 6,
                            UserId = "user6"
                        },
                        new
                        {
                            ClientId = 7,
                            UserId = "user7"
                        },
                        new
                        {
                            ClientId = 8,
                            UserId = "user8"
                        },
                        new
                        {
                            ClientId = 9,
                            UserId = "user9"
                        },
                        new
                        {
                            ClientId = 10,
                            UserId = "user10"
                        },
                        new
                        {
                            ClientId = 11,
                            UserId = "user11"
                        },
                        new
                        {
                            ClientId = 12,
                            UserId = "user12"
                        },
                        new
                        {
                            ClientId = 13,
                            UserId = "user13"
                        },
                        new
                        {
                            ClientId = 14,
                            UserId = "user14"
                        },
                        new
                        {
                            ClientId = 15,
                            UserId = "user15"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.ChatEntities.ChatAndUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatAndUsers");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.ChatEntities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.ChatEntities.Chats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LikedByUserIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.Proposal", b =>
                {
                    b.Property<Guid>("ProposalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ProposalMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProposalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProposalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ToBeContractedAs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProposalId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProfessionalId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.GenericProfessional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<Guid?>("EspecializationsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfessionalTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EspecializationsId");

                    b.HasIndex("UserId");

                    b.ToTable("GenericProfessionals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            EspecializationsId = new Guid("c9d2a9f8-1f7a-4b47-b550-84e73c3b72b1"),
                            ProfessionalTypes = "[\"Arquiteto\",\"Engenheiro\"]",
                            UserId = "user16"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            EspecializationsId = new Guid("a1f3b7e4-d3c2-4596-b5c3-620fc2c41648"),
                            ProfessionalTypes = "[\"Eletricista\",\"Pedreiro\"]",
                            UserId = "user17"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            EspecializationsId = new Guid("f13423a1-8b12-4d58-bcc1-2b29f41148c8"),
                            ProfessionalTypes = "[\"Engenheiro\",\"Arquiteto\",\"Encanador\"]",
                            UserId = "user18"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 4,
                            EspecializationsId = new Guid("93bd828b-2b6e-42a6-92e3-248f01438d34"),
                            ProfessionalTypes = "[\"Pedreiro\",\"Marceneiro\"]",
                            UserId = "user19"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 5,
                            EspecializationsId = new Guid("b8a7e539-8f3c-40d3-8a29-19edca7d65b4"),
                            ProfessionalTypes = "[\"Encanador\",\"Eletricista\"]",
                            UserId = "user20"
                        },
                        new
                        {
                            Id = 6,
                            ClientId = 6,
                            EspecializationsId = new Guid("76e63219-25e6-40f1-9a75-9486d4d478a9"),
                            ProfessionalTypes = "[\"Arquiteto\",\"Pintor\"]",
                            UserId = "user21"
                        },
                        new
                        {
                            Id = 7,
                            ClientId = 7,
                            EspecializationsId = new Guid("239bcae5-0c39-4bb2-8a9e-eebf92e4cd84"),
                            ProfessionalTypes = "[\"Eletricista\",\"Pintor\",\"Vidraceiro\"]",
                            UserId = "user22"
                        },
                        new
                        {
                            Id = 8,
                            ClientId = 8,
                            EspecializationsId = new Guid("5b6e1f3d-5d8a-4143-9e18-748cb5c06d27"),
                            ProfessionalTypes = "[\"Engenheiro\",\"Serralheiro\"]",
                            UserId = "user23"
                        },
                        new
                        {
                            Id = 9,
                            ClientId = 9,
                            EspecializationsId = new Guid("36f41695-bc6e-4a3f-a7e9-d41643b81245"),
                            ProfessionalTypes = "[\"Pedreiro\",\"Vidraceiro\",\"Carpinteiro\"]",
                            UserId = "user24"
                        },
                        new
                        {
                            Id = 10,
                            ClientId = 10,
                            EspecializationsId = new Guid("eea39b7d-8f13-49bc-8c45-c8e293d64829"),
                            ProfessionalTypes = "[\"Encanador\",\"Marceneiro\"]",
                            UserId = "user25"
                        },
                        new
                        {
                            Id = 11,
                            ClientId = 11,
                            EspecializationsId = new Guid("7f3b2d86-4d3c-498b-928c-5f8c3b7425d2"),
                            ProfessionalTypes = "[\"Arquiteto\",\"Pintor\",\"Engenheiro\"]",
                            UserId = "user26"
                        },
                        new
                        {
                            Id = 12,
                            ClientId = 12,
                            EspecializationsId = new Guid("23d8a69f-bf42-4518-bcd9-e75a29e5c4d6"),
                            ProfessionalTypes = "[\"Eletricista\"]",
                            UserId = "user27"
                        },
                        new
                        {
                            Id = 13,
                            ClientId = 13,
                            EspecializationsId = new Guid("84e9327f-9c8a-41b3-84e6-2c548c29b8e3"),
                            ProfessionalTypes = "[\"Engenheiro\",\"Pedreiro\"]",
                            UserId = "user28"
                        },
                        new
                        {
                            Id = 14,
                            ClientId = 14,
                            EspecializationsId = new Guid("3b948d76-b45e-4f9c-a37b-4d2b3e5c9a8e"),
                            ProfessionalTypes = "[\"Arquiteto\",\"Decorador\"]",
                            UserId = "user29"
                        },
                        new
                        {
                            Id = 15,
                            ClientId = 15,
                            EspecializationsId = new Guid("d59c8723-c8a6-44b8-85d4-b72e93c24851"),
                            ProfessionalTypes = "[\"Eletricista\",\"Engenheiro\",\"Pedreiro\"]",
                            UserId = "user30"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Architect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Architects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9d2a9f8-1f7a-4b47-b550-84e73c3b72b1"),
                            ProfessionalTypeId = new Guid("c9d2a9f8-1f7a-4b47-b550-84e73c3b72b1")
                        },
                        new
                        {
                            Id = new Guid("f13423a1-8b12-4d58-bcc1-2b29f41148c8"),
                            ProfessionalTypeId = new Guid("f13423a1-8b12-4d58-bcc1-2b29f41148c8")
                        },
                        new
                        {
                            Id = new Guid("76e63219-25e6-40f1-9a75-9486d4d478a9"),
                            ProfessionalTypeId = new Guid("76e63219-25e6-40f1-9a75-9486d4d478a9")
                        },
                        new
                        {
                            Id = new Guid("7f3b2d86-4d3c-498b-928c-5f8c3b7425d2"),
                            ProfessionalTypeId = new Guid("7f3b2d86-4d3c-498b-928c-5f8c3b7425d2")
                        },
                        new
                        {
                            Id = new Guid("3b948d76-b45e-4f9c-a37b-4d2b3e5c9a8e"),
                            ProfessionalTypeId = new Guid("3b948d76-b45e-4f9c-a37b-4d2b3e5c9a8e")
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Cabinetmaker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Cabinetmaker");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Carpenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Carpenter");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93bd828b-2b6e-42a6-92e3-248f01438d34"),
                            ProfessionalTypeId = new Guid("93bd828b-2b6e-42a6-92e3-248f01438d34")
                        },
                        new
                        {
                            Id = new Guid("eea39b7d-8f13-49bc-8c45-c8e293d64829"),
                            ProfessionalTypeId = new Guid("eea39b7d-8f13-49bc-8c45-c8e293d64829")
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.CivilEngineer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("CivilEngineer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9d2a9f8-1f7a-4b47-b550-84e73c3b72b1"),
                            ProfessionalTypeId = new Guid("c9d2a9f8-1f7a-4b47-b550-84e73c3b72b1")
                        },
                        new
                        {
                            Id = new Guid("f13423a1-8b12-4d58-bcc1-2b29f41148c8"),
                            ProfessionalTypeId = new Guid("f13423a1-8b12-4d58-bcc1-2b29f41148c8")
                        },
                        new
                        {
                            Id = new Guid("7f3b2d86-4d3c-498b-928c-5f8c3b7425d2"),
                            ProfessionalTypeId = new Guid("7f3b2d86-4d3c-498b-928c-5f8c3b7425d2")
                        },
                        new
                        {
                            Id = new Guid("84e9327f-9c8a-41b3-84e6-2c548c29b8e3"),
                            ProfessionalTypeId = new Guid("84e9327f-9c8a-41b3-84e6-2c548c29b8e3")
                        },
                        new
                        {
                            Id = new Guid("d59c8723-c8a6-44b8-85d4-b72e93c24851"),
                            ProfessionalTypeId = new Guid("d59c8723-c8a6-44b8-85d4-b72e93c24851")
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Decorator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Decorator");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b948d76-b45e-4f9c-a37b-4d2b3e5c9a8e"),
                            ProfessionalTypeId = new Guid("3b948d76-b45e-4f9c-a37b-4d2b3e5c9a8e")
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ElectricalEngineer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("ElectricalEngineer");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Electrician", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Electrician");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1f3b7e4-d3c2-4596-b5c3-620fc2c41648"),
                            ProfessionalTypeId = new Guid("a1f3b7e4-d3c2-4596-b5c3-620fc2c41648")
                        },
                        new
                        {
                            Id = new Guid("b8a7e539-8f3c-40d3-8a29-19edca7d65b4"),
                            ProfessionalTypeId = new Guid("b8a7e539-8f3c-40d3-8a29-19edca7d65b4")
                        },
                        new
                        {
                            Id = new Guid("239bcae5-0c39-4bb2-8a9e-eebf92e4cd84"),
                            ProfessionalTypeId = new Guid("239bcae5-0c39-4bb2-8a9e-eebf92e4cd84")
                        },
                        new
                        {
                            Id = new Guid("23d8a69f-bf42-4518-bcd9-e75a29e5c4d6"),
                            ProfessionalTypeId = new Guid("23d8a69f-bf42-4518-bcd9-e75a29e5c4d6")
                        },
                        new
                        {
                            Id = new Guid("d59c8723-c8a6-44b8-85d4-b72e93c24851"),
                            ProfessionalTypeId = new Guid("d59c8723-c8a6-44b8-85d4-b72e93c24851")
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Foreman", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Foreman");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Glazier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Glazier");

                    b.HasData(
                        new
                        {
                            Id = new Guid("239bcae5-0c39-4bb2-8a9e-eebf92e4cd84"),
                            ProfessionalTypeId = new Guid("239bcae5-0c39-4bb2-8a9e-eebf92e4cd84")
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.HydraulicEngineer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("HydraulicEngineer");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.InteriorDesigner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("InteriorDesigner");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Landscaper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Landscaper");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.MarbleWorker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("MarbleWorker");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Mason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Mason");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1f3b7e4-d3c2-4596-b5c3-620fc2c41648"),
                            ProfessionalTypeId = new Guid("a1f3b7e4-d3c2-4596-b5c3-620fc2c41648")
                        },
                        new
                        {
                            Id = new Guid("93bd828b-2b6e-42a6-92e3-248f01438d34"),
                            ProfessionalTypeId = new Guid("93bd828b-2b6e-42a6-92e3-248f01438d34")
                        },
                        new
                        {
                            Id = new Guid("84e9327f-9c8a-41b3-84e6-2c548c29b8e3"),
                            ProfessionalTypeId = new Guid("84e9327f-9c8a-41b3-84e6-2c548c29b8e3")
                        },
                        new
                        {
                            Id = new Guid("d59c8723-c8a6-44b8-85d4-b72e93c24851"),
                            ProfessionalTypeId = new Guid("d59c8723-c8a6-44b8-85d4-b72e93c24851")
                        },
                        new
                        {
                            Id = new Guid("36f41695-bc6e-4a3f-a7e9-d41643b81245"),
                            ProfessionalTypeId = new Guid("36f41695-bc6e-4a3f-a7e9-d41643b81245")
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Metalworker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Metalworker");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b6e1f3d-5d8a-4143-9e18-748cb5c06d27"),
                            ProfessionalTypeId = new Guid("5b6e1f3d-5d8a-4143-9e18-748cb5c06d27")
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Painter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Painter");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76e63219-25e6-40f1-9a75-9486d4d478a9"),
                            ProfessionalTypeId = new Guid("76e63219-25e6-40f1-9a75-9486d4d478a9")
                        },
                        new
                        {
                            Id = new Guid("7f3b2d86-4d3c-498b-928c-5f8c3b7425d2"),
                            ProfessionalTypeId = new Guid("7f3b2d86-4d3c-498b-928c-5f8c3b7425d2")
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Plasterer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Plasterer");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Plumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Plumber");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f13423a1-8b12-4d58-bcc1-2b29f41148c8"),
                            ProfessionalTypeId = new Guid("f13423a1-8b12-4d58-bcc1-2b29f41148c8")
                        },
                        new
                        {
                            Id = new Guid("b8a7e539-8f3c-40d3-8a29-19edca7d65b4"),
                            ProfessionalTypeId = new Guid("b8a7e539-8f3c-40d3-8a29-19edca7d65b4")
                        },
                        new
                        {
                            Id = new Guid("eea39b7d-8f13-49bc-8c45-c8e293d64829"),
                            ProfessionalTypeId = new Guid("eea39b7d-8f13-49bc-8c45-c8e293d64829")
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArchitectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CabinetmakerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarpenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CivilEngineerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DecoratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ElectricalEngineerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ElectricianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ForemanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GlazierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HydraulicEngineerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InteriorDesignerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LandscaperId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MarbleWorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MetalworkerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PainterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlastererId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlumberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RooferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SurveyorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TilerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("genericId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArchitectId");

                    b.HasIndex("CabinetmakerId");

                    b.HasIndex("CarpenterId");

                    b.HasIndex("CivilEngineerId");

                    b.HasIndex("DecoratorId");

                    b.HasIndex("ElectricalEngineerId");

                    b.HasIndex("ElectricianId");

                    b.HasIndex("ForemanId");

                    b.HasIndex("GlazierId");

                    b.HasIndex("HydraulicEngineerId");

                    b.HasIndex("InteriorDesignerId");

                    b.HasIndex("LandscaperId");

                    b.HasIndex("MarbleWorkerId");

                    b.HasIndex("MasonId");

                    b.HasIndex("MetalworkerId");

                    b.HasIndex("PainterId");

                    b.HasIndex("PlastererId");

                    b.HasIndex("PlumberId");

                    b.HasIndex("RooferId");

                    b.HasIndex("SurveyorId");

                    b.HasIndex("TilerId");

                    b.HasIndex("genericId");

                    b.ToTable("GenericProfessionalProfessionalType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9d2a9f8-1f7a-4b47-b550-84e73c3b72b1"),
                            ArchitectId = new Guid("c9d2a9f8-1f7a-4b47-b550-84e73c3b72b1"),
                            CivilEngineerId = new Guid("c9d2a9f8-1f7a-4b47-b550-84e73c3b72b1"),
                            genericId = 1
                        },
                        new
                        {
                            Id = new Guid("a1f3b7e4-d3c2-4596-b5c3-620fc2c41648"),
                            ElectricianId = new Guid("a1f3b7e4-d3c2-4596-b5c3-620fc2c41648"),
                            genericId = 2
                        },
                        new
                        {
                            Id = new Guid("f13423a1-8b12-4d58-bcc1-2b29f41148c8"),
                            ArchitectId = new Guid("f13423a1-8b12-4d58-bcc1-2b29f41148c8"),
                            CivilEngineerId = new Guid("f13423a1-8b12-4d58-bcc1-2b29f41148c8"),
                            genericId = 3
                        },
                        new
                        {
                            Id = new Guid("93bd828b-2b6e-42a6-92e3-248f01438d34"),
                            genericId = 4
                        },
                        new
                        {
                            Id = new Guid("b8a7e539-8f3c-40d3-8a29-19edca7d65b4"),
                            ElectricianId = new Guid("b8a7e539-8f3c-40d3-8a29-19edca7d65b4"),
                            genericId = 5
                        },
                        new
                        {
                            Id = new Guid("76e63219-25e6-40f1-9a75-9486d4d478a9"),
                            ArchitectId = new Guid("76e63219-25e6-40f1-9a75-9486d4d478a9"),
                            genericId = 6
                        },
                        new
                        {
                            Id = new Guid("239bcae5-0c39-4bb2-8a9e-eebf92e4cd84"),
                            ElectricianId = new Guid("239bcae5-0c39-4bb2-8a9e-eebf92e4cd84"),
                            genericId = 7
                        },
                        new
                        {
                            Id = new Guid("5b6e1f3d-5d8a-4143-9e18-748cb5c06d27"),
                            genericId = 8
                        },
                        new
                        {
                            Id = new Guid("36f41695-bc6e-4a3f-a7e9-d41643b81245"),
                            genericId = 9
                        },
                        new
                        {
                            Id = new Guid("eea39b7d-8f13-49bc-8c45-c8e293d64829"),
                            genericId = 10
                        },
                        new
                        {
                            Id = new Guid("7f3b2d86-4d3c-498b-928c-5f8c3b7425d2"),
                            ArchitectId = new Guid("7f3b2d86-4d3c-498b-928c-5f8c3b7425d2"),
                            CivilEngineerId = new Guid("7f3b2d86-4d3c-498b-928c-5f8c3b7425d2"),
                            genericId = 11
                        },
                        new
                        {
                            Id = new Guid("23d8a69f-bf42-4518-bcd9-e75a29e5c4d6"),
                            ElectricianId = new Guid("23d8a69f-bf42-4518-bcd9-e75a29e5c4d6"),
                            genericId = 12
                        },
                        new
                        {
                            Id = new Guid("84e9327f-9c8a-41b3-84e6-2c548c29b8e3"),
                            CivilEngineerId = new Guid("84e9327f-9c8a-41b3-84e6-2c548c29b8e3"),
                            genericId = 13
                        },
                        new
                        {
                            Id = new Guid("3b948d76-b45e-4f9c-a37b-4d2b3e5c9a8e"),
                            ArchitectId = new Guid("3b948d76-b45e-4f9c-a37b-4d2b3e5c9a8e"),
                            genericId = 14
                        },
                        new
                        {
                            Id = new Guid("d59c8723-c8a6-44b8-85d4-b72e93c24851"),
                            CivilEngineerId = new Guid("d59c8723-c8a6-44b8-85d4-b72e93c24851"),
                            ElectricianId = new Guid("d59c8723-c8a6-44b8-85d4-b72e93c24851"),
                            genericId = 15
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Roofer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Roofer");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Surveyor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Surveyor");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Tiler", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfessionalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalTypeId");

                    b.ToTable("Tiler");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Project.Projecty", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("ActStep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ConstructionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalArea")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            ActStep = "Phase 1",
                            Address = "123 Main St",
                            Budget = 500000m,
                            City = "CityA",
                            ClientId = 1,
                            ConstructionType = "Residential",
                            Country = "CountryA",
                            Description = "Residential building item",
                            Neighborhood = "Downtown",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 4,
                            PostalCode = "12345",
                            ProjectName = "Project Alpha",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateA",
                            Status = "In Progress",
                            TotalArea = 250.5m
                        },
                        new
                        {
                            ProjectId = 2,
                            ActStep = "Phase 2",
                            Address = "456 Oak St",
                            Budget = 1000000m,
                            City = "CityB",
                            ClientId = 2,
                            ConstructionType = "Commercial",
                            Country = "CountryB",
                            Description = "Commercial building item",
                            EndDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Business District",
                            NumberOfBathrooms = 5,
                            NumberOfRooms = 10,
                            PostalCode = "23456",
                            ProjectName = "Project Beta",
                            StartDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateB",
                            Status = "Completed",
                            TotalArea = 500.0m
                        },
                        new
                        {
                            ProjectId = 3,
                            ActStep = "Initial Planning",
                            Address = "789 Pine St",
                            Budget = 250000m,
                            City = "CityC",
                            ClientId = 3,
                            ConstructionType = "Residential",
                            Country = "CountryC",
                            Description = "Planning phase",
                            Neighborhood = "Suburban",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 3,
                            PostalCode = "34567",
                            ProjectName = "Project Gamma",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateC",
                            Status = "Planning",
                            TotalArea = 180.0m
                        },
                        new
                        {
                            ProjectId = 4,
                            ActStep = "Construction",
                            Address = "101 Maple St",
                            Budget = 750000m,
                            City = "CityD",
                            ClientId = 4,
                            ConstructionType = "Commercial",
                            Country = "CountryD",
                            Description = "Office building item",
                            Neighborhood = "Tech Park",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 8,
                            PostalCode = "45678",
                            ProjectName = "Project Delta",
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateD",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 5,
                            ActStep = "Final Touches",
                            Address = "202 Birch St",
                            Budget = 300000m,
                            City = "CityE",
                            ClientId = 5,
                            ConstructionType = "Residential",
                            Country = "CountryE",
                            Description = "Single-family home",
                            EndDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Quiet Street",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 5,
                            PostalCode = "56789",
                            ProjectName = "Project Epsilon",
                            StartDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateE",
                            Status = "Completed",
                            TotalArea = 220.0m
                        },
                        new
                        {
                            ProjectId = 6,
                            ActStep = "Site Selection",
                            Address = "303 Cedar St",
                            Budget = 1200000m,
                            City = "CityF",
                            ClientId = 6,
                            ConstructionType = "Commercial",
                            Country = "CountryF",
                            Description = "Shopping mall",
                            Neighborhood = "Retail Hub",
                            NumberOfBathrooms = 10,
                            NumberOfRooms = 20,
                            PostalCode = "67890",
                            ProjectName = "Project Zeta",
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateF",
                            Status = "Planning",
                            TotalArea = 800.0m
                        },
                        new
                        {
                            ProjectId = 7,
                            ActStep = "Structural Work",
                            Address = "404 Fir St",
                            Budget = 600000m,
                            City = "CityG",
                            ClientId = 7,
                            ConstructionType = "Residential",
                            Country = "CountryG",
                            Description = "Luxury apartments",
                            Neighborhood = "Uptown",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 6,
                            PostalCode = "78901",
                            ProjectName = "Project Eta",
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateG",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 8,
                            ActStep = "Inspection",
                            Address = "505 Spruce St",
                            Budget = 500000m,
                            City = "CityH",
                            ClientId = 8,
                            ConstructionType = "Commercial",
                            Country = "CountryH",
                            Description = "Retail space",
                            EndDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Main Street",
                            NumberOfBathrooms = 1,
                            NumberOfRooms = 2,
                            PostalCode = "89012",
                            ProjectName = "Project Theta",
                            StartDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateH",
                            Status = "Completed",
                            TotalArea = 150.0m
                        },
                        new
                        {
                            ProjectId = 9,
                            ActStep = "Budget Approval",
                            Address = "606 Hemlock St",
                            Budget = 400000m,
                            City = "CityI",
                            ClientId = 9,
                            ConstructionType = "Residential",
                            Country = "CountryI",
                            Description = "Vacation home",
                            Neighborhood = "Lakeside",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 4,
                            PostalCode = "90123",
                            ProjectName = "Project Iota",
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateI",
                            Status = "Planning",
                            TotalArea = 300.0m
                        },
                        new
                        {
                            ProjectId = 10,
                            ActStep = "Interior Design",
                            Address = "707 Juniper St",
                            Budget = 800000m,
                            City = "CityJ",
                            ClientId = 10,
                            ConstructionType = "Commercial",
                            Country = "CountryJ",
                            Description = "Restaurant",
                            Neighborhood = "Downtown",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 5,
                            PostalCode = "01234",
                            ProjectName = "Project Kappa",
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateJ",
                            Status = "In Progress",
                            TotalArea = 250.0m
                        },
                        new
                        {
                            ProjectId = 11,
                            ActStep = "Landscaping",
                            Address = "808 Willow St",
                            Budget = 350000m,
                            City = "CityK",
                            ClientId = 11,
                            ConstructionType = "Residential",
                            Country = "CountryK",
                            Description = "Townhouse",
                            EndDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Historic District",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 4,
                            PostalCode = "12346",
                            ProjectName = "Project Lambda",
                            StartDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateK",
                            Status = "Completed",
                            TotalArea = 200.0m
                        },
                        new
                        {
                            ProjectId = 12,
                            ActStep = "Permitting",
                            Address = "909 Poplar St",
                            Budget = 950000m,
                            City = "CityL",
                            ClientId = 12,
                            ConstructionType = "Commercial",
                            Country = "CountryL",
                            Description = "Corporate office",
                            Neighborhood = "Business District",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 8,
                            PostalCode = "23457",
                            ProjectName = "Project Mu",
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateL",
                            Status = "Planning",
                            TotalArea = 400.0m
                        },
                        new
                        {
                            ProjectId = 13,
                            ActStep = "Framing",
                            Address = "1010 Redwood St",
                            Budget = 700000m,
                            City = "CityM",
                            ClientId = 13,
                            ConstructionType = "Residential",
                            Country = "CountryM",
                            Description = "Condo complex",
                            Neighborhood = "Urban Area",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 6,
                            PostalCode = "34568",
                            ProjectName = "Project Nu",
                            StartDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateM",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 14,
                            ActStep = "Final Inspection",
                            Address = "1111 Cedar St",
                            Budget = 1100000m,
                            City = "CityN",
                            ClientId = 14,
                            ConstructionType = "Commercial",
                            Country = "CountryN",
                            Description = "Tech campus",
                            EndDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Innovation Hub",
                            NumberOfBathrooms = 15,
                            NumberOfRooms = 30,
                            PostalCode = "45679",
                            ProjectName = "Project Xi",
                            StartDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateN",
                            Status = "Completed",
                            TotalArea = 1000.0m
                        },
                        new
                        {
                            ProjectId = 15,
                            ActStep = "Design Approval",
                            Address = "1212 Birch St",
                            Budget = 550000m,
                            City = "CityO",
                            ClientId = 15,
                            ConstructionType = "Residential",
                            Country = "CountryO",
                            Description = "Eco-friendly home",
                            Neighborhood = "Green Valley",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 4,
                            PostalCode = "56790",
                            ProjectName = "Project Omicron",
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateO",
                            Status = "Planning",
                            TotalArea = 275.0m
                        });
                });

            modelBuilder.Entity("GenericProfessionalProjecty", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.GenericProfessional", null)
                        .WithMany()
                        .HasForeignKey("ProfessionalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Project.Projecty", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectProfessional", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.GenericProfessional", "Professional")
                        .WithMany("ProjectProfessionals")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Project.Projecty", "Project")
                        .WithMany("ProjectProfessionals")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Clients.Client", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.ChatEntities.ChatAndUsers", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Components.ChatEntities.Chats", "Chat")
                        .WithMany("ChatAndUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany("ChatAndUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.ChatEntities.ChatMessage", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Components.ChatEntities.Chats", "Chats")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chats");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.Comment", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Components.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.Post", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.Proposal", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Clients.Client", "Client")
                        .WithMany("Proposals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Professional.GenericProfessional", "Professional")
                        .WithMany("Proposals")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Project.Projecty", "Project")
                        .WithMany("ProjectProposals")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");

                    b.Navigation("Professional");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.GenericProfessional", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Clients.Client", "Client")
                        .WithMany("GenericProfessionals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "GenericProfessionalType")
                        .WithMany()
                        .HasForeignKey("EspecializationsId");

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("GenericProfessionalType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Architect", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Cabinetmaker", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Carpenter", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.CivilEngineer", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Decorator", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ElectricalEngineer", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Electrician", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Foreman", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Glazier", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.HydraulicEngineer", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.InteriorDesigner", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Landscaper", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.MarbleWorker", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Mason", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Metalworker", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Painter", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Plasterer", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Plumber", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Architect", "Architect")
                        .WithMany()
                        .HasForeignKey("ArchitectId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Cabinetmaker", "Cabinetmaker")
                        .WithMany()
                        .HasForeignKey("CabinetmakerId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Carpenter", "Carpenter")
                        .WithMany()
                        .HasForeignKey("CarpenterId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.CivilEngineer", "CivilEngineer")
                        .WithMany()
                        .HasForeignKey("CivilEngineerId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Decorator", "Decorator")
                        .WithMany()
                        .HasForeignKey("DecoratorId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ElectricalEngineer", "ElectricalEngineer")
                        .WithMany()
                        .HasForeignKey("ElectricalEngineerId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Electrician", "Electrician")
                        .WithMany()
                        .HasForeignKey("ElectricianId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Foreman", "Foreman")
                        .WithMany()
                        .HasForeignKey("ForemanId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Glazier", "Glazier")
                        .WithMany()
                        .HasForeignKey("GlazierId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.HydraulicEngineer", "HydraulicEngineer")
                        .WithMany()
                        .HasForeignKey("HydraulicEngineerId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.InteriorDesigner", "InteriorDesigner")
                        .WithMany()
                        .HasForeignKey("InteriorDesignerId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Landscaper", "Landscaper")
                        .WithMany()
                        .HasForeignKey("LandscaperId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.MarbleWorker", "MarbleWorker")
                        .WithMany()
                        .HasForeignKey("MarbleWorkerId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Mason", "Mason")
                        .WithMany()
                        .HasForeignKey("MasonId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Metalworker", "Metalworker")
                        .WithMany()
                        .HasForeignKey("MetalworkerId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Painter", "Painter")
                        .WithMany()
                        .HasForeignKey("PainterId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Plasterer", "Plasterer")
                        .WithMany()
                        .HasForeignKey("PlastererId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Plumber", "Plumber")
                        .WithMany()
                        .HasForeignKey("PlumberId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Roofer", "Roofer")
                        .WithMany()
                        .HasForeignKey("RooferId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Surveyor", "Surveyor")
                        .WithMany()
                        .HasForeignKey("SurveyorId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Tiler", "Tiler")
                        .WithMany()
                        .HasForeignKey("TilerId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.GenericProfessional", "Professional")
                        .WithMany()
                        .HasForeignKey("genericId");

                    b.Navigation("Architect");

                    b.Navigation("Cabinetmaker");

                    b.Navigation("Carpenter");

                    b.Navigation("CivilEngineer");

                    b.Navigation("Decorator");

                    b.Navigation("ElectricalEngineer");

                    b.Navigation("Electrician");

                    b.Navigation("Foreman");

                    b.Navigation("Glazier");

                    b.Navigation("HydraulicEngineer");

                    b.Navigation("InteriorDesigner");

                    b.Navigation("Landscaper");

                    b.Navigation("MarbleWorker");

                    b.Navigation("Mason");

                    b.Navigation("Metalworker");

                    b.Navigation("Painter");

                    b.Navigation("Plasterer");

                    b.Navigation("Plumber");

                    b.Navigation("Professional");

                    b.Navigation("Roofer");

                    b.Navigation("Surveyor");

                    b.Navigation("Tiler");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Roofer", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Surveyor", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Tiler", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.ProfessionalsRelation.GenericProfessionalProfessionalType", "ProfessionalType")
                        .WithMany()
                        .HasForeignKey("ProfessionalTypeId");

                    b.Navigation("ProfessionalType");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Project.Projecty", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Clients.Client", "Client")
                        .WithMany("Houses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("WebAthenPs.API.Data.ApplicationUser", b =>
                {
                    b.Navigation("ChatAndUsers");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Clients.Client", b =>
                {
                    b.Navigation("GenericProfessionals");

                    b.Navigation("Houses");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.ChatEntities.Chats", b =>
                {
                    b.Navigation("ChatAndUsers");

                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.GenericProfessional", b =>
                {
                    b.Navigation("ProjectProfessionals");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Project.Projecty", b =>
                {
                    b.Navigation("ProjectProfessionals");

                    b.Navigation("ProjectProposals");
                });
#pragma warning restore 612, 618
        }
    }
}
