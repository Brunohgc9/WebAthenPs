// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAthenPs.API.Data;

#nullable disable

namespace WebAthenPs.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241018005310_FirstCorrectChatAttempt")]
    partial class FirstCorrectChatAttempt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenericProfessionalProjecty", b =>
                {
                    b.Property<int>("ProfessionalsId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsProjectId")
                        .HasColumnType("int");

                    b.HasKey("ProfessionalsId", "ProjectsProjectId");

                    b.HasIndex("ProjectsProjectId");

                    b.ToTable("GenericProfessionalProjecty");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectProfessional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContractedAs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectProfessionals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContractedAs = "[\"Arquiteto\"]",
                            ProfessionalId = 1,
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            ContractedAs = "[\"Arquiteto\"]",
                            ProfessionalId = 6,
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            ContractedAs = "[\"Eletricista\"]",
                            ProfessionalId = 2,
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 4,
                            ContractedAs = "[\"Eletricista\"]",
                            ProfessionalId = 7,
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 5,
                            ContractedAs = "[\"Engenheiro\"]",
                            ProfessionalId = 3,
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 6,
                            ContractedAs = "[\"Engenheiro\"]",
                            ProfessionalId = 8,
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 7,
                            ContractedAs = "[\"Pedreiro\"]",
                            ProfessionalId = 4,
                            ProjectId = 4
                        },
                        new
                        {
                            Id = 8,
                            ContractedAs = "[\"Pedreiro\"]",
                            ProfessionalId = 9,
                            ProjectId = 4
                        },
                        new
                        {
                            Id = 9,
                            ContractedAs = "[\"Encanador\"]",
                            ProfessionalId = 5,
                            ProjectId = 5
                        },
                        new
                        {
                            Id = 10,
                            ContractedAs = "[\"Encanador\"]",
                            ProfessionalId = 10,
                            ProjectId = 5
                        },
                        new
                        {
                            Id = 11,
                            ContractedAs = "[\"Eletricista\"]",
                            ProfessionalId = 11,
                            ProjectId = 6
                        },
                        new
                        {
                            Id = 12,
                            ContractedAs = "[\"Arquiteto\"]",
                            ProfessionalId = 12,
                            ProjectId = 6
                        },
                        new
                        {
                            Id = 13,
                            ContractedAs = "[\"Engenheiro\"]",
                            ProfessionalId = 13,
                            ProjectId = 7
                        },
                        new
                        {
                            Id = 14,
                            ContractedAs = "[\"Pedreiro\"]",
                            ProfessionalId = 14,
                            ProjectId = 7
                        },
                        new
                        {
                            Id = 15,
                            ContractedAs = "[\"Encanador\"]",
                            ProfessionalId = 15,
                            ProjectId = 8
                        },
                        new
                        {
                            Id = 16,
                            ContractedAs = "[\"Arquiteto\"]",
                            ProfessionalId = 1,
                            ProjectId = 8
                        },
                        new
                        {
                            Id = 17,
                            ContractedAs = "[\"Arquiteto\"]",
                            ProfessionalId = 6,
                            ProjectId = 9
                        },
                        new
                        {
                            Id = 18,
                            ContractedAs = "[\"Eletricista\"]",
                            ProfessionalId = 2,
                            ProjectId = 9
                        },
                        new
                        {
                            Id = 19,
                            ContractedAs = "[\"Eletricista\"]",
                            ProfessionalId = 7,
                            ProjectId = 10
                        },
                        new
                        {
                            Id = 20,
                            ContractedAs = "[\"Engenheiro\"]",
                            ProfessionalId = 3,
                            ProjectId = 10
                        },
                        new
                        {
                            Id = 21,
                            ContractedAs = "[\"Engenheiro\"]",
                            ProfessionalId = 8,
                            ProjectId = 11
                        },
                        new
                        {
                            Id = 22,
                            ContractedAs = "[\"Pedreiro\"]",
                            ProfessionalId = 4,
                            ProjectId = 11
                        },
                        new
                        {
                            Id = 23,
                            ContractedAs = "[\"Pedreiro\"]",
                            ProfessionalId = 9,
                            ProjectId = 12
                        },
                        new
                        {
                            Id = 24,
                            ContractedAs = "[\"Encanador\"]",
                            ProfessionalId = 5,
                            ProjectId = 12
                        },
                        new
                        {
                            Id = 25,
                            ContractedAs = "[\"Encanador\"]",
                            ProfessionalId = 10,
                            ProjectId = 13
                        },
                        new
                        {
                            Id = 26,
                            ContractedAs = "[\"Eletricista\"]",
                            ProfessionalId = 11,
                            ProjectId = 13
                        },
                        new
                        {
                            Id = 27,
                            ContractedAs = "[\"Arquiteto\"]",
                            ProfessionalId = 12,
                            ProjectId = 14
                        },
                        new
                        {
                            Id = 28,
                            ContractedAs = "[\"Engenheiro\"]",
                            ProfessionalId = 13,
                            ProjectId = 14
                        },
                        new
                        {
                            Id = 29,
                            ContractedAs = "[\"Pedreiro\"]",
                            ProfessionalId = 14,
                            ProjectId = 15
                        },
                        new
                        {
                            Id = 30,
                            ContractedAs = "[\"Encanador\"]",
                            ProfessionalId = 15,
                            ProjectId = 15
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            Address = "Rua A, 123",
                            CPF = "12345678901",
                            City = "São Paulo",
                            ConcurrencyStamp = "9233d780-9f4c-4d19-9bd6-581155f1cfab",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(8975),
                            Email = "carlos.silva@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "01000-000",
                            RG = "1234567",
                            SecurityStamp = "b10fefde-6963-40a9-bbd8-faa75e0a2278",
                            State = "SP",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(8977),
                            UserName = "Carlos Silva",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            Address = "Rua B, 456",
                            CPF = "23456789012",
                            City = "Rio de Janeiro",
                            ConcurrencyStamp = "65a403af-faa6-4b13-89c0-341d1510408d",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9069),
                            Email = "ana.souza@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "20000-000",
                            RG = "2345678",
                            SecurityStamp = "484adbbc-5527-4d23-8916-6686e0fb2eac",
                            State = "RJ",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9070),
                            UserName = "Ana Souza",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            Address = "Rua C, 789",
                            CPF = "34567890123",
                            City = "Belo Horizonte",
                            ConcurrencyStamp = "4c776116-4f46-412e-818c-bc350900a65d",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9092),
                            Email = "joao.oliveira@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "30000-000",
                            RG = "3456789",
                            SecurityStamp = "c208e97b-5c3f-402a-8aff-a68ae34ac3f7",
                            State = "MG",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9092),
                            UserName = "João Oliveira",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            Address = "Rua D, 101",
                            CPF = "45678901234",
                            City = "Salvador",
                            ConcurrencyStamp = "fc01737f-00de-4ada-b8d0-e651b0ebb83d",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9112),
                            Email = "maria.santos@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "40000-000",
                            RG = "4567890",
                            SecurityStamp = "bc3f6aed-881d-421f-b0bd-1738de940a14",
                            State = "BA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9112),
                            UserName = "Maria Santos",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user5",
                            AccessFailedCount = 0,
                            Address = "Rua E, 202",
                            CPF = "56789012345",
                            City = "Fortaleza",
                            ConcurrencyStamp = "078a0e5f-24b7-4892-98ea-a25c43a86282",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9132),
                            Email = "pedro.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "60000-000",
                            RG = "5678901",
                            SecurityStamp = "6dc481db-6446-4ce0-9938-6e336f2f563c",
                            State = "CE",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9132),
                            UserName = "Pedro Almeida",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user6",
                            AccessFailedCount = 0,
                            Address = "Rua F, 303",
                            CPF = "67890123456",
                            City = "Curitiba",
                            ConcurrencyStamp = "d81d5cce-ff90-45f0-8234-4e5e44943357",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9149),
                            Email = "juliana.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "80000-000",
                            RG = "6789012",
                            SecurityStamp = "0b34e7ed-5733-4fb7-85bf-5a9833ac738c",
                            State = "PR",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9150),
                            UserName = "Juliana Costa",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user7",
                            AccessFailedCount = 0,
                            Address = "Rua G, 404",
                            CPF = "78901234567",
                            City = "Porto Alegre",
                            ConcurrencyStamp = "8c606ac3-c230-4dd2-a074-4a9b33208065",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9168),
                            Email = "roberto.lima@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "90000-000",
                            RG = "7890123",
                            SecurityStamp = "7936fe29-adef-44b3-8136-49e52a63c929",
                            State = "RS",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9169),
                            UserName = "Roberto Lima",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user8",
                            AccessFailedCount = 0,
                            Address = "Rua H, 505",
                            CPF = "89012345678",
                            City = "Recife",
                            ConcurrencyStamp = "ac144646-e5ae-4374-aaa6-b4efbced184f",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9191),
                            Email = "patricia.martins@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "50000-000",
                            RG = "8901234",
                            SecurityStamp = "b3ef5dbb-7db9-4447-89ac-5e7ecfdc04e4",
                            State = "PE",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9191),
                            UserName = "Patricia Martins",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user9",
                            AccessFailedCount = 0,
                            Address = "Rua I, 606",
                            CPF = "90123456789",
                            City = "Belém",
                            ConcurrencyStamp = "8ac60b52-2208-49f1-9079-6c26860ed5f3",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9209),
                            Email = "ricardo.fernandes@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "66000-000",
                            RG = "9012345",
                            SecurityStamp = "ae5f7a8e-19c0-4883-8b6a-ce4573235ee5",
                            State = "PA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9210),
                            UserName = "Ricardo Fernandes",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user10",
                            AccessFailedCount = 0,
                            Address = "Rua J, 707",
                            CPF = "01234567890",
                            City = "Manaus",
                            ConcurrencyStamp = "442672d8-479e-46fa-9631-f491dd745a07",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9230),
                            Email = "claudia.rodrigues@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "69000-000",
                            RG = "0123456",
                            SecurityStamp = "20410ab0-b267-4195-8f5d-624d436e853d",
                            State = "AM",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9230),
                            UserName = "Claudia Rodrigues",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user11",
                            AccessFailedCount = 0,
                            Address = "Rua K, 808",
                            CPF = "12345678901",
                            City = "São Luís",
                            ConcurrencyStamp = "a5fee042-d4b5-4df5-8acf-6066bc82198b",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9250),
                            Email = "fernando.oliveira@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "65000-000",
                            RG = "1234567",
                            SecurityStamp = "a3790867-60c3-425c-bdf0-08f1845cadbb",
                            State = "MA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9250),
                            UserName = "Fernando Oliveira",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user12",
                            AccessFailedCount = 0,
                            Address = "Rua L, 909",
                            CPF = "23456789012",
                            City = "São José de Ribamar",
                            ConcurrencyStamp = "2dcba29e-0615-4b55-87b4-c0e13a218c23",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9268),
                            Email = "luciana.pereira@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "65100-000",
                            RG = "2345678",
                            SecurityStamp = "c27237e7-2371-49c4-85b3-5e2dfa86a3ec",
                            State = "MA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9268),
                            UserName = "Luciana Pereira",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user13",
                            AccessFailedCount = 0,
                            Address = "Rua M, 1010",
                            CPF = "34567890123",
                            City = "Teresina",
                            ConcurrencyStamp = "821d64af-ddda-41d7-a4e4-d3d216dff60e",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9321),
                            Email = "eduardo.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "64000-000",
                            RG = "3456789",
                            SecurityStamp = "8cbf0246-5437-4fbb-af53-8ad83a7b8dfa",
                            State = "PI",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9322),
                            UserName = "Eduardo Costa",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user14",
                            AccessFailedCount = 0,
                            Address = "Rua N, 1111",
                            CPF = "45678901234",
                            City = "Maceió",
                            ConcurrencyStamp = "5b0eb391-0b89-44a3-86c5-77e03959acbb",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9339),
                            Email = "renata.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "57000-000",
                            RG = "4567890",
                            SecurityStamp = "82afdeb6-1ed6-46a3-a5c9-5ecae729dcda",
                            State = "AL",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9340),
                            UserName = "Renata Almeida",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user15",
                            AccessFailedCount = 0,
                            Address = "Rua O, 1212",
                            CPF = "56789012345",
                            City = "João Pessoa",
                            ConcurrencyStamp = "3196bed6-d585-4400-9146-7839769916d2",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9358),
                            Email = "carlos.eduardo@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "58000-000",
                            RG = "5678901",
                            SecurityStamp = "94e1ae0a-658f-4535-bafd-618175f8e5a2",
                            State = "PB",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9358),
                            UserName = "Carlos Eduardo",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user16",
                            AccessFailedCount = 0,
                            Address = "Rua P, 1313",
                            CPF = "67890123456",
                            City = "São Paulo",
                            ConcurrencyStamp = "c6777d31-fb25-4c99-8326-e711c87f97df",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9378),
                            Email = "lucas.oliveira@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "01001-000",
                            RG = "6789012",
                            SecurityStamp = "5bd4f358-db0b-4ede-b208-5e58048ca151",
                            State = "SP",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9379),
                            UserName = "Lucas Oliveira",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user17",
                            AccessFailedCount = 0,
                            Address = "Rua Q, 1414",
                            CPF = "78901234567",
                            City = "Rio de Janeiro",
                            ConcurrencyStamp = "c5ed89ed-e541-4e56-b118-65d40e2494ac",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9397),
                            Email = "mariana.silva@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "20001-000",
                            RG = "7890123",
                            SecurityStamp = "c45f7e28-a577-475d-a2fd-f7ed884bfdd3",
                            State = "RJ",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9397),
                            UserName = "Mariana Silva",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user18",
                            AccessFailedCount = 0,
                            Address = "Rua R, 1515",
                            CPF = "89012345678",
                            City = "Belo Horizonte",
                            ConcurrencyStamp = "56859506-82f5-4279-baa3-4ed188cb89b1",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9417),
                            Email = "gabriel.santos@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "30001-000",
                            RG = "8901234",
                            SecurityStamp = "63f12f3e-7aa9-4035-b017-f34c2a35268d",
                            State = "MG",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9418),
                            UserName = "Gabriel Santos",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user19",
                            AccessFailedCount = 0,
                            Address = "Rua S, 1616",
                            CPF = "90123456789",
                            City = "Salvador",
                            ConcurrencyStamp = "71741f95-9786-4269-a9f0-98aed122e849",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9436),
                            Email = "juliana.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "40001-000",
                            RG = "9012345",
                            SecurityStamp = "d6d34471-aebf-49ee-8b59-5ef364abf8f1",
                            State = "BA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9437),
                            UserName = "Juliana Costa",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user20",
                            AccessFailedCount = 0,
                            Address = "Rua T, 1717",
                            CPF = "01234567890",
                            City = "Fortaleza",
                            ConcurrencyStamp = "4bc042da-7b64-480b-8cda-bbda44fb7ae6",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9456),
                            Email = "roberto.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "60001-000",
                            RG = "0123456",
                            SecurityStamp = "26d4cccc-f6d1-4c2a-9f46-1afd79c17505",
                            State = "CE",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9456),
                            UserName = "Roberto Almeida",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user21",
                            AccessFailedCount = 0,
                            Address = "Rua U, 1818",
                            CPF = "12345678901",
                            City = "Curitiba",
                            ConcurrencyStamp = "369a92e0-e8cb-40f9-80a5-c4d0981c32d3",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9478),
                            Email = "patricia.martins@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "80001-000",
                            RG = "1234567",
                            SecurityStamp = "15dab42c-de65-4d38-ba7b-d0b1817a5127",
                            State = "PR",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9479),
                            UserName = "Patricia Martins",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user22",
                            AccessFailedCount = 0,
                            Address = "Rua V, 1919",
                            CPF = "23456789012",
                            City = "Porto Alegre",
                            ConcurrencyStamp = "968a5973-693d-4935-829c-12a646a9e407",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9496),
                            Email = "ricardo.lima@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "90001-000",
                            RG = "2345678",
                            SecurityStamp = "d2513f39-abb8-4fef-bbab-79c9ed67da09",
                            State = "RS",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9496),
                            UserName = "Ricardo Lima",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user23",
                            AccessFailedCount = 0,
                            Address = "Rua W, 2020",
                            CPF = "34567890123",
                            City = "São Luís",
                            ConcurrencyStamp = "8efe73f0-91b3-474d-9218-9c7919469321",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9512),
                            Email = "claudia.souza@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "65001-000",
                            RG = "3456789",
                            SecurityStamp = "be4daffd-c584-4627-86a9-22ea0cbf6d96",
                            State = "MA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9513),
                            UserName = "Claudia Souza",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user24",
                            AccessFailedCount = 0,
                            Address = "Rua X, 2121",
                            CPF = "45678901234",
                            City = "Teresina",
                            ConcurrencyStamp = "b503b992-ac0c-42dd-b4a4-9481e679ab86",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9528),
                            Email = "fernando.santos@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "64001-000",
                            RG = "4567890",
                            SecurityStamp = "338cde50-7506-4f7d-8cf6-f32873b31484",
                            State = "PI",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9529),
                            UserName = "Fernando Santos",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user25",
                            AccessFailedCount = 0,
                            Address = "Rua Y, 2222",
                            CPF = "56789012345",
                            City = "Maceió",
                            ConcurrencyStamp = "a1158595-f5e0-4855-86d4-fa05de824048",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9541),
                            Email = "juliana.lima@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "57001-000",
                            RG = "5678901",
                            SecurityStamp = "dea80bd1-34a9-4c9f-af1b-8251f99e8c6b",
                            State = "AL",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9542),
                            UserName = "Juliana Lima",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user26",
                            AccessFailedCount = 0,
                            Address = "Rua Z, 2323",
                            CPF = "67890123456",
                            City = "João Pessoa",
                            ConcurrencyStamp = "4765fb0c-fd00-4701-907b-886d368ae077",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9557),
                            Email = "ricardo.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "58001-000",
                            RG = "6789012",
                            SecurityStamp = "6d732cb7-3296-446e-9ac4-f9905176bd31",
                            State = "PB",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9558),
                            UserName = "Ricardo Costa",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user27",
                            AccessFailedCount = 0,
                            Address = "Rua AA, 2424",
                            CPF = "78901234567",
                            City = "São Paulo",
                            ConcurrencyStamp = "af85163f-99da-4d6e-99c1-4583f34fbe63",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9574),
                            Email = "mariana.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "01002-000",
                            RG = "7890123",
                            SecurityStamp = "42cb50ed-b310-4523-9ef7-4cd7dc5e0fec",
                            State = "SP",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9574),
                            UserName = "Mariana Almeida",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user28",
                            AccessFailedCount = 0,
                            Address = "Rua BB, 2525",
                            CPF = "89012345678",
                            City = "Rio de Janeiro",
                            ConcurrencyStamp = "78b2c403-e9b6-4e5d-8f5e-1845faed104a",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9607),
                            Email = "gabriel.souza@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "20002-000",
                            RG = "8901234",
                            SecurityStamp = "bd23523f-293e-45f5-b41e-807e6d23f5b3",
                            State = "RJ",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9607),
                            UserName = "Gabriel Souza",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user29",
                            AccessFailedCount = 0,
                            Address = "Rua CC, 2626",
                            CPF = "90123456789",
                            City = "Belo Horizonte",
                            ConcurrencyStamp = "91c310a6-84fe-49ad-9071-1e451a583e35",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9625),
                            Email = "juliana.rodrigues@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "30002-000",
                            RG = "9012345",
                            SecurityStamp = "6fb41964-6dc4-4180-905b-4f575693c2dc",
                            State = "MG",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9625),
                            UserName = "Juliana Rodrigues",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user30",
                            AccessFailedCount = 0,
                            Address = "Rua DD, 2727",
                            CPF = "01234567890",
                            City = "Salvador",
                            ConcurrencyStamp = "7358a380-0135-40af-be31-db90ae5bd48f",
                            CreatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9641),
                            Email = "roberto.fernandes@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "40002-000",
                            RG = "0123456",
                            SecurityStamp = "39ef1b0e-bab1-4a75-a380-9476d7d142eb",
                            State = "BA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 10, 18, 0, 53, 9, 466, DateTimeKind.Utc).AddTicks(9641),
                            UserName = "Roberto Fernandes",
                            UserType = "Professional"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Clients.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            UserId = "user1"
                        },
                        new
                        {
                            ClientId = 2,
                            UserId = "user2"
                        },
                        new
                        {
                            ClientId = 3,
                            UserId = "user3"
                        },
                        new
                        {
                            ClientId = 4,
                            UserId = "user4"
                        },
                        new
                        {
                            ClientId = 5,
                            UserId = "user5"
                        },
                        new
                        {
                            ClientId = 6,
                            UserId = "user6"
                        },
                        new
                        {
                            ClientId = 7,
                            UserId = "user7"
                        },
                        new
                        {
                            ClientId = 8,
                            UserId = "user8"
                        },
                        new
                        {
                            ClientId = 9,
                            UserId = "user9"
                        },
                        new
                        {
                            ClientId = 10,
                            UserId = "user10"
                        },
                        new
                        {
                            ClientId = 11,
                            UserId = "user11"
                        },
                        new
                        {
                            ClientId = 12,
                            UserId = "user12"
                        },
                        new
                        {
                            ClientId = 13,
                            UserId = "user13"
                        },
                        new
                        {
                            ClientId = 14,
                            UserId = "user14"
                        },
                        new
                        {
                            ClientId = 15,
                            UserId = "user15"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.ChatEntities.ChatAndUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatAndUsers");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.ChatEntities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.ChatEntities.Chats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LikedByUserIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.Proposal", b =>
                {
                    b.Property<Guid>("ProposalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ProposalMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProposalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProposalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ToBeContractedAs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProposalId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProfessionalId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.GenericProfessional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ArchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionalTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArchId")
                        .IsUnique()
                        .HasFilter("[ArchId] IS NOT NULL");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("GenericProfessionals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArchId = new Guid("9876b54c-7952-4f52-a170-ed3036394792"),
                            ClientId = 1,
                            ProfessionalTypes = "[\"Arquiteto\"]",
                            UserId = "user16"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            ProfessionalTypes = "[\"Eletricista\"]",
                            UserId = "user17"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            ProfessionalTypes = "[\"Engenheiro\"]",
                            UserId = "user18"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 4,
                            ProfessionalTypes = "[\"Pedreiro\"]",
                            UserId = "user19"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 5,
                            ProfessionalTypes = "[\"Encanador\"]",
                            UserId = "user20"
                        },
                        new
                        {
                            Id = 6,
                            ArchId = new Guid("a05cf0e7-d957-44ba-9e2a-313def7408ba"),
                            ClientId = 6,
                            ProfessionalTypes = "[\"Arquiteto\"]",
                            UserId = "user21"
                        },
                        new
                        {
                            Id = 7,
                            ClientId = 7,
                            ProfessionalTypes = "[\"Eletricista\"]",
                            UserId = "user22"
                        },
                        new
                        {
                            Id = 8,
                            ClientId = 8,
                            ProfessionalTypes = "[\"Engenheiro\"]",
                            UserId = "user23"
                        },
                        new
                        {
                            Id = 9,
                            ClientId = 9,
                            ProfessionalTypes = "[\"Pedreiro\"]",
                            UserId = "user24"
                        },
                        new
                        {
                            Id = 10,
                            ClientId = 10,
                            ProfessionalTypes = "[\"Encanador\"]",
                            UserId = "user25"
                        },
                        new
                        {
                            Id = 11,
                            ClientId = 11,
                            ProfessionalTypes = "[\"Eletricista\"]",
                            UserId = "user26"
                        },
                        new
                        {
                            Id = 12,
                            ArchId = new Guid("c151318e-3c52-4120-a0c1-b47b35ce07d1"),
                            ClientId = 12,
                            ProfessionalTypes = "[\"Arquiteto\"]",
                            UserId = "user27"
                        },
                        new
                        {
                            Id = 13,
                            ClientId = 13,
                            ProfessionalTypes = "[\"Engenheiro\"]",
                            UserId = "user28"
                        },
                        new
                        {
                            Id = 14,
                            ClientId = 14,
                            ProfessionalTypes = "[\"Pedreiro\"]",
                            UserId = "user29"
                        },
                        new
                        {
                            Id = 15,
                            ClientId = 15,
                            ProfessionalTypes = "[\"Encanador\"]",
                            UserId = "user30"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Architect", b =>
                {
                    b.Property<Guid>("ArchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Especialidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistroConselho")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("genericId")
                        .HasColumnType("int");

                    b.HasKey("ArchId");

                    b.ToTable("Architects");

                    b.HasData(
                        new
                        {
                            ArchId = new Guid("9876b54c-7952-4f52-a170-ed3036394792"),
                            Especialidade = "Residencial",
                            RegistroConselho = "123456",
                            genericId = 1
                        },
                        new
                        {
                            ArchId = new Guid("a05cf0e7-d957-44ba-9e2a-313def7408ba"),
                            Especialidade = "Comercial",
                            RegistroConselho = "654321",
                            genericId = 6
                        },
                        new
                        {
                            ArchId = new Guid("c151318e-3c52-4120-a0c1-b47b35ce07d1"),
                            Especialidade = "Industrial",
                            RegistroConselho = "112233",
                            genericId = 12
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Project.Projecty", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("ActStep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ConstructionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalArea")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            ActStep = "Phase 1",
                            Address = "123 Main St",
                            Budget = 500000m,
                            City = "CityA",
                            ClientId = 1,
                            ConstructionType = "Residential",
                            Country = "CountryA",
                            Description = "Residential building item",
                            Neighborhood = "Downtown",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 4,
                            PostalCode = "12345",
                            ProjectName = "Project Alpha",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateA",
                            Status = "In Progress",
                            TotalArea = 250.5m
                        },
                        new
                        {
                            ProjectId = 2,
                            ActStep = "Phase 2",
                            Address = "456 Oak St",
                            Budget = 1000000m,
                            City = "CityB",
                            ClientId = 2,
                            ConstructionType = "Commercial",
                            Country = "CountryB",
                            Description = "Commercial building item",
                            EndDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Business District",
                            NumberOfBathrooms = 5,
                            NumberOfRooms = 10,
                            PostalCode = "23456",
                            ProjectName = "Project Beta",
                            StartDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateB",
                            Status = "Completed",
                            TotalArea = 500.0m
                        },
                        new
                        {
                            ProjectId = 3,
                            ActStep = "Initial Planning",
                            Address = "789 Pine St",
                            Budget = 250000m,
                            City = "CityC",
                            ClientId = 3,
                            ConstructionType = "Residential",
                            Country = "CountryC",
                            Description = "Planning phase",
                            Neighborhood = "Suburban",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 3,
                            PostalCode = "34567",
                            ProjectName = "Project Gamma",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateC",
                            Status = "Planning",
                            TotalArea = 180.0m
                        },
                        new
                        {
                            ProjectId = 4,
                            ActStep = "Construction",
                            Address = "101 Maple St",
                            Budget = 750000m,
                            City = "CityD",
                            ClientId = 4,
                            ConstructionType = "Commercial",
                            Country = "CountryD",
                            Description = "Office building item",
                            Neighborhood = "Tech Park",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 8,
                            PostalCode = "45678",
                            ProjectName = "Project Delta",
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateD",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 5,
                            ActStep = "Final Touches",
                            Address = "202 Birch St",
                            Budget = 300000m,
                            City = "CityE",
                            ClientId = 5,
                            ConstructionType = "Residential",
                            Country = "CountryE",
                            Description = "Single-family home",
                            EndDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Quiet Street",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 5,
                            PostalCode = "56789",
                            ProjectName = "Project Epsilon",
                            StartDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateE",
                            Status = "Completed",
                            TotalArea = 220.0m
                        },
                        new
                        {
                            ProjectId = 6,
                            ActStep = "Site Selection",
                            Address = "303 Cedar St",
                            Budget = 1200000m,
                            City = "CityF",
                            ClientId = 6,
                            ConstructionType = "Commercial",
                            Country = "CountryF",
                            Description = "Shopping mall",
                            Neighborhood = "Retail Hub",
                            NumberOfBathrooms = 10,
                            NumberOfRooms = 20,
                            PostalCode = "67890",
                            ProjectName = "Project Zeta",
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateF",
                            Status = "Planning",
                            TotalArea = 800.0m
                        },
                        new
                        {
                            ProjectId = 7,
                            ActStep = "Structural Work",
                            Address = "404 Fir St",
                            Budget = 600000m,
                            City = "CityG",
                            ClientId = 7,
                            ConstructionType = "Residential",
                            Country = "CountryG",
                            Description = "Luxury apartments",
                            Neighborhood = "Uptown",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 6,
                            PostalCode = "78901",
                            ProjectName = "Project Eta",
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateG",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 8,
                            ActStep = "Inspection",
                            Address = "505 Spruce St",
                            Budget = 500000m,
                            City = "CityH",
                            ClientId = 8,
                            ConstructionType = "Commercial",
                            Country = "CountryH",
                            Description = "Retail space",
                            EndDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Main Street",
                            NumberOfBathrooms = 1,
                            NumberOfRooms = 2,
                            PostalCode = "89012",
                            ProjectName = "Project Theta",
                            StartDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateH",
                            Status = "Completed",
                            TotalArea = 150.0m
                        },
                        new
                        {
                            ProjectId = 9,
                            ActStep = "Budget Approval",
                            Address = "606 Hemlock St",
                            Budget = 400000m,
                            City = "CityI",
                            ClientId = 9,
                            ConstructionType = "Residential",
                            Country = "CountryI",
                            Description = "Vacation home",
                            Neighborhood = "Lakeside",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 4,
                            PostalCode = "90123",
                            ProjectName = "Project Iota",
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateI",
                            Status = "Planning",
                            TotalArea = 300.0m
                        },
                        new
                        {
                            ProjectId = 10,
                            ActStep = "Interior Design",
                            Address = "707 Juniper St",
                            Budget = 800000m,
                            City = "CityJ",
                            ClientId = 10,
                            ConstructionType = "Commercial",
                            Country = "CountryJ",
                            Description = "Restaurant",
                            Neighborhood = "Downtown",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 5,
                            PostalCode = "01234",
                            ProjectName = "Project Kappa",
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateJ",
                            Status = "In Progress",
                            TotalArea = 250.0m
                        },
                        new
                        {
                            ProjectId = 11,
                            ActStep = "Landscaping",
                            Address = "808 Willow St",
                            Budget = 350000m,
                            City = "CityK",
                            ClientId = 11,
                            ConstructionType = "Residential",
                            Country = "CountryK",
                            Description = "Townhouse",
                            EndDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Historic District",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 4,
                            PostalCode = "12346",
                            ProjectName = "Project Lambda",
                            StartDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateK",
                            Status = "Completed",
                            TotalArea = 200.0m
                        },
                        new
                        {
                            ProjectId = 12,
                            ActStep = "Permitting",
                            Address = "909 Poplar St",
                            Budget = 950000m,
                            City = "CityL",
                            ClientId = 12,
                            ConstructionType = "Commercial",
                            Country = "CountryL",
                            Description = "Corporate office",
                            Neighborhood = "Business District",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 8,
                            PostalCode = "23457",
                            ProjectName = "Project Mu",
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateL",
                            Status = "Planning",
                            TotalArea = 400.0m
                        },
                        new
                        {
                            ProjectId = 13,
                            ActStep = "Framing",
                            Address = "1010 Redwood St",
                            Budget = 700000m,
                            City = "CityM",
                            ClientId = 13,
                            ConstructionType = "Residential",
                            Country = "CountryM",
                            Description = "Condo complex",
                            Neighborhood = "Urban Area",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 6,
                            PostalCode = "34568",
                            ProjectName = "Project Nu",
                            StartDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateM",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 14,
                            ActStep = "Final Inspection",
                            Address = "1111 Cedar St",
                            Budget = 1100000m,
                            City = "CityN",
                            ClientId = 14,
                            ConstructionType = "Commercial",
                            Country = "CountryN",
                            Description = "Tech campus",
                            EndDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Innovation Hub",
                            NumberOfBathrooms = 15,
                            NumberOfRooms = 30,
                            PostalCode = "45679",
                            ProjectName = "Project Xi",
                            StartDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateN",
                            Status = "Completed",
                            TotalArea = 1000.0m
                        },
                        new
                        {
                            ProjectId = 15,
                            ActStep = "Design Approval",
                            Address = "1212 Birch St",
                            Budget = 550000m,
                            City = "CityO",
                            ClientId = 15,
                            ConstructionType = "Residential",
                            Country = "CountryO",
                            Description = "Eco-friendly home",
                            Neighborhood = "Green Valley",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 4,
                            PostalCode = "56790",
                            ProjectName = "Project Omicron",
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateO",
                            Status = "Planning",
                            TotalArea = 275.0m
                        });
                });

            modelBuilder.Entity("GenericProfessionalProjecty", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.GenericProfessional", null)
                        .WithMany()
                        .HasForeignKey("ProfessionalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Project.Projecty", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectProfessional", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.GenericProfessional", "Professional")
                        .WithMany("ProjectProfessionals")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Project.Projecty", "Project")
                        .WithMany("ProjectProfessionals")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Clients.Client", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.ChatEntities.ChatAndUsers", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Components.ChatEntities.Chats", "Chat")
                        .WithMany("ChatAndUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany("ChatAndUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.ChatEntities.ChatMessage", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Components.ChatEntities.Chats", "Chats")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chats");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.Comment", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Components.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.Post", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.Proposal", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Clients.Client", "Client")
                        .WithMany("Proposals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Professional.GenericProfessional", "Professional")
                        .WithMany("Proposals")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Project.Projecty", "Project")
                        .WithMany("ProjectProposals")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");

                    b.Navigation("Professional");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.GenericProfessional", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Architect", "Architect")
                        .WithOne("Professional")
                        .HasForeignKey("WebAthenPs.API.Entities.Professional.GenericProfessional", "ArchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebAthenPs.API.Entities.Clients.Client", "Client")
                        .WithMany("GenericProfessionals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Architect");

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Project.Projecty", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Clients.Client", "Client")
                        .WithMany("Houses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("WebAthenPs.API.Data.ApplicationUser", b =>
                {
                    b.Navigation("ChatAndUsers");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Clients.Client", b =>
                {
                    b.Navigation("GenericProfessionals");

                    b.Navigation("Houses");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.ChatEntities.Chats", b =>
                {
                    b.Navigation("ChatAndUsers");

                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Components.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.GenericProfessional", b =>
                {
                    b.Navigation("ProjectProfessionals");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Architect", b =>
                {
                    b.Navigation("Professional")
                        .IsRequired();
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Project.Projecty", b =>
                {
                    b.Navigation("ProjectProfessionals");

                    b.Navigation("ProjectProposals");
                });
#pragma warning restore 612, 618
        }
    }
}
