// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAthenPs.API.Data;

#nullable disable

namespace WebAthenPs.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240724194110_SecondPopulation")]
    partial class SecondPopulation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenericProfessionalProjects", b =>
                {
                    b.Property<int>("ProfessionalsGProfessionalId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsProjectId")
                        .HasColumnType("int");

                    b.HasKey("ProfessionalsGProfessionalId", "ProjectsProjectId");

                    b.HasIndex("ProjectsProjectId");

                    b.ToTable("ProjectProfessionals", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebAthenPs.API.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            Address = "123 Main St",
                            CPF = "12345678901",
                            City = "CityA",
                            ConcurrencyStamp = "2e2b229a-da65-4da8-b09b-42bee3617f50",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8528),
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "12345",
                            RG = "1234567",
                            Role = "Admin",
                            SecurityStamp = "0588f39b-821f-4fd2-a732-01de8dd7d898",
                            State = "StateA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8530),
                            UserName = "user1@example.com",
                            UserType = "Residential"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            Address = "456 Oak St",
                            CPF = "23456789012",
                            City = "CityB",
                            ConcurrencyStamp = "cad86cf0-e030-4c8a-ad74-07b66bd2b366",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8581),
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "23456",
                            RG = "2345678",
                            Role = "User",
                            SecurityStamp = "64898d2f-ddd7-4cfa-a187-60bc1bdaaac5",
                            State = "StateB",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8581),
                            UserName = "user2@example.com",
                            UserType = "Commercial"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            Address = "789 Pine St",
                            CPF = "34567890123",
                            City = "CityC",
                            ConcurrencyStamp = "03c4823d-399d-447c-b7b6-b2cab4ebba22",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8594),
                            Email = "user3@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "34567",
                            RG = "3456789",
                            Role = "Admin",
                            SecurityStamp = "29938d5e-8755-4a4d-87d8-96db5e2aae04",
                            State = "StateC",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8594),
                            UserName = "user3@example.com",
                            UserType = "Residential"
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            Address = "101 Maple St",
                            CPF = "45678901234",
                            City = "CityD",
                            ConcurrencyStamp = "b0bd6acc-e57a-4290-97d7-6ec211dc2d1a",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8614),
                            Email = "user4@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "45678",
                            RG = "4567890",
                            Role = "User",
                            SecurityStamp = "68a332ce-a349-4c5f-b5ac-88fe4b346979",
                            State = "StateD",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8614),
                            UserName = "user4@example.com",
                            UserType = "Commercial"
                        },
                        new
                        {
                            Id = "user5",
                            AccessFailedCount = 0,
                            Address = "202 Birch St",
                            CPF = "56789012345",
                            City = "CityE",
                            ConcurrencyStamp = "a2fafd37-58de-41ce-9483-07bc8516e47c",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8626),
                            Email = "user5@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "56789",
                            RG = "5678901",
                            Role = "Admin",
                            SecurityStamp = "34a47a64-5ad7-45b6-905c-6018bd2d1c27",
                            State = "StateE",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8626),
                            UserName = "user5@example.com",
                            UserType = "Residential"
                        },
                        new
                        {
                            Id = "user6",
                            AccessFailedCount = 0,
                            Address = "303 Cedar St",
                            CPF = "67890123456",
                            City = "CityF",
                            ConcurrencyStamp = "ef764571-2be9-41d0-9a31-956e0b176eff",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8639),
                            Email = "user6@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "67890",
                            RG = "6789012",
                            Role = "User",
                            SecurityStamp = "800389f2-3c5e-494d-b35c-07ccfde3adb6",
                            State = "StateF",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8639),
                            UserName = "user6@example.com",
                            UserType = "Commercial"
                        },
                        new
                        {
                            Id = "user7",
                            AccessFailedCount = 0,
                            Address = "404 Fir St",
                            CPF = "78901234567",
                            City = "CityG",
                            ConcurrencyStamp = "a24c1d2b-6232-4639-8325-a9f2d9032513",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8652),
                            Email = "user7@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "78901",
                            RG = "7890123",
                            Role = "Admin",
                            SecurityStamp = "c4a806ca-c24d-4abe-8baf-c49989751936",
                            State = "StateG",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8653),
                            UserName = "user7@example.com",
                            UserType = "Residential"
                        },
                        new
                        {
                            Id = "user8",
                            AccessFailedCount = 0,
                            Address = "505 Spruce St",
                            CPF = "89012345678",
                            City = "CityH",
                            ConcurrencyStamp = "2bfa580a-b8c4-496a-ac79-5ec04b0d0b8b",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8664),
                            Email = "user8@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "89012",
                            RG = "8901234",
                            Role = "User",
                            SecurityStamp = "2e3e5eb5-5dc2-4241-9c57-57117be345c4",
                            State = "StateH",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8665),
                            UserName = "user8@example.com",
                            UserType = "Commercial"
                        },
                        new
                        {
                            Id = "user9",
                            AccessFailedCount = 0,
                            Address = "606 Hemlock St",
                            CPF = "90123456789",
                            City = "CityI",
                            ConcurrencyStamp = "820c67b8-5eeb-42b0-b78a-d6acc0da0cee",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8678),
                            Email = "user9@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "90123",
                            RG = "9012345",
                            Role = "Admin",
                            SecurityStamp = "5c183c3a-ad5b-4e3b-ac7e-1b5d704bd159",
                            State = "StateI",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8678),
                            UserName = "user9@example.com",
                            UserType = "Residential"
                        },
                        new
                        {
                            Id = "user10",
                            AccessFailedCount = 0,
                            Address = "707 Juniper St",
                            CPF = "01234567890",
                            City = "CityJ",
                            ConcurrencyStamp = "20746dc2-8317-4f7c-8f6e-7615900441ea",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8689),
                            Email = "user10@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "01234",
                            RG = "0123456",
                            Role = "User",
                            SecurityStamp = "134fa86c-6d63-4033-a080-facb8a3997ec",
                            State = "StateJ",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8690),
                            UserName = "user10@example.com",
                            UserType = "Commercial"
                        },
                        new
                        {
                            Id = "user11",
                            AccessFailedCount = 0,
                            Address = "808 Willow St",
                            CPF = "12345678901",
                            City = "CityK",
                            ConcurrencyStamp = "7d22b665-23d2-474a-9e0a-2808b76b6198",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8701),
                            Email = "user11@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "12346",
                            RG = "1234568",
                            Role = "Admin",
                            SecurityStamp = "d31119e1-94b1-4ed9-a917-87bbdcc30fc0",
                            State = "StateK",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8701),
                            UserName = "user11@example.com",
                            UserType = "Residential"
                        },
                        new
                        {
                            Id = "user12",
                            AccessFailedCount = 0,
                            Address = "909 Poplar St",
                            CPF = "23456789012",
                            City = "CityL",
                            ConcurrencyStamp = "0953d18a-3123-48f5-91a3-6ac3a1011551",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8715),
                            Email = "user12@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "23457",
                            RG = "2345679",
                            Role = "User",
                            SecurityStamp = "075f2942-07b7-4cab-9cef-e130cde56e8c",
                            State = "StateL",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8715),
                            UserName = "user12@example.com",
                            UserType = "Commercial"
                        },
                        new
                        {
                            Id = "user13",
                            AccessFailedCount = 0,
                            Address = "1010 Redwood St",
                            CPF = "34567890123",
                            City = "CityM",
                            ConcurrencyStamp = "6d70228d-7e84-4e78-b579-d7593a5e6be3",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8752),
                            Email = "user13@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "34568",
                            RG = "3456790",
                            Role = "Admin",
                            SecurityStamp = "46e6fb03-bc2d-4059-b8a4-281278129072",
                            State = "StateM",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8752),
                            UserName = "user13@example.com",
                            UserType = "Residential"
                        },
                        new
                        {
                            Id = "user14",
                            AccessFailedCount = 0,
                            Address = "1111 Fir St",
                            CPF = "45678901234",
                            City = "CityN",
                            ConcurrencyStamp = "717e0f27-3e6a-40ba-8e99-4465a299948c",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8763),
                            Email = "user14@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "45679",
                            RG = "4567901",
                            Role = "User",
                            SecurityStamp = "348a818c-1ead-491c-9796-4133d4d5eb19",
                            State = "StateN",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8764),
                            UserName = "user14@example.com",
                            UserType = "Commercial"
                        },
                        new
                        {
                            Id = "user15",
                            AccessFailedCount = 0,
                            Address = "1212 Elm St",
                            CPF = "56789012345",
                            City = "CityO",
                            ConcurrencyStamp = "4f11e8f0-86cf-4dd2-82bc-8091eae9e333",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8777),
                            Email = "user15@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "56780",
                            RG = "5678912",
                            Role = "Admin",
                            SecurityStamp = "958a6b71-0153-4872-879b-7c2d576708c8",
                            State = "StateO",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 41, 9, 790, DateTimeKind.Utc).AddTicks(8777),
                            UserName = "user15@example.com",
                            UserType = "Residential"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            UserId = "user1"
                        },
                        new
                        {
                            ClientId = 2,
                            UserId = "user2"
                        },
                        new
                        {
                            ClientId = 3,
                            UserId = "user3"
                        },
                        new
                        {
                            ClientId = 4,
                            UserId = "user4"
                        },
                        new
                        {
                            ClientId = 5,
                            UserId = "user5"
                        },
                        new
                        {
                            ClientId = 6,
                            UserId = "user6"
                        },
                        new
                        {
                            ClientId = 7,
                            UserId = "user7"
                        },
                        new
                        {
                            ClientId = 8,
                            UserId = "user8"
                        },
                        new
                        {
                            ClientId = 9,
                            UserId = "user9"
                        },
                        new
                        {
                            ClientId = 10,
                            UserId = "user10"
                        },
                        new
                        {
                            ClientId = 11,
                            UserId = "user11"
                        },
                        new
                        {
                            ClientId = 12,
                            UserId = "user12"
                        },
                        new
                        {
                            ClientId = 13,
                            UserId = "user13"
                        },
                        new
                        {
                            ClientId = 14,
                            UserId = "user14"
                        },
                        new
                        {
                            ClientId = 15,
                            UserId = "user15"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.GenericProfessional", b =>
                {
                    b.Property<int>("GProfessionalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GProfessionalId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GProfessionalId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("GenericProfessionals");

                    b.HasData(
                        new
                        {
                            GProfessionalId = 1,
                            ClientId = 1,
                            UserId = "user1"
                        },
                        new
                        {
                            GProfessionalId = 2,
                            ClientId = 2,
                            UserId = "user2"
                        },
                        new
                        {
                            GProfessionalId = 3,
                            ClientId = 3,
                            UserId = "user3"
                        },
                        new
                        {
                            GProfessionalId = 4,
                            ClientId = 4,
                            UserId = "user4"
                        },
                        new
                        {
                            GProfessionalId = 5,
                            ClientId = 5,
                            UserId = "user5"
                        },
                        new
                        {
                            GProfessionalId = 6,
                            ClientId = 6,
                            UserId = "user6"
                        },
                        new
                        {
                            GProfessionalId = 7,
                            ClientId = 7,
                            UserId = "user7"
                        },
                        new
                        {
                            GProfessionalId = 8,
                            ClientId = 8,
                            UserId = "user8"
                        },
                        new
                        {
                            GProfessionalId = 9,
                            ClientId = 9,
                            UserId = "user9"
                        },
                        new
                        {
                            GProfessionalId = 10,
                            ClientId = 10,
                            UserId = "user10"
                        },
                        new
                        {
                            GProfessionalId = 11,
                            ClientId = 11,
                            UserId = "user11"
                        },
                        new
                        {
                            GProfessionalId = 12,
                            ClientId = 12,
                            UserId = "user12"
                        },
                        new
                        {
                            GProfessionalId = 13,
                            ClientId = 13,
                            UserId = "user13"
                        },
                        new
                        {
                            GProfessionalId = 14,
                            ClientId = 14,
                            UserId = "user14"
                        },
                        new
                        {
                            GProfessionalId = 15,
                            ClientId = 15,
                            UserId = "user15"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Projects", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ConstructionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalArea")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            Address = "123 Main St",
                            Budget = 500000m,
                            City = "CityA",
                            ClientId = 1,
                            ConstructionType = "Residential",
                            Country = "CountryA",
                            Description = "Residential building item",
                            Neighborhood = "Downtown",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 4,
                            PostalCode = "12345",
                            ProjectName = "Project Alpha",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateA",
                            Status = "In Progress",
                            TotalArea = 250.5m
                        },
                        new
                        {
                            ProjectId = 2,
                            Address = "456 Oak St",
                            Budget = 1000000m,
                            City = "CityB",
                            ClientId = 2,
                            ConstructionType = "Commercial",
                            Country = "CountryB",
                            Description = "Commercial building item",
                            EndDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Business District",
                            NumberOfBathrooms = 5,
                            NumberOfRooms = 10,
                            PostalCode = "23456",
                            ProjectName = "Project Beta",
                            StartDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateB",
                            Status = "Completed",
                            TotalArea = 500.0m
                        },
                        new
                        {
                            ProjectId = 3,
                            Address = "789 Pine St",
                            Budget = 250000m,
                            City = "CityC",
                            ClientId = 3,
                            ConstructionType = "Residential",
                            Country = "CountryC",
                            Description = "Planning phase",
                            Neighborhood = "Suburban",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 3,
                            PostalCode = "34567",
                            ProjectName = "Project Gamma",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateC",
                            Status = "Planning",
                            TotalArea = 180.0m
                        },
                        new
                        {
                            ProjectId = 4,
                            Address = "101 Maple St",
                            Budget = 750000m,
                            City = "CityD",
                            ClientId = 4,
                            ConstructionType = "Commercial",
                            Country = "CountryD",
                            Description = "Office building item",
                            Neighborhood = "Tech Park",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 8,
                            PostalCode = "45678",
                            ProjectName = "Project Delta",
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateD",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 5,
                            Address = "202 Birch St",
                            Budget = 300000m,
                            City = "CityE",
                            ClientId = 5,
                            ConstructionType = "Residential",
                            Country = "CountryE",
                            Description = "Single-family home",
                            EndDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Quiet Street",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 5,
                            PostalCode = "56789",
                            ProjectName = "Project Epsilon",
                            StartDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateE",
                            Status = "Completed",
                            TotalArea = 220.0m
                        },
                        new
                        {
                            ProjectId = 6,
                            Address = "303 Cedar St",
                            Budget = 1200000m,
                            City = "CityF",
                            ClientId = 6,
                            ConstructionType = "Commercial",
                            Country = "CountryF",
                            Description = "Shopping mall",
                            Neighborhood = "Retail Hub",
                            NumberOfBathrooms = 10,
                            NumberOfRooms = 20,
                            PostalCode = "67890",
                            ProjectName = "Project Zeta",
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateF",
                            Status = "Planning",
                            TotalArea = 800.0m
                        },
                        new
                        {
                            ProjectId = 7,
                            Address = "404 Fir St",
                            Budget = 600000m,
                            City = "CityG",
                            ClientId = 7,
                            ConstructionType = "Residential",
                            Country = "CountryG",
                            Description = "Luxury apartments",
                            Neighborhood = "Uptown",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 6,
                            PostalCode = "78901",
                            ProjectName = "Project Eta",
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateG",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 8,
                            Address = "505 Spruce St",
                            Budget = 500000m,
                            City = "CityH",
                            ClientId = 8,
                            ConstructionType = "Commercial",
                            Country = "CountryH",
                            Description = "Retail space",
                            EndDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Main Street",
                            NumberOfBathrooms = 1,
                            NumberOfRooms = 2,
                            PostalCode = "89012",
                            ProjectName = "Project Theta",
                            StartDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateH",
                            Status = "Completed",
                            TotalArea = 150.0m
                        },
                        new
                        {
                            ProjectId = 9,
                            Address = "606 Hemlock St",
                            Budget = 400000m,
                            City = "CityI",
                            ClientId = 9,
                            ConstructionType = "Residential",
                            Country = "CountryI",
                            Description = "Vacation home",
                            Neighborhood = "Lakeside",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 4,
                            PostalCode = "90123",
                            ProjectName = "Project Iota",
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateI",
                            Status = "Planning",
                            TotalArea = 300.0m
                        },
                        new
                        {
                            ProjectId = 10,
                            Address = "707 Juniper St",
                            Budget = 800000m,
                            City = "CityJ",
                            ClientId = 10,
                            ConstructionType = "Commercial",
                            Country = "CountryJ",
                            Description = "Restaurant",
                            Neighborhood = "Downtown",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 5,
                            PostalCode = "01234",
                            ProjectName = "Project Kappa",
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateJ",
                            Status = "In Progress",
                            TotalArea = 250.0m
                        },
                        new
                        {
                            ProjectId = 11,
                            Address = "808 Willow St",
                            Budget = 350000m,
                            City = "CityK",
                            ClientId = 11,
                            ConstructionType = "Residential",
                            Country = "CountryK",
                            Description = "Townhouse",
                            EndDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Historic District",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 4,
                            PostalCode = "12346",
                            ProjectName = "Project Lambda",
                            StartDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateK",
                            Status = "Completed",
                            TotalArea = 200.0m
                        },
                        new
                        {
                            ProjectId = 12,
                            Address = "909 Poplar St",
                            Budget = 950000m,
                            City = "CityL",
                            ClientId = 12,
                            ConstructionType = "Commercial",
                            Country = "CountryL",
                            Description = "Corporate office",
                            Neighborhood = "Business District",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 8,
                            PostalCode = "23457",
                            ProjectName = "Project Mu",
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateL",
                            Status = "Planning",
                            TotalArea = 400.0m
                        },
                        new
                        {
                            ProjectId = 13,
                            Address = "1010 Redwood St",
                            Budget = 700000m,
                            City = "CityM",
                            ClientId = 13,
                            ConstructionType = "Residential",
                            Country = "CountryM",
                            Description = "Condo complex",
                            Neighborhood = "Urban Area",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 6,
                            PostalCode = "34568",
                            ProjectName = "Project Nu",
                            StartDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateM",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 14,
                            Address = "1111 Fir St",
                            Budget = 1100000m,
                            City = "CityN",
                            ClientId = 14,
                            ConstructionType = "Commercial",
                            Country = "CountryN",
                            Description = "Hotel",
                            EndDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Resort Area",
                            NumberOfBathrooms = 30,
                            NumberOfRooms = 50,
                            PostalCode = "45679",
                            ProjectName = "Project Xi",
                            StartDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateN",
                            Status = "Completed",
                            TotalArea = 600.0m
                        },
                        new
                        {
                            ProjectId = 15,
                            Address = "1212 Elm St",
                            Budget = 500000m,
                            City = "CityO",
                            ClientId = 15,
                            ConstructionType = "Residential",
                            Country = "CountryO",
                            Description = "Family home",
                            Neighborhood = "Suburban",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 5,
                            PostalCode = "56780",
                            ProjectName = "Project Omicron",
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateO",
                            Status = "In Progress",
                            TotalArea = 270.0m
                        });
                });

            modelBuilder.Entity("GenericProfessionalProjects", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.GenericProfessional", null)
                        .WithMany()
                        .HasForeignKey("ProfessionalsGProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Projects", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Client", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.GenericProfessional", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Client", "Client")
                        .WithMany("GenericProfessionals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Projects", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Client", "Client")
                        .WithMany("Houses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Client", b =>
                {
                    b.Navigation("GenericProfessionals");

                    b.Navigation("Houses");
                });
#pragma warning restore 612, 618
        }
    }
}
