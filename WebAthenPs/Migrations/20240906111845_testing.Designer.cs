// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAthenPs.API.Data;

#nullable disable

namespace WebAthenPs.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240906111845_testing")]
    partial class testing
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenericProfessionalProjecty", b =>
                {
                    b.Property<int>("ProfessionalsId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsProjectId")
                        .HasColumnType("int");

                    b.HasKey("ProfessionalsId", "ProjectsProjectId");

                    b.HasIndex("ProjectsProjectId");

                    b.ToTable("GenericProfessionalProjecty");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectProfessional", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "ProfessionalId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("ProjectProfessionals");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            ProfessionalId = 1,
                            Id = 1
                        },
                        new
                        {
                            ProjectId = 1,
                            ProfessionalId = 6,
                            Id = 2
                        },
                        new
                        {
                            ProjectId = 2,
                            ProfessionalId = 2,
                            Id = 3
                        },
                        new
                        {
                            ProjectId = 2,
                            ProfessionalId = 7,
                            Id = 4
                        },
                        new
                        {
                            ProjectId = 3,
                            ProfessionalId = 3,
                            Id = 5
                        },
                        new
                        {
                            ProjectId = 3,
                            ProfessionalId = 8,
                            Id = 6
                        },
                        new
                        {
                            ProjectId = 4,
                            ProfessionalId = 4,
                            Id = 7
                        },
                        new
                        {
                            ProjectId = 4,
                            ProfessionalId = 9,
                            Id = 8
                        },
                        new
                        {
                            ProjectId = 5,
                            ProfessionalId = 5,
                            Id = 9
                        },
                        new
                        {
                            ProjectId = 5,
                            ProfessionalId = 10,
                            Id = 10
                        },
                        new
                        {
                            ProjectId = 6,
                            ProfessionalId = 11,
                            Id = 11
                        },
                        new
                        {
                            ProjectId = 6,
                            ProfessionalId = 12,
                            Id = 12
                        },
                        new
                        {
                            ProjectId = 7,
                            ProfessionalId = 13,
                            Id = 13
                        },
                        new
                        {
                            ProjectId = 7,
                            ProfessionalId = 14,
                            Id = 14
                        },
                        new
                        {
                            ProjectId = 8,
                            ProfessionalId = 15,
                            Id = 15
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            Address = "Rua A, 123",
                            CPF = "12345678901",
                            City = "São Paulo",
                            ConcurrencyStamp = "eedbf4c7-7c4b-40a3-8ea3-da173cb980ee",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8435),
                            Email = "carlos.silva@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "01000-000",
                            RG = "1234567",
                            SecurityStamp = "cf98c3e3-4fb4-4365-9c2c-e0eff0d792d6",
                            State = "SP",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8437),
                            UserName = "Carlos Silva",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            Address = "Rua B, 456",
                            CPF = "23456789012",
                            City = "Rio de Janeiro",
                            ConcurrencyStamp = "5df9de99-1ae5-4191-ba5a-a62aa0a6663e",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8559),
                            Email = "ana.souza@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "20000-000",
                            RG = "2345678",
                            SecurityStamp = "785ea47c-9b80-4d16-8a3e-ace29ddef449",
                            State = "RJ",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8560),
                            UserName = "Ana Souza",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            Address = "Rua C, 789",
                            CPF = "34567890123",
                            City = "Belo Horizonte",
                            ConcurrencyStamp = "f000567a-b07f-4d81-bc10-c498960bd91f",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8572),
                            Email = "joao.oliveira@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "30000-000",
                            RG = "3456789",
                            SecurityStamp = "631f7d89-fdf9-4933-96f6-513f30afd6aa",
                            State = "MG",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8572),
                            UserName = "João Oliveira",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            Address = "Rua D, 101",
                            CPF = "45678901234",
                            City = "Salvador",
                            ConcurrencyStamp = "442f56b7-4a8f-4c88-8462-5ef80bac2985",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8585),
                            Email = "maria.santos@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "40000-000",
                            RG = "4567890",
                            SecurityStamp = "3615c124-bd6e-4401-a73b-3d33118f61da",
                            State = "BA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8586),
                            UserName = "Maria Santos",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user5",
                            AccessFailedCount = 0,
                            Address = "Rua E, 202",
                            CPF = "56789012345",
                            City = "Fortaleza",
                            ConcurrencyStamp = "a51505e4-2f79-489e-a63c-05d0cdee9000",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8596),
                            Email = "pedro.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "60000-000",
                            RG = "5678901",
                            SecurityStamp = "50019c16-6c93-4e6e-819b-e825452da16b",
                            State = "CE",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8597),
                            UserName = "Pedro Almeida",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user6",
                            AccessFailedCount = 0,
                            Address = "Rua F, 303",
                            CPF = "67890123456",
                            City = "Curitiba",
                            ConcurrencyStamp = "0b171638-a956-4570-8e62-4b6ff8c847f5",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8607),
                            Email = "juliana.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "80000-000",
                            RG = "6789012",
                            SecurityStamp = "cb67e37c-33a6-48ff-9a50-6d7e972e2859",
                            State = "PR",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8607),
                            UserName = "Juliana Costa",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user7",
                            AccessFailedCount = 0,
                            Address = "Rua G, 404",
                            CPF = "78901234567",
                            City = "Porto Alegre",
                            ConcurrencyStamp = "58866933-291c-4dcd-afd2-ff78d63a5167",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8619),
                            Email = "roberto.lima@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "90000-000",
                            RG = "7890123",
                            SecurityStamp = "4daafb07-abf4-4854-92eb-80240b14e654",
                            State = "RS",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8620),
                            UserName = "Roberto Lima",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user8",
                            AccessFailedCount = 0,
                            Address = "Rua H, 505",
                            CPF = "89012345678",
                            City = "Recife",
                            ConcurrencyStamp = "4c1f325b-4750-4680-ae0d-92770f8dc128",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8630),
                            Email = "patricia.martins@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "50000-000",
                            RG = "8901234",
                            SecurityStamp = "f6df03ff-ee10-49fb-a933-921a1600d0e7",
                            State = "PE",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8631),
                            UserName = "Patricia Martins",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user9",
                            AccessFailedCount = 0,
                            Address = "Rua I, 606",
                            CPF = "90123456789",
                            City = "Belém",
                            ConcurrencyStamp = "03af7f1a-4cc3-4eb6-b477-3e25a08c3f05",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8641),
                            Email = "ricardo.fernandes@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "66000-000",
                            RG = "9012345",
                            SecurityStamp = "fb7f298c-c9fc-4e21-94a8-273ba3c55578",
                            State = "PA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8641),
                            UserName = "Ricardo Fernandes",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user10",
                            AccessFailedCount = 0,
                            Address = "Rua J, 707",
                            CPF = "01234567890",
                            City = "Manaus",
                            ConcurrencyStamp = "228d400a-1edc-4303-9d5f-c8af9cf84f30",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8653),
                            Email = "claudia.rodrigues@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "69000-000",
                            RG = "0123456",
                            SecurityStamp = "e29d7f15-be55-494e-9640-42121c80d4bb",
                            State = "AM",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8653),
                            UserName = "Claudia Rodrigues",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user11",
                            AccessFailedCount = 0,
                            Address = "Rua K, 808",
                            CPF = "12345678901",
                            City = "São Luís",
                            ConcurrencyStamp = "77c51762-4670-40ce-a73b-f2fa6e02c628",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8664),
                            Email = "fernando.oliveira@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "65000-000",
                            RG = "1234567",
                            SecurityStamp = "a0ab9d9e-cb21-4fa1-bcc1-4bc47dac1f75",
                            State = "MA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8664),
                            UserName = "Fernando Oliveira",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user12",
                            AccessFailedCount = 0,
                            Address = "Rua L, 909",
                            CPF = "23456789012",
                            City = "São José de Ribamar",
                            ConcurrencyStamp = "0617e1aa-3329-4e52-8a44-d3fd32e4b659",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8676),
                            Email = "luciana.pereira@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "65100-000",
                            RG = "2345678",
                            SecurityStamp = "3ff7ea5e-7050-4d51-b384-17592ce6362b",
                            State = "MA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8676),
                            UserName = "Luciana Pereira",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user13",
                            AccessFailedCount = 0,
                            Address = "Rua M, 1010",
                            CPF = "34567890123",
                            City = "Teresina",
                            ConcurrencyStamp = "9a7da4e0-5272-434e-9ebd-ce276575551e",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8686),
                            Email = "eduardo.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "64000-000",
                            RG = "3456789",
                            SecurityStamp = "8c37089b-6c10-44a2-9979-34abcb31880f",
                            State = "PI",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8686),
                            UserName = "Eduardo Costa",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user14",
                            AccessFailedCount = 0,
                            Address = "Rua N, 1111",
                            CPF = "45678901234",
                            City = "Maceió",
                            ConcurrencyStamp = "6fe39da0-e549-4f82-ab55-1d47bc56e8af",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8698),
                            Email = "renata.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "57000-000",
                            RG = "4567890",
                            SecurityStamp = "81f13dee-0c98-4b1b-a0d0-207d0c772b5f",
                            State = "AL",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8698),
                            UserName = "Renata Almeida",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user15",
                            AccessFailedCount = 0,
                            Address = "Rua O, 1212",
                            CPF = "56789012345",
                            City = "João Pessoa",
                            ConcurrencyStamp = "4a9a6741-40a9-42e8-9d29-69e139d490c6",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8710),
                            Email = "carlos.eduardo@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "58000-000",
                            RG = "5678901",
                            SecurityStamp = "a0db765f-ff58-4e9c-a832-0a28498a1b2b",
                            State = "PB",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8710),
                            UserName = "Carlos Eduardo",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user16",
                            AccessFailedCount = 0,
                            Address = "Rua P, 1313",
                            CPF = "67890123456",
                            City = "São Paulo",
                            ConcurrencyStamp = "11c749fc-2198-469b-b067-f3e0385a551f",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8720),
                            Email = "lucas.oliveira@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "01001-000",
                            RG = "6789012",
                            SecurityStamp = "2ce6ded7-95ae-4229-aaf8-651f8ccbadc8",
                            State = "SP",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8721),
                            UserName = "Lucas Oliveira",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user17",
                            AccessFailedCount = 0,
                            Address = "Rua Q, 1414",
                            CPF = "78901234567",
                            City = "Rio de Janeiro",
                            ConcurrencyStamp = "89c43f8d-aad7-4482-ae59-d557c4ea1466",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8731),
                            Email = "mariana.silva@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "20001-000",
                            RG = "7890123",
                            SecurityStamp = "e83cfa46-8430-4934-9993-cd67f894ad59",
                            State = "RJ",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8731),
                            UserName = "Mariana Silva",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user18",
                            AccessFailedCount = 0,
                            Address = "Rua R, 1515",
                            CPF = "89012345678",
                            City = "Belo Horizonte",
                            ConcurrencyStamp = "af7cd112-f366-4f56-bd96-0d36f71511c4",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8764),
                            Email = "gabriel.santos@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "30001-000",
                            RG = "8901234",
                            SecurityStamp = "9c4da17f-d2bd-4401-90ec-a4fc4c520bcc",
                            State = "MG",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8764),
                            UserName = "Gabriel Santos",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user19",
                            AccessFailedCount = 0,
                            Address = "Rua S, 1616",
                            CPF = "90123456789",
                            City = "Salvador",
                            ConcurrencyStamp = "6ddf1bb0-3a9c-4c5d-b5f6-09c38409ad92",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8774),
                            Email = "juliana.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "40001-000",
                            RG = "9012345",
                            SecurityStamp = "102b9ee9-8b27-4344-b97d-7bb2548f18d5",
                            State = "BA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8775),
                            UserName = "Juliana Costa",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user20",
                            AccessFailedCount = 0,
                            Address = "Rua T, 1717",
                            CPF = "01234567890",
                            City = "Fortaleza",
                            ConcurrencyStamp = "c5f8a2cf-32d9-41aa-907b-ee7587ed7d6b",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8786),
                            Email = "roberto.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "60001-000",
                            RG = "0123456",
                            SecurityStamp = "cefb2062-754e-4bf6-9598-47f44acc7de6",
                            State = "CE",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8786),
                            UserName = "Roberto Almeida",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user21",
                            AccessFailedCount = 0,
                            Address = "Rua U, 1818",
                            CPF = "12345678901",
                            City = "Curitiba",
                            ConcurrencyStamp = "92e56dad-b240-469b-8c2d-d46882d804c7",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8797),
                            Email = "patricia.martins@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "80001-000",
                            RG = "1234567",
                            SecurityStamp = "07db14b6-4928-4335-8e88-9456f38c6f8f",
                            State = "PR",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8797),
                            UserName = "Patricia Martins",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user22",
                            AccessFailedCount = 0,
                            Address = "Rua V, 1919",
                            CPF = "23456789012",
                            City = "Porto Alegre",
                            ConcurrencyStamp = "1ec1632a-042d-4954-93bd-24789ade3466",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8808),
                            Email = "ricardo.lima@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "90001-000",
                            RG = "2345678",
                            SecurityStamp = "36e64130-74ff-4969-9876-9cfe861538c2",
                            State = "RS",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8808),
                            UserName = "Ricardo Lima",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user23",
                            AccessFailedCount = 0,
                            Address = "Rua W, 2020",
                            CPF = "34567890123",
                            City = "São Luís",
                            ConcurrencyStamp = "fbba41a8-ba0f-44b8-8695-02a24bbd7dbb",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8820),
                            Email = "claudia.souza@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "65001-000",
                            RG = "3456789",
                            SecurityStamp = "9ebc43b3-0637-452c-af5c-b023cc14f6cc",
                            State = "MA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8820),
                            UserName = "Claudia Souza",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user24",
                            AccessFailedCount = 0,
                            Address = "Rua X, 2121",
                            CPF = "45678901234",
                            City = "Teresina",
                            ConcurrencyStamp = "1ea6dfd9-93dc-477d-b886-9c41e16b6330",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8830),
                            Email = "fernando.santos@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "64001-000",
                            RG = "4567890",
                            SecurityStamp = "5467706f-dadc-448f-a0d3-29c931422514",
                            State = "PI",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8830),
                            UserName = "Fernando Santos",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user25",
                            AccessFailedCount = 0,
                            Address = "Rua Y, 2222",
                            CPF = "56789012345",
                            City = "Maceió",
                            ConcurrencyStamp = "94acba7b-4e00-4761-80ad-792564a09956",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8842),
                            Email = "juliana.lima@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "57001-000",
                            RG = "5678901",
                            SecurityStamp = "941c0cd8-b80b-4048-b38e-9f5e7b6d48c4",
                            State = "AL",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8842),
                            UserName = "Juliana Lima",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user26",
                            AccessFailedCount = 0,
                            Address = "Rua Z, 2323",
                            CPF = "67890123456",
                            City = "João Pessoa",
                            ConcurrencyStamp = "cd59d03a-a967-4687-a580-075228528ef3",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8854),
                            Email = "ricardo.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "58001-000",
                            RG = "6789012",
                            SecurityStamp = "2f4a196b-c7a1-474f-98b4-ede244cc0aa3",
                            State = "PB",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8854),
                            UserName = "Ricardo Costa",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user27",
                            AccessFailedCount = 0,
                            Address = "Rua AA, 2424",
                            CPF = "78901234567",
                            City = "São Paulo",
                            ConcurrencyStamp = "d2e875db-e8ae-4fbd-ae95-c9fafe72a32f",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8865),
                            Email = "mariana.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "01002-000",
                            RG = "7890123",
                            SecurityStamp = "5e3d9796-ebfd-423c-b523-5d156bad0257",
                            State = "SP",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8866),
                            UserName = "Mariana Almeida",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user28",
                            AccessFailedCount = 0,
                            Address = "Rua BB, 2525",
                            CPF = "89012345678",
                            City = "Rio de Janeiro",
                            ConcurrencyStamp = "4f51cc92-5b08-4089-bc5c-72690499c493",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8877),
                            Email = "gabriel.souza@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "20002-000",
                            RG = "8901234",
                            SecurityStamp = "0b20a659-eb17-4594-a7ed-132ba63f7f93",
                            State = "RJ",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8877),
                            UserName = "Gabriel Souza",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user29",
                            AccessFailedCount = 0,
                            Address = "Rua CC, 2626",
                            CPF = "90123456789",
                            City = "Belo Horizonte",
                            ConcurrencyStamp = "8cc70868-36eb-4464-a7fb-3cf364369b3f",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8888),
                            Email = "juliana.rodrigues@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "30002-000",
                            RG = "9012345",
                            SecurityStamp = "625b4372-4537-446e-885f-5f6d472e8330",
                            State = "MG",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8888),
                            UserName = "Juliana Rodrigues",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user30",
                            AccessFailedCount = 0,
                            Address = "Rua DD, 2727",
                            CPF = "01234567890",
                            City = "Salvador",
                            ConcurrencyStamp = "78ac026c-f953-406d-87e0-0483d0d0d4bf",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8898),
                            Email = "roberto.fernandes@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "40002-000",
                            RG = "0123456",
                            SecurityStamp = "f729033b-a3c4-4331-80ea-865d5ad81dbb",
                            State = "BA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 45, 252, DateTimeKind.Utc).AddTicks(8899),
                            UserName = "Roberto Fernandes",
                            UserType = "Professional"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Clients.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            UserId = "user1"
                        },
                        new
                        {
                            ClientId = 2,
                            UserId = "user2"
                        },
                        new
                        {
                            ClientId = 3,
                            UserId = "user3"
                        },
                        new
                        {
                            ClientId = 4,
                            UserId = "user4"
                        },
                        new
                        {
                            ClientId = 5,
                            UserId = "user5"
                        },
                        new
                        {
                            ClientId = 6,
                            UserId = "user6"
                        },
                        new
                        {
                            ClientId = 7,
                            UserId = "user7"
                        },
                        new
                        {
                            ClientId = 8,
                            UserId = "user8"
                        },
                        new
                        {
                            ClientId = 9,
                            UserId = "user9"
                        },
                        new
                        {
                            ClientId = 10,
                            UserId = "user10"
                        },
                        new
                        {
                            ClientId = 11,
                            UserId = "user11"
                        },
                        new
                        {
                            ClientId = 12,
                            UserId = "user12"
                        },
                        new
                        {
                            ClientId = 13,
                            UserId = "user13"
                        },
                        new
                        {
                            ClientId = 14,
                            UserId = "user14"
                        },
                        new
                        {
                            ClientId = 15,
                            UserId = "user15"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.GenericProfessional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ArchitectArchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionalTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArchitectArchId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("GenericProfessionals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            ProfessionalTypes = "[\"Arquiteto\"]",
                            UserId = "user16"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            ProfessionalTypes = "[\"Eletricista\"]",
                            UserId = "user17"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            ProfessionalTypes = "[\"Engenheiro\"]",
                            UserId = "user18"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 4,
                            ProfessionalTypes = "[\"Pedreiro\"]",
                            UserId = "user19"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 5,
                            ProfessionalTypes = "[\"Encanador\"]",
                            UserId = "user20"
                        },
                        new
                        {
                            Id = 6,
                            ClientId = 6,
                            ProfessionalTypes = "[\"Arquiteto\"]",
                            UserId = "user21"
                        },
                        new
                        {
                            Id = 7,
                            ClientId = 7,
                            ProfessionalTypes = "[\"Eletricista\"]",
                            UserId = "user22"
                        },
                        new
                        {
                            Id = 8,
                            ClientId = 8,
                            ProfessionalTypes = "[\"Engenheiro\"]",
                            UserId = "user23"
                        },
                        new
                        {
                            Id = 9,
                            ClientId = 9,
                            ProfessionalTypes = "[\"Pedreiro\"]",
                            UserId = "user24"
                        },
                        new
                        {
                            Id = 10,
                            ClientId = 10,
                            ProfessionalTypes = "[\"Encanador\"]",
                            UserId = "user25"
                        },
                        new
                        {
                            Id = 11,
                            ClientId = 11,
                            ProfessionalTypes = "[\"Eletricista\"]",
                            UserId = "user26"
                        },
                        new
                        {
                            Id = 12,
                            ClientId = 12,
                            ProfessionalTypes = "[\"Arquiteto\"]",
                            UserId = "user27"
                        },
                        new
                        {
                            Id = 13,
                            ClientId = 13,
                            ProfessionalTypes = "[\"Engenheiro\"]",
                            UserId = "user28"
                        },
                        new
                        {
                            Id = 14,
                            ClientId = 14,
                            ProfessionalTypes = "[\"Pedreiro\"]",
                            UserId = "user29"
                        },
                        new
                        {
                            Id = 15,
                            ClientId = 15,
                            ProfessionalTypes = "[\"Encanador\"]",
                            UserId = "user30"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Architect", b =>
                {
                    b.Property<Guid>("ArchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Especialidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistroConselho")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("genericId")
                        .HasColumnType("int");

                    b.HasKey("ArchId");

                    b.HasIndex("genericId")
                        .IsUnique();

                    b.ToTable("Architects");

                    b.HasData(
                        new
                        {
                            ArchId = new Guid("d91ae646-2fc2-48b2-b081-b55cf5f5006b"),
                            Especialidade = "Residencial",
                            RegistroConselho = "123456",
                            genericId = 1
                        },
                        new
                        {
                            ArchId = new Guid("df50d053-3a5a-4706-80eb-24d0529c1747"),
                            Especialidade = "Comercial",
                            RegistroConselho = "654321",
                            genericId = 6
                        },
                        new
                        {
                            ArchId = new Guid("bddff76b-320d-415e-bca3-869a68b28f7a"),
                            Especialidade = "Industrial",
                            RegistroConselho = "112233",
                            genericId = 12
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Project.Projecty", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("ActStep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ConstructionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalArea")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            ActStep = "Phase 1",
                            Address = "123 Main St",
                            Budget = 500000m,
                            City = "CityA",
                            ClientId = 1,
                            ConstructionType = "Residential",
                            Country = "CountryA",
                            Description = "Residential building item",
                            Neighborhood = "Downtown",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 4,
                            PostalCode = "12345",
                            ProjectName = "Project Alpha",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateA",
                            Status = "In Progress",
                            TotalArea = 250.5m
                        },
                        new
                        {
                            ProjectId = 2,
                            ActStep = "Phase 2",
                            Address = "456 Oak St",
                            Budget = 1000000m,
                            City = "CityB",
                            ClientId = 2,
                            ConstructionType = "Commercial",
                            Country = "CountryB",
                            Description = "Commercial building item",
                            EndDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Business District",
                            NumberOfBathrooms = 5,
                            NumberOfRooms = 10,
                            PostalCode = "23456",
                            ProjectName = "Project Beta",
                            StartDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateB",
                            Status = "Completed",
                            TotalArea = 500.0m
                        },
                        new
                        {
                            ProjectId = 3,
                            ActStep = "Initial Planning",
                            Address = "789 Pine St",
                            Budget = 250000m,
                            City = "CityC",
                            ClientId = 3,
                            ConstructionType = "Residential",
                            Country = "CountryC",
                            Description = "Planning phase",
                            Neighborhood = "Suburban",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 3,
                            PostalCode = "34567",
                            ProjectName = "Project Gamma",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateC",
                            Status = "Planning",
                            TotalArea = 180.0m
                        },
                        new
                        {
                            ProjectId = 4,
                            ActStep = "Construction",
                            Address = "101 Maple St",
                            Budget = 750000m,
                            City = "CityD",
                            ClientId = 4,
                            ConstructionType = "Commercial",
                            Country = "CountryD",
                            Description = "Office building item",
                            Neighborhood = "Tech Park",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 8,
                            PostalCode = "45678",
                            ProjectName = "Project Delta",
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateD",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 5,
                            ActStep = "Final Touches",
                            Address = "202 Birch St",
                            Budget = 300000m,
                            City = "CityE",
                            ClientId = 5,
                            ConstructionType = "Residential",
                            Country = "CountryE",
                            Description = "Single-family home",
                            EndDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Quiet Street",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 5,
                            PostalCode = "56789",
                            ProjectName = "Project Epsilon",
                            StartDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateE",
                            Status = "Completed",
                            TotalArea = 220.0m
                        },
                        new
                        {
                            ProjectId = 6,
                            ActStep = "Site Selection",
                            Address = "303 Cedar St",
                            Budget = 1200000m,
                            City = "CityF",
                            ClientId = 6,
                            ConstructionType = "Commercial",
                            Country = "CountryF",
                            Description = "Shopping mall",
                            Neighborhood = "Retail Hub",
                            NumberOfBathrooms = 10,
                            NumberOfRooms = 20,
                            PostalCode = "67890",
                            ProjectName = "Project Zeta",
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateF",
                            Status = "Planning",
                            TotalArea = 800.0m
                        },
                        new
                        {
                            ProjectId = 7,
                            ActStep = "Structural Work",
                            Address = "404 Fir St",
                            Budget = 600000m,
                            City = "CityG",
                            ClientId = 7,
                            ConstructionType = "Residential",
                            Country = "CountryG",
                            Description = "Luxury apartments",
                            Neighborhood = "Uptown",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 6,
                            PostalCode = "78901",
                            ProjectName = "Project Eta",
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateG",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 8,
                            ActStep = "Inspection",
                            Address = "505 Spruce St",
                            Budget = 500000m,
                            City = "CityH",
                            ClientId = 8,
                            ConstructionType = "Commercial",
                            Country = "CountryH",
                            Description = "Retail space",
                            EndDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Main Street",
                            NumberOfBathrooms = 1,
                            NumberOfRooms = 2,
                            PostalCode = "89012",
                            ProjectName = "Project Theta",
                            StartDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateH",
                            Status = "Completed",
                            TotalArea = 150.0m
                        },
                        new
                        {
                            ProjectId = 9,
                            ActStep = "Budget Approval",
                            Address = "606 Hemlock St",
                            Budget = 400000m,
                            City = "CityI",
                            ClientId = 9,
                            ConstructionType = "Residential",
                            Country = "CountryI",
                            Description = "Vacation home",
                            Neighborhood = "Lakeside",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 4,
                            PostalCode = "90123",
                            ProjectName = "Project Iota",
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateI",
                            Status = "Planning",
                            TotalArea = 300.0m
                        },
                        new
                        {
                            ProjectId = 10,
                            ActStep = "Interior Design",
                            Address = "707 Juniper St",
                            Budget = 800000m,
                            City = "CityJ",
                            ClientId = 10,
                            ConstructionType = "Commercial",
                            Country = "CountryJ",
                            Description = "Restaurant",
                            Neighborhood = "Downtown",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 5,
                            PostalCode = "01234",
                            ProjectName = "Project Kappa",
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateJ",
                            Status = "In Progress",
                            TotalArea = 250.0m
                        },
                        new
                        {
                            ProjectId = 11,
                            ActStep = "Landscaping",
                            Address = "808 Willow St",
                            Budget = 350000m,
                            City = "CityK",
                            ClientId = 11,
                            ConstructionType = "Residential",
                            Country = "CountryK",
                            Description = "Townhouse",
                            EndDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Historic District",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 4,
                            PostalCode = "12346",
                            ProjectName = "Project Lambda",
                            StartDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateK",
                            Status = "Completed",
                            TotalArea = 200.0m
                        },
                        new
                        {
                            ProjectId = 12,
                            ActStep = "Permitting",
                            Address = "909 Poplar St",
                            Budget = 950000m,
                            City = "CityL",
                            ClientId = 12,
                            ConstructionType = "Commercial",
                            Country = "CountryL",
                            Description = "Corporate office",
                            Neighborhood = "Business District",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 8,
                            PostalCode = "23457",
                            ProjectName = "Project Mu",
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateL",
                            Status = "Planning",
                            TotalArea = 400.0m
                        },
                        new
                        {
                            ProjectId = 13,
                            ActStep = "Framing",
                            Address = "1010 Redwood St",
                            Budget = 700000m,
                            City = "CityM",
                            ClientId = 13,
                            ConstructionType = "Residential",
                            Country = "CountryM",
                            Description = "Condo complex",
                            Neighborhood = "Urban Area",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 6,
                            PostalCode = "34568",
                            ProjectName = "Project Nu",
                            StartDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateM",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 14,
                            ActStep = "Final Inspection",
                            Address = "1111 Cedar St",
                            Budget = 1100000m,
                            City = "CityN",
                            ClientId = 14,
                            ConstructionType = "Commercial",
                            Country = "CountryN",
                            Description = "Tech campus",
                            EndDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Innovation Hub",
                            NumberOfBathrooms = 15,
                            NumberOfRooms = 30,
                            PostalCode = "45679",
                            ProjectName = "Project Xi",
                            StartDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateN",
                            Status = "Completed",
                            TotalArea = 1000.0m
                        },
                        new
                        {
                            ProjectId = 15,
                            ActStep = "Design Approval",
                            Address = "1212 Birch St",
                            Budget = 550000m,
                            City = "CityO",
                            ClientId = 15,
                            ConstructionType = "Residential",
                            Country = "CountryO",
                            Description = "Eco-friendly home",
                            Neighborhood = "Green Valley",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 4,
                            PostalCode = "56790",
                            ProjectName = "Project Omicron",
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateO",
                            Status = "Planning",
                            TotalArea = 275.0m
                        });
                });

            modelBuilder.Entity("GenericProfessionalProjecty", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.GenericProfessional", null)
                        .WithMany()
                        .HasForeignKey("ProfessionalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Project.Projecty", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectProfessional", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.GenericProfessional", "Professional")
                        .WithMany("ProjectProfessionals")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Project.Projecty", "Project")
                        .WithMany("ProjectProfessionals")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Clients.Client", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.GenericProfessional", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Architect", "Architect")
                        .WithMany()
                        .HasForeignKey("ArchitectArchId");

                    b.HasOne("WebAthenPs.API.Entities.Clients.Client", "Client")
                        .WithMany("GenericProfessionals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Architect");

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Architect", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.GenericProfessional", "Professional")
                        .WithOne()
                        .HasForeignKey("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Architect", "genericId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Project.Projecty", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Clients.Client", "Client")
                        .WithMany("Houses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Clients.Client", b =>
                {
                    b.Navigation("GenericProfessionals");

                    b.Navigation("Houses");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.GenericProfessional", b =>
                {
                    b.Navigation("ProjectProfessionals");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Project.Projecty", b =>
                {
                    b.Navigation("ProjectProfessionals");
                });
#pragma warning restore 612, 618
        }
    }
}
