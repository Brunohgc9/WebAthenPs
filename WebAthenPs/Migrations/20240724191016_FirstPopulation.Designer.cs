// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAthenPs.API.Data;

#nullable disable

namespace WebAthenPs.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240724191016_FirstPopulation")]
    partial class FirstPopulation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenericProfessionalProjects", b =>
                {
                    b.Property<int>("ProfessionalsGProfessionalId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsProjectId")
                        .HasColumnType("int");

                    b.HasKey("ProfessionalsGProfessionalId", "ProjectsProjectId");

                    b.HasIndex("ProjectsProjectId");

                    b.ToTable("ProjectProfessionals", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebAthenPs.API.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            Address = "123 Main St",
                            CPF = "12345678901",
                            City = "CityA",
                            ConcurrencyStamp = "b962b95e-5b45-4df9-9497-d9c2a2c6f26f",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4700),
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "12345",
                            RG = "1234567",
                            Role = "Admin",
                            SecurityStamp = "40f77553-9b85-4a1d-b2e7-63932aa3e6d1",
                            State = "StateA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4704),
                            UserName = "user1@example.com",
                            UserType = "Residential"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            Address = "456 Oak St",
                            CPF = "23456789012",
                            City = "CityB",
                            ConcurrencyStamp = "a237fe3e-e25a-4727-8d3d-df16ed775313",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4764),
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "23456",
                            RG = "2345678",
                            Role = "User",
                            SecurityStamp = "55ffb4b2-35b4-4fb5-adfc-cf2890bab6ad",
                            State = "StateB",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4765),
                            UserName = "user2@example.com",
                            UserType = "Commercial"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            Address = "789 Pine St",
                            CPF = "34567890123",
                            City = "CityC",
                            ConcurrencyStamp = "e17d4ed6-2a21-4328-923d-2e7ce0a15689",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4792),
                            Email = "user3@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "34567",
                            RG = "3456789",
                            Role = "Admin",
                            SecurityStamp = "1a818ea1-4e45-4062-a9e4-8fd9f062c670",
                            State = "StateC",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4792),
                            UserName = "user3@example.com",
                            UserType = "Residential"
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            Address = "101 Maple St",
                            CPF = "45678901234",
                            City = "CityD",
                            ConcurrencyStamp = "ffe27947-6c9b-448f-9a6e-7a71ad0151d3",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4803),
                            Email = "user4@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "45678",
                            RG = "4567890",
                            Role = "User",
                            SecurityStamp = "2f67ea83-c3ad-4562-a3e6-a7f9af0d0f15",
                            State = "StateD",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4804),
                            UserName = "user4@example.com",
                            UserType = "Commercial"
                        },
                        new
                        {
                            Id = "user5",
                            AccessFailedCount = 0,
                            Address = "202 Birch St",
                            CPF = "56789012345",
                            City = "CityE",
                            ConcurrencyStamp = "193441b7-6005-40d8-bdbd-9991aea22d18",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4842),
                            Email = "user5@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "56789",
                            RG = "5678901",
                            Role = "Admin",
                            SecurityStamp = "05c5ceaa-cc19-4b5e-aea9-ea6f5c298ab2",
                            State = "StateE",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4842),
                            UserName = "user5@example.com",
                            UserType = "Residential"
                        },
                        new
                        {
                            Id = "user6",
                            AccessFailedCount = 0,
                            Address = "303 Cedar St",
                            CPF = "67890123456",
                            City = "CityF",
                            ConcurrencyStamp = "fd31bcc7-50ee-4ba8-9f35-7be520917056",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4856),
                            Email = "user6@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "67890",
                            RG = "6789012",
                            Role = "User",
                            SecurityStamp = "606a3f3e-8f9a-46f5-907d-a5e2eac28b86",
                            State = "StateF",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4856),
                            UserName = "user6@example.com",
                            UserType = "Commercial"
                        },
                        new
                        {
                            Id = "user7",
                            AccessFailedCount = 0,
                            Address = "404 Fir St",
                            CPF = "78901234567",
                            City = "CityG",
                            ConcurrencyStamp = "4b2347b5-4379-47cb-9c62-4fa1e43c8469",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4867),
                            Email = "user7@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "78901",
                            RG = "7890123",
                            Role = "Admin",
                            SecurityStamp = "e146c8e3-2ee2-4bd9-a13c-8aec56a2dcf5",
                            State = "StateG",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4867),
                            UserName = "user7@example.com",
                            UserType = "Residential"
                        },
                        new
                        {
                            Id = "user8",
                            AccessFailedCount = 0,
                            Address = "505 Spruce St",
                            CPF = "89012345678",
                            City = "CityH",
                            ConcurrencyStamp = "d4671c68-40a6-44be-aa52-5a8006863baf",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4880),
                            Email = "user8@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "89012",
                            RG = "8901234",
                            Role = "User",
                            SecurityStamp = "df7f01ff-9df5-4aaf-9351-d998c35ccad3",
                            State = "StateH",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4880),
                            UserName = "user8@example.com",
                            UserType = "Commercial"
                        },
                        new
                        {
                            Id = "user9",
                            AccessFailedCount = 0,
                            Address = "606 Hemlock St",
                            CPF = "90123456789",
                            City = "CityI",
                            ConcurrencyStamp = "5859785f-609c-44e6-8dec-22861a0bbb6d",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4891),
                            Email = "user9@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "90123",
                            RG = "9012345",
                            Role = "Admin",
                            SecurityStamp = "cb3bc8b1-c2a1-43f4-9037-828eb67b40b3",
                            State = "StateI",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4892),
                            UserName = "user9@example.com",
                            UserType = "Residential"
                        },
                        new
                        {
                            Id = "user10",
                            AccessFailedCount = 0,
                            Address = "707 Juniper St",
                            CPF = "01234567890",
                            City = "CityJ",
                            ConcurrencyStamp = "7e5cfea2-4a57-4efc-a36e-fcfb4f0621aa",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4903),
                            Email = "user10@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "01234",
                            RG = "0123456",
                            Role = "User",
                            SecurityStamp = "578c1685-0faa-424b-9a1d-1e4c53d6c06b",
                            State = "StateJ",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4903),
                            UserName = "user10@example.com",
                            UserType = "Commercial"
                        },
                        new
                        {
                            Id = "user11",
                            AccessFailedCount = 0,
                            Address = "808 Willow St",
                            CPF = "12345678901",
                            City = "CityK",
                            ConcurrencyStamp = "104ebfe0-efd8-4c3c-98f8-391d7e18bc64",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4917),
                            Email = "user11@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "12346",
                            RG = "1234568",
                            Role = "Admin",
                            SecurityStamp = "b3bc6d76-5e7e-4395-a8f8-4860dc3cbfe4",
                            State = "StateK",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4917),
                            UserName = "user11@example.com",
                            UserType = "Residential"
                        },
                        new
                        {
                            Id = "user12",
                            AccessFailedCount = 0,
                            Address = "909 Poplar St",
                            CPF = "23456789012",
                            City = "CityL",
                            ConcurrencyStamp = "83c10283-35e3-4f36-bd2c-e7b9b6c1149e",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4928),
                            Email = "user12@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "23457",
                            RG = "2345679",
                            Role = "User",
                            SecurityStamp = "3ceef92d-3724-45aa-811e-0bdf05bca291",
                            State = "StateL",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4928),
                            UserName = "user12@example.com",
                            UserType = "Commercial"
                        },
                        new
                        {
                            Id = "user13",
                            AccessFailedCount = 0,
                            Address = "1010 Redwood St",
                            CPF = "34567890123",
                            City = "CityM",
                            ConcurrencyStamp = "54d8bf4f-ede2-44d9-aaae-3f7ede4e7ba2",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4939),
                            Email = "user13@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "34568",
                            RG = "3456790",
                            Role = "Admin",
                            SecurityStamp = "5386bab0-7e82-460e-942d-b9af0758ace8",
                            State = "StateM",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4940),
                            UserName = "user13@example.com",
                            UserType = "Residential"
                        },
                        new
                        {
                            Id = "user14",
                            AccessFailedCount = 0,
                            Address = "1111 Fir St",
                            CPF = "45678901234",
                            City = "CityN",
                            ConcurrencyStamp = "42e71ea0-83bb-45b0-b4ee-dba1b2273eea",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4952),
                            Email = "user14@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "45679",
                            RG = "4567901",
                            Role = "User",
                            SecurityStamp = "2e2fcc9f-08d1-482b-a06d-bec6c5884a45",
                            State = "StateN",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4952),
                            UserName = "user14@example.com",
                            UserType = "Commercial"
                        },
                        new
                        {
                            Id = "user15",
                            AccessFailedCount = 0,
                            Address = "1212 Elm St",
                            CPF = "56789012345",
                            City = "CityO",
                            ConcurrencyStamp = "418060db-c9b4-4875-a66f-22b552dc8f3f",
                            CreatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4963),
                            Email = "user15@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "56780",
                            RG = "5678912",
                            Role = "Admin",
                            SecurityStamp = "bd02d34d-2740-44ae-b308-3923b79e5db5",
                            State = "StateO",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 7, 24, 19, 10, 16, 56, DateTimeKind.Utc).AddTicks(4963),
                            UserName = "user15@example.com",
                            UserType = "Residential"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            UserId = "user1"
                        },
                        new
                        {
                            ClientId = 2,
                            UserId = "user2"
                        },
                        new
                        {
                            ClientId = 3,
                            UserId = "user3"
                        },
                        new
                        {
                            ClientId = 4,
                            UserId = "user4"
                        },
                        new
                        {
                            ClientId = 5,
                            UserId = "user5"
                        },
                        new
                        {
                            ClientId = 6,
                            UserId = "user6"
                        },
                        new
                        {
                            ClientId = 7,
                            UserId = "user7"
                        },
                        new
                        {
                            ClientId = 8,
                            UserId = "user8"
                        },
                        new
                        {
                            ClientId = 9,
                            UserId = "user9"
                        },
                        new
                        {
                            ClientId = 10,
                            UserId = "user10"
                        },
                        new
                        {
                            ClientId = 11,
                            UserId = "user11"
                        },
                        new
                        {
                            ClientId = 12,
                            UserId = "user12"
                        },
                        new
                        {
                            ClientId = 13,
                            UserId = "user13"
                        },
                        new
                        {
                            ClientId = 14,
                            UserId = "user14"
                        },
                        new
                        {
                            ClientId = 15,
                            UserId = "user15"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.GenericProfessional", b =>
                {
                    b.Property<int>("GProfessionalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GProfessionalId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GProfessionalId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("GenericProfessionals");

                    b.HasData(
                        new
                        {
                            GProfessionalId = 1,
                            ClientId = 1,
                            UserId = "user1"
                        },
                        new
                        {
                            GProfessionalId = 2,
                            ClientId = 2,
                            UserId = "user2"
                        },
                        new
                        {
                            GProfessionalId = 3,
                            ClientId = 3,
                            UserId = "user3"
                        },
                        new
                        {
                            GProfessionalId = 4,
                            ClientId = 4,
                            UserId = "user4"
                        },
                        new
                        {
                            GProfessionalId = 5,
                            ClientId = 5,
                            UserId = "user5"
                        },
                        new
                        {
                            GProfessionalId = 6,
                            ClientId = 6,
                            UserId = "user6"
                        },
                        new
                        {
                            GProfessionalId = 7,
                            ClientId = 7,
                            UserId = "user7"
                        },
                        new
                        {
                            GProfessionalId = 8,
                            ClientId = 8,
                            UserId = "user8"
                        },
                        new
                        {
                            GProfessionalId = 9,
                            ClientId = 9,
                            UserId = "user9"
                        },
                        new
                        {
                            GProfessionalId = 10,
                            ClientId = 10,
                            UserId = "user10"
                        },
                        new
                        {
                            GProfessionalId = 11,
                            ClientId = 11,
                            UserId = "user11"
                        },
                        new
                        {
                            GProfessionalId = 12,
                            ClientId = 12,
                            UserId = "user12"
                        },
                        new
                        {
                            GProfessionalId = 13,
                            ClientId = 13,
                            UserId = "user13"
                        },
                        new
                        {
                            GProfessionalId = 14,
                            ClientId = 14,
                            UserId = "user14"
                        },
                        new
                        {
                            GProfessionalId = 15,
                            ClientId = 15,
                            UserId = "user15"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Projects", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ConstructionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            Budget = 500000m,
                            ClientId = 1,
                            ConstructionType = "Residential",
                            Description = "Residential building item",
                            ProjectName = "Project Alpha",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "In Progress"
                        },
                        new
                        {
                            ProjectId = 2,
                            Budget = 1000000m,
                            ClientId = 2,
                            ConstructionType = "Commercial",
                            Description = "Commercial building item",
                            EndDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectName = "Project Beta",
                            StartDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            ProjectId = 3,
                            Budget = 750000m,
                            ClientId = 3,
                            ConstructionType = "Residential",
                            Description = "New residential item",
                            ProjectName = "Project Gamma",
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Planned"
                        },
                        new
                        {
                            ProjectId = 4,
                            Budget = 1200000m,
                            ClientId = 4,
                            ConstructionType = "Commercial",
                            Description = "Office building item",
                            ProjectName = "Project Delta",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "In Progress"
                        },
                        new
                        {
                            ProjectId = 5,
                            Budget = 600000m,
                            ClientId = 5,
                            ConstructionType = "Residential",
                            Description = "Luxury residential complex",
                            EndDate = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectName = "Project Epsilon",
                            StartDate = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            ProjectId = 6,
                            Budget = 950000m,
                            ClientId = 6,
                            ConstructionType = "Commercial",
                            Description = "Retail space construction",
                            ProjectName = "Project Zeta",
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "In Progress"
                        },
                        new
                        {
                            ProjectId = 7,
                            Budget = 700000m,
                            ClientId = 7,
                            ConstructionType = "Residential",
                            Description = "Apartment building",
                            ProjectName = "Project Eta",
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Planned"
                        },
                        new
                        {
                            ProjectId = 8,
                            Budget = 1300000m,
                            ClientId = 8,
                            ConstructionType = "Commercial",
                            Description = "Shopping mall",
                            EndDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectName = "Project Theta",
                            StartDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            ProjectId = 9,
                            Budget = 550000m,
                            ClientId = 9,
                            ConstructionType = "Residential",
                            Description = "Single-family home",
                            ProjectName = "Project Iota",
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "In Progress"
                        },
                        new
                        {
                            ProjectId = 10,
                            Budget = 800000m,
                            ClientId = 10,
                            ConstructionType = "Commercial",
                            Description = "Warehouse construction",
                            ProjectName = "Project Kappa",
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Planned"
                        },
                        new
                        {
                            ProjectId = 11,
                            Budget = 650000m,
                            ClientId = 11,
                            ConstructionType = "Residential",
                            Description = "Residential duplex",
                            EndDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectName = "Project Lambda",
                            StartDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            ProjectId = 12,
                            Budget = 1100000m,
                            ClientId = 12,
                            ConstructionType = "Commercial",
                            Description = "Hospital building",
                            ProjectName = "Project Mu",
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "In Progress"
                        },
                        new
                        {
                            ProjectId = 13,
                            Budget = 780000m,
                            ClientId = 13,
                            ConstructionType = "Residential",
                            Description = "Condominium",
                            ProjectName = "Project Nu",
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Planned"
                        },
                        new
                        {
                            ProjectId = 14,
                            Budget = 900000m,
                            ClientId = 14,
                            ConstructionType = "Commercial",
                            Description = "Office renovation",
                            EndDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectName = "Project Xi",
                            StartDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            ProjectId = 15,
                            Budget = 500000m,
                            ClientId = 15,
                            ConstructionType = "Residential",
                            Description = "Family home",
                            ProjectName = "Project Omicron",
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "In Progress"
                        });
                });

            modelBuilder.Entity("GenericProfessionalProjects", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.GenericProfessional", null)
                        .WithMany()
                        .HasForeignKey("ProfessionalsGProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Projects", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Client", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.GenericProfessional", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Client", "Client")
                        .WithMany("GenericProfessionals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Projects", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Client", "Client")
                        .WithMany("Houses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Client", b =>
                {
                    b.Navigation("GenericProfessionals");

                    b.Navigation("Houses");
                });
#pragma warning restore 612, 618
        }
    }
}
