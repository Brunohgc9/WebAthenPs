// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAthenPs.API.Data;

#nullable disable

namespace WebAthenPs.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240906003817_seventh")]
    partial class seventh
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenericProfessionalProjecty", b =>
                {
                    b.Property<int>("ProfessionalsId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsProjectId")
                        .HasColumnType("int");

                    b.HasKey("ProfessionalsId", "ProjectsProjectId");

                    b.HasIndex("ProjectsProjectId");

                    b.ToTable("GenericProfessionalProjecty");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebAthenPs.API.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            Address = "Rua A, 123",
                            CPF = "12345678901",
                            City = "São Paulo",
                            ConcurrencyStamp = "9f86d399-8782-4c86-af51-07b745856e1b",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9469),
                            Email = "carlos.silva@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "01000-000",
                            RG = "1234567",
                            SecurityStamp = "37f6b0cd-b7ed-4853-99a0-d1d68abe541c",
                            State = "SP",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9471),
                            UserName = "Carlos Silva",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            Address = "Rua B, 456",
                            CPF = "23456789012",
                            City = "Rio de Janeiro",
                            ConcurrencyStamp = "f7f1cfaa-3f3f-406d-a1c8-4b96e116450c",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9531),
                            Email = "ana.souza@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "20000-000",
                            RG = "2345678",
                            SecurityStamp = "26bd876a-9d31-44c6-84e8-ef58b5ef1d8f",
                            State = "RJ",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9531),
                            UserName = "Ana Souza",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            Address = "Rua C, 789",
                            CPF = "34567890123",
                            City = "Belo Horizonte",
                            ConcurrencyStamp = "6b2b7809-268d-4f4d-ade4-1bf239192a4a",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9552),
                            Email = "joao.oliveira@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "30000-000",
                            RG = "3456789",
                            SecurityStamp = "402d3446-054d-4bb6-8aaa-ed1850734282",
                            State = "MG",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9552),
                            UserName = "João Oliveira",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            Address = "Rua D, 101",
                            CPF = "45678901234",
                            City = "Salvador",
                            ConcurrencyStamp = "50062a41-bcaa-4f67-8394-1e7b7a2363a1",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9564),
                            Email = "maria.santos@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "40000-000",
                            RG = "4567890",
                            SecurityStamp = "63d0f1af-afc2-4183-9c89-26327c9079c9",
                            State = "BA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9564),
                            UserName = "Maria Santos",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user5",
                            AccessFailedCount = 0,
                            Address = "Rua E, 202",
                            CPF = "56789012345",
                            City = "Fortaleza",
                            ConcurrencyStamp = "8cf4e796-fbf9-4700-98ab-bcf0a73e2014",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9575),
                            Email = "pedro.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "60000-000",
                            RG = "5678901",
                            SecurityStamp = "0c65c176-0398-4a1d-9e25-e218fb0f6d18",
                            State = "CE",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9575),
                            UserName = "Pedro Almeida",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user6",
                            AccessFailedCount = 0,
                            Address = "Rua F, 303",
                            CPF = "67890123456",
                            City = "Curitiba",
                            ConcurrencyStamp = "f7b6422a-9bff-441e-8220-6743666542cf",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9588),
                            Email = "juliana.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "80000-000",
                            RG = "6789012",
                            SecurityStamp = "db6ea8c0-e04f-4ee8-88da-63d53964b35f",
                            State = "PR",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9588),
                            UserName = "Juliana Costa",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user7",
                            AccessFailedCount = 0,
                            Address = "Rua G, 404",
                            CPF = "78901234567",
                            City = "Porto Alegre",
                            ConcurrencyStamp = "f0d58882-0668-47fd-8b3b-d2e2f512692e",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9600),
                            Email = "roberto.lima@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "90000-000",
                            RG = "7890123",
                            SecurityStamp = "8a8cff52-d6f3-439f-853c-cc09efa7f3c7",
                            State = "RS",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9601),
                            UserName = "Roberto Lima",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user8",
                            AccessFailedCount = 0,
                            Address = "Rua H, 505",
                            CPF = "89012345678",
                            City = "Recife",
                            ConcurrencyStamp = "0e8719a3-6b0f-400f-a17f-39cea095569f",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9612),
                            Email = "patricia.martins@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "50000-000",
                            RG = "8901234",
                            SecurityStamp = "4d0da625-dff5-4a2d-bd48-5b566648f821",
                            State = "PE",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9612),
                            UserName = "Patricia Martins",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user9",
                            AccessFailedCount = 0,
                            Address = "Rua I, 606",
                            CPF = "90123456789",
                            City = "Belém",
                            ConcurrencyStamp = "1a4c0aed-4a2e-4df3-918b-58bc52785317",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9624),
                            Email = "ricardo.fernandes@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "66000-000",
                            RG = "9012345",
                            SecurityStamp = "5e29f8d4-d7cb-4d2f-b135-bf3b503bc2b8",
                            State = "PA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9625),
                            UserName = "Ricardo Fernandes",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user10",
                            AccessFailedCount = 0,
                            Address = "Rua J, 707",
                            CPF = "01234567890",
                            City = "Manaus",
                            ConcurrencyStamp = "d03e4c9a-001a-4002-80bc-ebe74d1ce3ab",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9636),
                            Email = "claudia.rodrigues@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "69000-000",
                            RG = "0123456",
                            SecurityStamp = "3a41aa1f-eae9-43a5-829c-80e5e092fc5c",
                            State = "AM",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9636),
                            UserName = "Claudia Rodrigues",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user11",
                            AccessFailedCount = 0,
                            Address = "Rua K, 808",
                            CPF = "12345678901",
                            City = "São Luís",
                            ConcurrencyStamp = "ba9471f6-b0c2-48b3-ac94-56dd1b66bed1",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9648),
                            Email = "fernando.oliveira@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "65000-000",
                            RG = "1234567",
                            SecurityStamp = "955f55cb-e3b3-47f2-a383-82449e80f8cd",
                            State = "MA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9649),
                            UserName = "Fernando Oliveira",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user12",
                            AccessFailedCount = 0,
                            Address = "Rua L, 909",
                            CPF = "23456789012",
                            City = "São José de Ribamar",
                            ConcurrencyStamp = "899226d1-433a-42b3-b4f9-3665dcdde8ca",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9684),
                            Email = "luciana.pereira@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "65100-000",
                            RG = "2345678",
                            SecurityStamp = "089815ef-9161-4d4d-9504-34f4c3466379",
                            State = "MA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9684),
                            UserName = "Luciana Pereira",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user13",
                            AccessFailedCount = 0,
                            Address = "Rua M, 1010",
                            CPF = "34567890123",
                            City = "Teresina",
                            ConcurrencyStamp = "e4955fdf-0860-470c-a665-34e18b3f06d3",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9694),
                            Email = "eduardo.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "64000-000",
                            RG = "3456789",
                            SecurityStamp = "bc17d299-649a-4af1-bc6a-8361dc7ba36a",
                            State = "PI",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9695),
                            UserName = "Eduardo Costa",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user14",
                            AccessFailedCount = 0,
                            Address = "Rua N, 1111",
                            CPF = "45678901234",
                            City = "Maceió",
                            ConcurrencyStamp = "a2ad21e8-412e-4792-a9e0-2929105f8a41",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9707),
                            Email = "renata.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "57000-000",
                            RG = "4567890",
                            SecurityStamp = "521c8cc5-258f-438d-9a5d-2738e542574e",
                            State = "AL",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9707),
                            UserName = "Renata Almeida",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user15",
                            AccessFailedCount = 0,
                            Address = "Rua O, 1212",
                            CPF = "56789012345",
                            City = "João Pessoa",
                            ConcurrencyStamp = "bc374244-3725-436d-9193-7cd0830e9091",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9719),
                            Email = "carlos.eduardo@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "58000-000",
                            RG = "5678901",
                            SecurityStamp = "dca3f4c2-2668-4ff3-9173-b0fe1e956dbe",
                            State = "PB",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9719),
                            UserName = "Carlos Eduardo",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = "user16",
                            AccessFailedCount = 0,
                            Address = "Rua P, 1313",
                            CPF = "67890123456",
                            City = "São Paulo",
                            ConcurrencyStamp = "2f39b7e7-f858-4285-9dde-4cc1a322bab4",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9730),
                            Email = "lucas.oliveira@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "01001-000",
                            RG = "6789012",
                            SecurityStamp = "9d6e57c4-1bc6-4932-a0f0-0f73f8366df4",
                            State = "SP",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9730),
                            UserName = "Lucas Oliveira",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user17",
                            AccessFailedCount = 0,
                            Address = "Rua Q, 1414",
                            CPF = "78901234567",
                            City = "Rio de Janeiro",
                            ConcurrencyStamp = "93986e57-9d24-4c67-aad5-91ec54d6aef9",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9742),
                            Email = "mariana.silva@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "20001-000",
                            RG = "7890123",
                            SecurityStamp = "be11cf5e-4b20-4dd3-95e1-de2a130ec2cd",
                            State = "RJ",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9743),
                            UserName = "Mariana Silva",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user18",
                            AccessFailedCount = 0,
                            Address = "Rua R, 1515",
                            CPF = "89012345678",
                            City = "Belo Horizonte",
                            ConcurrencyStamp = "1c47089a-5742-4b02-be6d-e0b84ebeb99d",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9754),
                            Email = "gabriel.santos@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "30001-000",
                            RG = "8901234",
                            SecurityStamp = "6acc9ba3-cf18-4548-a16b-0d21b2da8c91",
                            State = "MG",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9754),
                            UserName = "Gabriel Santos",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user19",
                            AccessFailedCount = 0,
                            Address = "Rua S, 1616",
                            CPF = "90123456789",
                            City = "Salvador",
                            ConcurrencyStamp = "66c1e57f-555b-4022-bafb-8ea5141a69db",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9766),
                            Email = "juliana.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "40001-000",
                            RG = "9012345",
                            SecurityStamp = "22f35837-5203-4d54-9a27-f6cd62d324ae",
                            State = "BA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9766),
                            UserName = "Juliana Costa",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user20",
                            AccessFailedCount = 0,
                            Address = "Rua T, 1717",
                            CPF = "01234567890",
                            City = "Fortaleza",
                            ConcurrencyStamp = "cc76763d-b96f-4913-ac55-652b6e35d034",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9777),
                            Email = "roberto.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "60001-000",
                            RG = "0123456",
                            SecurityStamp = "1f8b0ab4-4ae2-4622-9a18-89808a8f6381",
                            State = "CE",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9778),
                            UserName = "Roberto Almeida",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user21",
                            AccessFailedCount = 0,
                            Address = "Rua U, 1818",
                            CPF = "12345678901",
                            City = "Curitiba",
                            ConcurrencyStamp = "e2421e0f-f6e3-48ca-b59a-c3ea92d7f1a7",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9789),
                            Email = "patricia.martins@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "80001-000",
                            RG = "1234567",
                            SecurityStamp = "4a8ba20d-32aa-4dad-b903-8df46fa77af8",
                            State = "PR",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9789),
                            UserName = "Patricia Martins",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user22",
                            AccessFailedCount = 0,
                            Address = "Rua V, 1919",
                            CPF = "23456789012",
                            City = "Porto Alegre",
                            ConcurrencyStamp = "806fd935-82fb-454a-80f1-8d00fe58bd9a",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9802),
                            Email = "ricardo.lima@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "90001-000",
                            RG = "2345678",
                            SecurityStamp = "55ad17d6-0814-495f-b58d-f1253c5d2986",
                            State = "RS",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9802),
                            UserName = "Ricardo Lima",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user23",
                            AccessFailedCount = 0,
                            Address = "Rua W, 2020",
                            CPF = "34567890123",
                            City = "São Luís",
                            ConcurrencyStamp = "3325335f-049f-49ca-8465-76e44d558f97",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9813),
                            Email = "claudia.souza@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "65001-000",
                            RG = "3456789",
                            SecurityStamp = "59dd81c7-22f1-4a19-866e-1187c4334546",
                            State = "MA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9813),
                            UserName = "Claudia Souza",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user24",
                            AccessFailedCount = 0,
                            Address = "Rua X, 2121",
                            CPF = "45678901234",
                            City = "Teresina",
                            ConcurrencyStamp = "f214892a-d4ab-4252-b56f-f456431c1970",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9824),
                            Email = "fernando.santos@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "64001-000",
                            RG = "4567890",
                            SecurityStamp = "0c7aa67c-17eb-465a-a9e9-c23f3319c10a",
                            State = "PI",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9824),
                            UserName = "Fernando Santos",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user25",
                            AccessFailedCount = 0,
                            Address = "Rua Y, 2222",
                            CPF = "56789012345",
                            City = "Maceió",
                            ConcurrencyStamp = "14522e0a-ad0a-4bbc-9f89-923dd8d5aa1c",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9837),
                            Email = "juliana.lima@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "57001-000",
                            RG = "5678901",
                            SecurityStamp = "5d182990-2463-46c9-9de6-b16d6d67c6b6",
                            State = "AL",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9837),
                            UserName = "Juliana Lima",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user26",
                            AccessFailedCount = 0,
                            Address = "Rua Z, 2323",
                            CPF = "67890123456",
                            City = "João Pessoa",
                            ConcurrencyStamp = "6270a877-39b3-4460-ae01-f6355885b140",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9848),
                            Email = "ricardo.costa@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "58001-000",
                            RG = "6789012",
                            SecurityStamp = "50843fb2-c812-416d-9fd8-8b1fdc376a23",
                            State = "PB",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9848),
                            UserName = "Ricardo Costa",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user27",
                            AccessFailedCount = 0,
                            Address = "Rua AA, 2424",
                            CPF = "78901234567",
                            City = "São Paulo",
                            ConcurrencyStamp = "e1c8d772-c5cf-443d-bf0c-f73031277e93",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9860),
                            Email = "mariana.almeida@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "01002-000",
                            RG = "7890123",
                            SecurityStamp = "1f003e38-1722-4552-94e4-04fa394999b9",
                            State = "SP",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9861),
                            UserName = "Mariana Almeida",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user28",
                            AccessFailedCount = 0,
                            Address = "Rua BB, 2525",
                            CPF = "89012345678",
                            City = "Rio de Janeiro",
                            ConcurrencyStamp = "5865644d-466e-498f-8c13-e11a41e8cb7d",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9873),
                            Email = "gabriel.souza@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "20002-000",
                            RG = "8901234",
                            SecurityStamp = "4977ea0d-7c8f-4af8-92d2-feceeab3a798",
                            State = "RJ",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9873),
                            UserName = "Gabriel Souza",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user29",
                            AccessFailedCount = 0,
                            Address = "Rua CC, 2626",
                            CPF = "90123456789",
                            City = "Belo Horizonte",
                            ConcurrencyStamp = "d8b96bc7-8ad9-45ea-95fd-fa89b36a4aad",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9905),
                            Email = "juliana.rodrigues@example.com",
                            EmailConfirmed = false,
                            Gender = "F",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "30002-000",
                            RG = "9012345",
                            SecurityStamp = "a19368b1-b1b4-47fa-8bc1-7adc74c5688e",
                            State = "MG",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9906),
                            UserName = "Juliana Rodrigues",
                            UserType = "Professional"
                        },
                        new
                        {
                            Id = "user30",
                            AccessFailedCount = 0,
                            Address = "Rua DD, 2727",
                            CPF = "01234567890",
                            City = "Salvador",
                            ConcurrencyStamp = "2161fc21-d990-4b6c-8aee-2c1d5e6082de",
                            CreatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9919),
                            Email = "roberto.fernandes@example.com",
                            EmailConfirmed = false,
                            Gender = "M",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PostalCode = "40002-000",
                            RG = "0123456",
                            SecurityStamp = "6de0317b-1c56-4f19-86b4-3664a0d1f203",
                            State = "BA",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 0, 38, 17, 111, DateTimeKind.Utc).AddTicks(9920),
                            UserName = "Roberto Fernandes",
                            UserType = "Professional"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Clients.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            UserId = "user1"
                        },
                        new
                        {
                            ClientId = 2,
                            UserId = "user2"
                        },
                        new
                        {
                            ClientId = 3,
                            UserId = "user3"
                        },
                        new
                        {
                            ClientId = 4,
                            UserId = "user4"
                        },
                        new
                        {
                            ClientId = 5,
                            UserId = "user5"
                        },
                        new
                        {
                            ClientId = 6,
                            UserId = "user6"
                        },
                        new
                        {
                            ClientId = 7,
                            UserId = "user7"
                        },
                        new
                        {
                            ClientId = 8,
                            UserId = "user8"
                        },
                        new
                        {
                            ClientId = 9,
                            UserId = "user9"
                        },
                        new
                        {
                            ClientId = 10,
                            UserId = "user10"
                        },
                        new
                        {
                            ClientId = 11,
                            UserId = "user11"
                        },
                        new
                        {
                            ClientId = 12,
                            UserId = "user12"
                        },
                        new
                        {
                            ClientId = 13,
                            UserId = "user13"
                        },
                        new
                        {
                            ClientId = 14,
                            UserId = "user14"
                        },
                        new
                        {
                            ClientId = 15,
                            UserId = "user15"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.GenericProfessional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ArchitectArchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionalTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArchitectArchId");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("GenericProfessionals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            ProfessionalTypes = "[\"Arquiteto\"]",
                            UserId = "user16"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            ProfessionalTypes = "[\"Eletricista\"]",
                            UserId = "user17"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            ProfessionalTypes = "[\"Engenheiro\"]",
                            UserId = "user18"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 4,
                            ProfessionalTypes = "[\"Pedreiro\"]",
                            UserId = "user19"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 5,
                            ProfessionalTypes = "[\"Encanador\"]",
                            UserId = "user20"
                        },
                        new
                        {
                            Id = 6,
                            ClientId = 6,
                            ProfessionalTypes = "[\"Arquiteto\"]",
                            UserId = "user21"
                        },
                        new
                        {
                            Id = 7,
                            ClientId = 7,
                            ProfessionalTypes = "[\"Eletricista\"]",
                            UserId = "user22"
                        },
                        new
                        {
                            Id = 8,
                            ClientId = 8,
                            ProfessionalTypes = "[\"Engenheiro\"]",
                            UserId = "user23"
                        },
                        new
                        {
                            Id = 9,
                            ClientId = 9,
                            ProfessionalTypes = "[\"Pedreiro\"]",
                            UserId = "user24"
                        },
                        new
                        {
                            Id = 10,
                            ClientId = 10,
                            ProfessionalTypes = "[\"Encanador\"]",
                            UserId = "user25"
                        },
                        new
                        {
                            Id = 11,
                            ClientId = 11,
                            ProfessionalTypes = "[\"Arquiteto\"]",
                            UserId = "user26"
                        },
                        new
                        {
                            Id = 12,
                            ClientId = 12,
                            ProfessionalTypes = "[\"Eletricista\"]",
                            UserId = "user27"
                        },
                        new
                        {
                            Id = 13,
                            ClientId = 13,
                            ProfessionalTypes = "[\"Engenheiro\"]",
                            UserId = "user28"
                        },
                        new
                        {
                            Id = 14,
                            ClientId = 14,
                            ProfessionalTypes = "[\"Pedreiro\"]",
                            UserId = "user29"
                        },
                        new
                        {
                            Id = 15,
                            ClientId = 15,
                            ProfessionalTypes = "[\"Encanador\"]",
                            UserId = "user30"
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Architect", b =>
                {
                    b.Property<Guid>("ArchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Especialidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistroConselho")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("genericId")
                        .HasColumnType("int");

                    b.HasKey("ArchId");

                    b.HasIndex("genericId")
                        .IsUnique();

                    b.ToTable("Architects");

                    b.HasData(
                        new
                        {
                            ArchId = new Guid("8f4a137b-097a-450b-b48d-ebb4fb827ae4"),
                            Especialidade = "Residencial",
                            RegistroConselho = "123456",
                            genericId = 1
                        },
                        new
                        {
                            ArchId = new Guid("334b7cd1-71db-4291-8540-cc3ea52a774d"),
                            Especialidade = "Comercial",
                            RegistroConselho = "654321",
                            genericId = 6
                        },
                        new
                        {
                            ArchId = new Guid("5630df84-37d6-4ff7-93ac-2a7495599da8"),
                            Especialidade = "Industrial",
                            RegistroConselho = "112233",
                            genericId = 11
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Project.ProjectConnection", b =>
                {
                    b.Property<Guid>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("GenericProfessionalId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfessionalId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("ConnectionId");

                    b.HasIndex("ClientId");

                    b.HasIndex("GenericProfessionalId");

                    b.HasIndex("ProfessionalId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectConnections");

                    b.HasData(
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ClientId = 1,
                            ProfessionalId = 1,
                            ProjectId = 1
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ClientId = 1,
                            ProfessionalId = 2,
                            ProjectId = 1
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000003"),
                            ClientId = 2,
                            ProfessionalId = 3,
                            ProjectId = 2
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000004"),
                            ClientId = 2,
                            ProfessionalId = 4,
                            ProjectId = 2
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000005"),
                            ClientId = 3,
                            ProfessionalId = 5,
                            ProjectId = 3
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000006"),
                            ClientId = 3,
                            ProfessionalId = 6,
                            ProjectId = 3
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000007"),
                            ClientId = 4,
                            ProfessionalId = 7,
                            ProjectId = 4
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ClientId = 4,
                            ProfessionalId = 8,
                            ProjectId = 4
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000009"),
                            ClientId = 5,
                            ProfessionalId = 9,
                            ProjectId = 5
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000010"),
                            ClientId = 5,
                            ProfessionalId = 10,
                            ProjectId = 5
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000011"),
                            ClientId = 6,
                            ProfessionalId = 11,
                            ProjectId = 6
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000012"),
                            ClientId = 6,
                            ProfessionalId = 12,
                            ProjectId = 6
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000013"),
                            ClientId = 7,
                            ProfessionalId = 13,
                            ProjectId = 7
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000014"),
                            ClientId = 7,
                            ProfessionalId = 14,
                            ProjectId = 7
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000015"),
                            ClientId = 8,
                            ProfessionalId = 15,
                            ProjectId = 8
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000016"),
                            ClientId = 8,
                            ProfessionalId = 1,
                            ProjectId = 8
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000017"),
                            ClientId = 9,
                            ProfessionalId = 2,
                            ProjectId = 9
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000018"),
                            ClientId = 9,
                            ProfessionalId = 3,
                            ProjectId = 9
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000019"),
                            ClientId = 10,
                            ProfessionalId = 4,
                            ProjectId = 10
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000020"),
                            ClientId = 10,
                            ProfessionalId = 5,
                            ProjectId = 10
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000021"),
                            ClientId = 11,
                            ProfessionalId = 6,
                            ProjectId = 11
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000022"),
                            ClientId = 11,
                            ProfessionalId = 7,
                            ProjectId = 11
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000023"),
                            ClientId = 12,
                            ProfessionalId = 8,
                            ProjectId = 12
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000024"),
                            ClientId = 12,
                            ProfessionalId = 9,
                            ProjectId = 12
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000025"),
                            ClientId = 13,
                            ProfessionalId = 10,
                            ProjectId = 13
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000026"),
                            ClientId = 13,
                            ProfessionalId = 11,
                            ProjectId = 13
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000027"),
                            ClientId = 14,
                            ProfessionalId = 12,
                            ProjectId = 14
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000028"),
                            ClientId = 14,
                            ProfessionalId = 13,
                            ProjectId = 14
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000029"),
                            ClientId = 15,
                            ProfessionalId = 14,
                            ProjectId = 15
                        },
                        new
                        {
                            ConnectionId = new Guid("00000000-0000-0000-0000-000000000030"),
                            ClientId = 15,
                            ProfessionalId = 15,
                            ProjectId = 15
                        });
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Project.Projecty", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("ActStep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ConstructionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectConnectionConnectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalArea")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProjectConnectionConnectionId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            ActStep = "Phase 1",
                            Address = "123 Main St",
                            Budget = 500000m,
                            City = "CityA",
                            ClientId = 1,
                            ConstructionType = "Residential",
                            Country = "CountryA",
                            Description = "Residential building item",
                            Neighborhood = "Downtown",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 4,
                            PostalCode = "12345",
                            ProjectName = "Project Alpha",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateA",
                            Status = "In Progress",
                            TotalArea = 250.5m
                        },
                        new
                        {
                            ProjectId = 2,
                            ActStep = "Phase 2",
                            Address = "456 Oak St",
                            Budget = 1000000m,
                            City = "CityB",
                            ClientId = 2,
                            ConstructionType = "Commercial",
                            Country = "CountryB",
                            Description = "Commercial building item",
                            EndDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Business District",
                            NumberOfBathrooms = 5,
                            NumberOfRooms = 10,
                            PostalCode = "23456",
                            ProjectName = "Project Beta",
                            StartDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateB",
                            Status = "Completed",
                            TotalArea = 500.0m
                        },
                        new
                        {
                            ProjectId = 3,
                            ActStep = "Initial Planning",
                            Address = "789 Pine St",
                            Budget = 250000m,
                            City = "CityC",
                            ClientId = 3,
                            ConstructionType = "Residential",
                            Country = "CountryC",
                            Description = "Planning phase",
                            Neighborhood = "Suburban",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 3,
                            PostalCode = "34567",
                            ProjectName = "Project Gamma",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateC",
                            Status = "Planning",
                            TotalArea = 180.0m
                        },
                        new
                        {
                            ProjectId = 4,
                            ActStep = "Construction",
                            Address = "101 Maple St",
                            Budget = 750000m,
                            City = "CityD",
                            ClientId = 4,
                            ConstructionType = "Commercial",
                            Country = "CountryD",
                            Description = "Office building item",
                            Neighborhood = "Tech Park",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 8,
                            PostalCode = "45678",
                            ProjectName = "Project Delta",
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateD",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 5,
                            ActStep = "Final Touches",
                            Address = "202 Birch St",
                            Budget = 300000m,
                            City = "CityE",
                            ClientId = 5,
                            ConstructionType = "Residential",
                            Country = "CountryE",
                            Description = "Single-family home",
                            EndDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Quiet Street",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 5,
                            PostalCode = "56789",
                            ProjectName = "Project Epsilon",
                            StartDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateE",
                            Status = "Completed",
                            TotalArea = 220.0m
                        },
                        new
                        {
                            ProjectId = 6,
                            ActStep = "Site Selection",
                            Address = "303 Cedar St",
                            Budget = 1200000m,
                            City = "CityF",
                            ClientId = 6,
                            ConstructionType = "Commercial",
                            Country = "CountryF",
                            Description = "Shopping mall",
                            Neighborhood = "Retail Hub",
                            NumberOfBathrooms = 10,
                            NumberOfRooms = 20,
                            PostalCode = "67890",
                            ProjectName = "Project Zeta",
                            StartDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateF",
                            Status = "Planning",
                            TotalArea = 800.0m
                        },
                        new
                        {
                            ProjectId = 7,
                            ActStep = "Structural Work",
                            Address = "404 Fir St",
                            Budget = 600000m,
                            City = "CityG",
                            ClientId = 7,
                            ConstructionType = "Residential",
                            Country = "CountryG",
                            Description = "Luxury apartments",
                            Neighborhood = "Uptown",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 6,
                            PostalCode = "78901",
                            ProjectName = "Project Eta",
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateG",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 8,
                            ActStep = "Inspection",
                            Address = "505 Spruce St",
                            Budget = 500000m,
                            City = "CityH",
                            ClientId = 8,
                            ConstructionType = "Commercial",
                            Country = "CountryH",
                            Description = "Retail space",
                            EndDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Main Street",
                            NumberOfBathrooms = 1,
                            NumberOfRooms = 2,
                            PostalCode = "89012",
                            ProjectName = "Project Theta",
                            StartDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateH",
                            Status = "Completed",
                            TotalArea = 150.0m
                        },
                        new
                        {
                            ProjectId = 9,
                            ActStep = "Budget Approval",
                            Address = "606 Hemlock St",
                            Budget = 400000m,
                            City = "CityI",
                            ClientId = 9,
                            ConstructionType = "Residential",
                            Country = "CountryI",
                            Description = "Vacation home",
                            Neighborhood = "Lakeside",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 4,
                            PostalCode = "90123",
                            ProjectName = "Project Iota",
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateI",
                            Status = "Planning",
                            TotalArea = 300.0m
                        },
                        new
                        {
                            ProjectId = 10,
                            ActStep = "Interior Design",
                            Address = "707 Juniper St",
                            Budget = 800000m,
                            City = "CityJ",
                            ClientId = 10,
                            ConstructionType = "Commercial",
                            Country = "CountryJ",
                            Description = "Restaurant",
                            Neighborhood = "Downtown",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 5,
                            PostalCode = "01234",
                            ProjectName = "Project Kappa",
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateJ",
                            Status = "In Progress",
                            TotalArea = 250.0m
                        },
                        new
                        {
                            ProjectId = 11,
                            ActStep = "Landscaping",
                            Address = "808 Willow St",
                            Budget = 350000m,
                            City = "CityK",
                            ClientId = 11,
                            ConstructionType = "Residential",
                            Country = "CountryK",
                            Description = "Townhouse",
                            EndDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Historic District",
                            NumberOfBathrooms = 2,
                            NumberOfRooms = 4,
                            PostalCode = "12346",
                            ProjectName = "Project Lambda",
                            StartDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateK",
                            Status = "Completed",
                            TotalArea = 200.0m
                        },
                        new
                        {
                            ProjectId = 12,
                            ActStep = "Permitting",
                            Address = "909 Poplar St",
                            Budget = 950000m,
                            City = "CityL",
                            ClientId = 12,
                            ConstructionType = "Commercial",
                            Country = "CountryL",
                            Description = "Corporate office",
                            Neighborhood = "Business District",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 8,
                            PostalCode = "23457",
                            ProjectName = "Project Mu",
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateL",
                            Status = "Planning",
                            TotalArea = 400.0m
                        },
                        new
                        {
                            ProjectId = 13,
                            ActStep = "Framing",
                            Address = "1010 Redwood St",
                            Budget = 700000m,
                            City = "CityM",
                            ClientId = 13,
                            ConstructionType = "Residential",
                            Country = "CountryM",
                            Description = "Condo complex",
                            Neighborhood = "Urban Area",
                            NumberOfBathrooms = 4,
                            NumberOfRooms = 6,
                            PostalCode = "34568",
                            ProjectName = "Project Nu",
                            StartDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateM",
                            Status = "In Progress",
                            TotalArea = 350.0m
                        },
                        new
                        {
                            ProjectId = 14,
                            ActStep = "Final Inspection",
                            Address = "1111 Cedar St",
                            Budget = 1100000m,
                            City = "CityN",
                            ClientId = 14,
                            ConstructionType = "Commercial",
                            Country = "CountryN",
                            Description = "Tech campus",
                            EndDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighborhood = "Innovation Hub",
                            NumberOfBathrooms = 15,
                            NumberOfRooms = 30,
                            PostalCode = "45679",
                            ProjectName = "Project Xi",
                            StartDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateN",
                            Status = "Completed",
                            TotalArea = 1000.0m
                        },
                        new
                        {
                            ProjectId = 15,
                            ActStep = "Design Approval",
                            Address = "1212 Birch St",
                            Budget = 550000m,
                            City = "CityO",
                            ClientId = 15,
                            ConstructionType = "Residential",
                            Country = "CountryO",
                            Description = "Eco-friendly home",
                            Neighborhood = "Green Valley",
                            NumberOfBathrooms = 3,
                            NumberOfRooms = 4,
                            PostalCode = "56790",
                            ProjectName = "Project Omicron",
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "StateO",
                            Status = "Planning",
                            TotalArea = 275.0m
                        });
                });

            modelBuilder.Entity("GenericProfessionalProjecty", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.GenericProfessional", null)
                        .WithMany()
                        .HasForeignKey("ProfessionalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Project.Projecty", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Clients.Client", b =>
                {
                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.GenericProfessional", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Architect", "Architect")
                        .WithMany()
                        .HasForeignKey("ArchitectArchId");

                    b.HasOne("WebAthenPs.API.Entities.Clients.Client", "Client")
                        .WithMany("GenericProfessionals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebAthenPs.API.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Architect");

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Architect", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Professional.GenericProfessional", "Professional")
                        .WithOne()
                        .HasForeignKey("WebAthenPs.API.Entities.Professional.ProfessionalTypes.Architect", "genericId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Project.ProjectConnection", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Clients.Client", "Client")
                        .WithMany("ProjectConnections")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Professional.GenericProfessional", null)
                        .WithMany("ProjectConnections")
                        .HasForeignKey("GenericProfessionalId");

                    b.HasOne("WebAthenPs.API.Entities.Professional.GenericProfessional", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebAthenPs.API.Entities.Project.Projecty", "Projecty")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Professional");

                    b.Navigation("Projecty");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Project.Projecty", b =>
                {
                    b.HasOne("WebAthenPs.API.Entities.Clients.Client", "Client")
                        .WithMany("Houses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebAthenPs.API.Entities.Project.ProjectConnection", "ProjectConnection")
                        .WithMany()
                        .HasForeignKey("ProjectConnectionConnectionId");

                    b.Navigation("Client");

                    b.Navigation("ProjectConnection");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Clients.Client", b =>
                {
                    b.Navigation("GenericProfessionals");

                    b.Navigation("Houses");

                    b.Navigation("ProjectConnections");
                });

            modelBuilder.Entity("WebAthenPs.API.Entities.Professional.GenericProfessional", b =>
                {
                    b.Navigation("ProjectConnections");
                });
#pragma warning restore 612, 618
        }
    }
}
