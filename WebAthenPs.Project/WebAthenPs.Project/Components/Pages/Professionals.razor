@page "/professionals"
@inject IGenericProfessionalService GenericProfessionalService
@inject NavigationManager NavigationManager


<h3>Generic Professionals</h3>

<!-- Formulário para listar todos os profissionais -->
<div class="mb-4">
    <h4>List All Professionals</h4>
    <button @onclick="GetAllProfessionals">Load All Professionals</button>
</div>

<!-- Formulário para buscar profissional por ID -->
<div class="mb-4">
    <h4>Find Professional by ID</h4>
    <input type="number" @bind="professionalId" placeholder="Enter Professional ID" />
    <button @onclick="GetProfessionalById">Search</button>
</div>

<!-- Formulário para buscar profissionais por nome -->
<div class="mb-4">
    <h4>Find Professionals by Name</h4>
    <input type="text" @bind="name" placeholder="Enter Professional Name" />
    <button @onclick="GetProfessionalsByName">Search</button>
</div>

<!-- Formulário para buscar profissionais por tipo -->
<div class="mb-4">
    <h4>Find Professionals by Type</h4>
    <input type="text" @bind="professionalType" placeholder="Enter Professional Type" />
    <button @onclick="GetProfessionalsByType">Search</button>
</div>

<!-- Exibição de profissionais -->
@if (professionals != null)
{
    if (professionals.Any())
    {
        foreach (var professional in professionals)
        {
            <div class="card mb-3">
                <div class="card-header bg-primary text-white">
                    <h5>@professional.UserName</h5>
                </div>
                <div class="card-body">
                    <p>Type: @professional.ProfessionalType</p>
                    <p>Client ID: @professional.ClientId</p>

                    <!-- Exibição dos projetos relacionados -->
                    <div class="mt-3">
                        <h5>Projects</h5>
                        @if (professional.Projects != null && professional.Projects.Any())
                        {
                            <ul>
                                @foreach (var project in professional.Projects)
                                {
                                    <li>@project.ProjectName</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>No projects associated with this professional.</p>
                        }
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>No professionals found.</p>
    }
}
else if (loading)
{
    <h3>Loading...</h3>
}

@code {
    private IEnumerable<GProfessionalDTO> professionals;
    private bool loading;
    private int? professionalId;
    private string name;
    private string professionalType;

    private async Task GetAllProfessionals()
    {
        loading = true;
        professionals = await GenericProfessionalService.GetAll();
        loading = false;
    }

    private async Task GetProfessionalById()
    {
        if (professionalId.HasValue)
        {
            loading = true;
            var professional = await GenericProfessionalService.GetById(professionalId.Value);
            professionals = professional != null ? new List<GProfessionalDTO> { professional } : Enumerable.Empty<GProfessionalDTO>();
            loading = false;
        }
    }

    private async Task GetProfessionalsByName()
    {
        if (!string.IsNullOrEmpty(name))
        {
            loading = true;
            professionals = await GenericProfessionalService.GetByName(name);
            loading = false;
        }
    }

    private async Task GetProfessionalsByType()
    {
        if (!string.IsNullOrEmpty(professionalType))
        {
            loading = true;
            professionals = await GenericProfessionalService.GetByProfessionalType(professionalType);
            loading = false;
        }
    }
}
