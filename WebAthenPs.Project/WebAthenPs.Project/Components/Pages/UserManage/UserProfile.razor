@page "/user-profile"
@using WebAthenPs.Models.DTOs.User
@using WebAthenPs.Project.Services.Interfaces.User
@inject IUserService UserService
@inject IAuthService AuthService
@inject NavigationManager Navigation

<h3>Atualizar Informações do Usuário</h3>

<EditForm Model="updateUser" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="cpf">CPF</label>
        <InputText id="cpf" class="form-control" @bind-Value="updateUser.CPF" />
    </div>

    <div class="mb-3">
        <label for="rg">RG</label>
        <InputText id="rg" class="form-control" @bind-Value="updateUser.RG" />
    </div>

    <div class="mb-3">
        <label for="gender">Gênero</label>
        <InputText id="gender" class="form-control" @bind-Value="updateUser.Gender" />
    </div>

    <div class="mb-3">
        <label for="address">Endereço</label>
        <InputText id="address" class="form-control" @bind-Value="updateUser.Address" />
    </div>

    <div class="mb-3">
        <label for="city">Cidade</label>
        <InputText id="city" class="form-control" @bind-Value="updateUser.City" />
    </div>

    <div class="mb-3">
        <label for="state">Estado</label>
        <InputText id="state" class="form-control" @bind-Value="updateUser.State" />
    </div>

    <div class="mb-3">
        <label for="postalCode">Código Postal</label>
        <InputText id="postalCode" class="form-control" @bind-Value="updateUser.PostalCode" />
    </div>

    <button type="submit" class="btn btn-primary">Atualizar Informações</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteAccount">Deletar Conta</button>
</EditForm>

@if (isSubmitting)
{
    <p>Atualizando informações do usuário...</p>
}

@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

@code {
    private UpdateUserModel updateUser = new UpdateUserModel();
    private bool isSubmitting = false;
    private string message;

    protected override async Task OnInitializedAsync()
    {
        var userId = await AuthService.GetUserIdFromToken(); // Obtém o UserId usando o AuthService
        var user = await UserService.GetUserInfo(userId); // Obtém as informações do usuário do tipo ApplicationUser
        updateUser = new UpdateUserModel
            {
                CPF = user.CPF,
                RG = user.RG,
                Gender = user.Gender,
                Address = user.Address,
                City = user.City,
                State = user.State,
                PostalCode = user.PostalCode,
                UserType = user.UserType
            }; // Atribuição direta
    }


    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            var userId = await AuthService.GetUserIdFromToken(); // Obtém o UserId do AuthService
            var result = await UserService.UpdateUserInfo(userId, updateUser);
            if (result != null)
            {
                message = "Informações do usuário atualizadas com sucesso!";
                Navigation.NavigateTo("/user-profile"); // Ou outra página
            }
            else
            {
                message = "Erro ao atualizar informações do usuário. Nenhum retorno da API.";
            }
        }
        catch (Exception ex)
        {
            message = $"Erro ao atualizar informações do usuário: {ex.Message}";
        }
        isSubmitting = false;
    }

    private async Task DeleteAccount()
    {
        var userId = await AuthService.GetUserIdFromToken(); // Obtém o UserId do AuthService
        var result = await UserService.DeleteAccount(userId);
        if (result)
        {
            message = "Conta excluída com sucesso!";
            Navigation.NavigateTo("/login"); // Navegar para a página de login
        }
        else
        {
            message = "Erro ao deletar a conta.";
        }
    }
}
