@page "/login"
@using Blazored.SessionStorage
@using Blazored.LocalStorage
@using System.Text
@using WebAthenPs.Models.DTOs.User
@using WebAthenPs.Project.Services.Interfaces.User
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService
@inject ISessionStorageService SessionStorageService 
@rendermode InteractiveServer

<h1>Login</h1>

@if (ShowErrors)
{
    <DisplayMessage ErrorMessage="@Error" />
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Credenciais</h5>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mt-2">
                <label for="email">Email</label>
                <InputText Id="email" Class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div class="form-group mt-2">
                <label for="password">Senha</label>
                <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button type="submit" class="btn btn-primary mt-2">Enviar</button>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors = false;
    private string Error = string.Empty;
    private bool rememberMe = false; // Variável para armazenar o estado do checkbox

    private async Task HandleLogin()
    {
        ShowErrors = false; // Reseta o estado de erro
        try
        {
            var result = await AuthService.Login(loginModel, rememberMe); // Chama o método de login

            // Log do resultado para verificação
            Console.WriteLine($"Login Result: {result}"); // Loga o resultado inteiro

            // Agora, supondo que o result seja um objeto que contém o token e o userId
            await StoreCredentials(result.Token, result.UserId);

            // Verifique se o token é válido
            var token = await AuthService.GetToken();
            if (!string.IsNullOrEmpty(token))
            {
                Console.WriteLine("Token é válido. Redirecionando para a página inicial.");
                NavigationManager.NavigateTo("/", true); // Redirecionamento
            }
            else
            {
                Error = "Token inválido após login.";
                ShowErrors = true;
            }
        }
        catch (Exception ex)
        {
            Error = "Não foi possível fazer o Login: " + ex.Message;
            ShowErrors = true;
        }
    }


    private async Task StoreCredentials(string token, string userId)
    {
        string encryptedToken = Encrypt(token);
        string encryptedUserId = Encrypt(userId);

        await SessionStorageService.SetItemAsync("authToken", encryptedToken);
        await SessionStorageService.SetItemAsync("userId", encryptedUserId);
    }

    // Método para criptografar
    private string Encrypt(string data)
    {
        return Convert.ToBase64String(Encoding.UTF8.GetBytes(data)); // Exemplo simplificado
    }
}
