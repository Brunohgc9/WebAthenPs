@page "/professionals"
@using WebAthenPs.Models.DTOs.Professional
@using WebAthenPs.Project.Services.Interfaces.Professional
@inject IGenericProfessionalService ProfessionalService
@inject NavigationManager Navigation

@if (_isLoading)
{
    <p>Carregando...</p>
}
else
{
    <div class="filter-section">
        <input type="text" @bind="_professionalTypeFilter" placeholder="Filtrar por tipo" class="filter-input" />
        <button @onclick="FilterProfessionals" class="filter-button">Filtrar</button>
    </div>

    <div class="card-container">
        @foreach (var professional in _professionals)
        {
            <div class="card">
                <div class="card-header">
                    <h3>@professional.UserName</h3>
                </div>
                <div class="card-body">
                    <p><strong>Email:</strong> @professional.Email</p>
                    <p><strong>Telefone:</strong> @professional.PhoneNumber</p>
                    <p><strong>Tipos de Profissional:</strong> @string.Join(", ", professional.ProfessionalTypes)</p>
                </div>
                <div class="card-footer">
                    <button @onclick="() => GoToProposalPage(professional.Id)" class="btn btn-primary">Enviar Proposta</button>
                </div>
            </div>
        }
    </div>
}

@code {
    private IEnumerable<GenericProfessionalDTO> _professionals;
    private bool _isLoading = true;
    private string _professionalTypeFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfessionals();
    }

    private async Task LoadProfessionals()
    {
        try
        {
            _professionals = await ProfessionalService.GetAllAsync(_professionalTypeFilter);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar profissionais: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task FilterProfessionals()
    {
        _isLoading = true;
        await LoadProfessionals();
    }

    private void GoToProposalPage(int professionalId)
    {
        Navigation.NavigateTo($"/sendproposal/{professionalId}"); // Redireciona para a página de proposta
    }
}

<style>
    .filter-section {
        margin-bottom: 16px;
    }

    .filter-input {
        padding: 8px;
        margin-right: 8px;
        border: 1px solid #ced4da;
        border-radius: 4px;
    }

    .filter-button {
        padding: 8px 12px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .card-container {
        display: flex;
        flex-wrap: wrap;
        gap: 16px;
    }

    .card {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 16px;
        width: 300px;
    }

    .card-header {
        margin-bottom: 16px;
    }

    .card-body p {
        margin: 8px 0;
    }

    .card-footer {
        text-align: right;
    }

    .btn {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 4px;
        cursor: pointer;
    }
</style>
