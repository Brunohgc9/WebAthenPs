@page "/create-professional"
@using WebAthenPs.Models.DTOs.Professional
@using Blazored.LocalStorage
@using WebAthenPs.Project.Services
@using WebAthenPs.Models;
@using WebAthenPs.Models.DTOs;
@using WebAthenPs.Project.Services.Interfaces.Professional
@inject IGenericProfessionalService GenericProfessionalService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager

<h3>Criar Profissional</h3>

@if (ShowErrors)
{
    <p class="alert alert-danger">@Error</p>
}

<EditForm Model="@newProfessional" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mt-2">
        <label for="professionalTypes">Tipos de Profissional</label>
        <InputSelect Id="professionalTypes" Class="form-control" @bind-Value="selectedProfessionalTypes" multiple>
            @foreach (var type in allProfessionalTypes)
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => newProfessional.ProfessionalTypes)" />
    </div>

    <!-- Adicione outros campos necessários aqui -->

    <button type="submit" class="btn btn-primary mt-2">Criar</button>
</EditForm>

@if (createdProfessional != null)
{
    <h4>Profissional Criado</h4>
    <p>ID: @createdProfessional.Id</p>
    <p>UserId: @createdProfessional.UserId</p>
    <p>Tipos de Profissional: @string.Join(", ", createdProfessional.ProfessionalTypes)</p>
    <!-- Exiba outros campos conforme necessário -->
}

@code {
    private RegisterProfessionalModel newProfessional = new RegisterProfessionalModel();
    private GenericProfessionalDTO createdProfessional;
    private bool ShowErrors;
    private string Error = string.Empty;

    private List<string> allProfessionalTypes = new List<string> { "Tipo1", "Tipo2", "Tipo3" }; // Substitua com os tipos reais
    private List<string> selectedProfessionalTypes = new List<string>();

    private async Task HandleValidSubmit()
    {
        ShowErrors = false;
        try
        {
            // Obter o ID do usuário logado a partir do LocalStorage
            var userId = await LocalStorageService.GetItemAsync<string>("userId");
            if (string.IsNullOrEmpty(userId))
            {
                Error = "Usuário não autenticado.";
                ShowErrors = true;
                return;
            }

            // Atribuir os tipos selecionados ao modelo
            newProfessional.ProfessionalTypes = selectedProfessionalTypes;

            createdProfessional = await GenericProfessionalService.CreateAsync(newProfessional, userId);
            if (createdProfessional == null)
            {
                Error = "Erro ao criar profissional.";
                ShowErrors = true;
            }
        }
        catch (Exception ex)
        {
            Error = $"Erro ao criar profissional: {ex.Message}";
            ShowErrors = true;
        }
    }
}
