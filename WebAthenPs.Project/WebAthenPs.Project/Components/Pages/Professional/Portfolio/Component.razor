@page "/portfolio/{id:int}"
@using WebAthenPs.Models.DTOs.Professional
@using WebAthenPs.Models.DTOs.Project
@using WebAthenPs.Project.Services.Interfaces.Professional
@using WebAthenPs.Project.Services.Interfaces.Project
@inject IGenericProfessionalService ProfessionalService
@inject IProjectService ProjectService

@code {
    [Parameter] public int id { get; set; }

    private GenericProfessionalDTO _professional;
    private List<ProjectsDTO> _projects = new List<ProjectsDTO>();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfessionalDetails();
        await LoadProjects();
    }

    private async Task LoadProfessionalDetails()
    {
        try
        {
            _professional = await ProfessionalService.GetByIdAsync(id);

            if (_professional == null)
            {
                throw new Exception("Profissional não encontrado.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar detalhes do profissional: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadProjects()
    {
        try
        {
            if (_professional != null && _professional.ProjectProfessionals.Any())
            {
                var projectIds = _professional.ProjectProfessionals.Select(pp => pp.ProjectId).ToList();
                var projects = new List<ProjectsDTO>();

                foreach (var projectId in projectIds)
                {
                    var project = await ProjectService.GetById(projectId);
                    if (project != null)
                    {
                        projects.Add(project);
                    }
                }

                _projects = projects;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar projetos: {ex.Message}");
        }
    }
}

@if (_isLoading)
{
    <p>Carregando...</p>
}
else if (_professional == null)
{
    <p>Profissional não encontrado.</p>
}
else
{
    <div class="portfolio">
        <div class="header">
            <img src="images/profile-placeholder.png" alt="Foto do Profissional" class="profile-pic" />
            <h1>@(_professional.UserName ?? "Nome não disponível")</h1>
            <p class="contact-info">
                <strong>Email:</strong> @(_professional.Email ?? "Email não disponível")<br />
                <strong>Telefone:</strong> @(_professional.PhoneNumber ?? "Telefone não disponível")
            </p>
        </div>

        <div class="about">
            <h2>Sobre</h2>
            <p>@(@* _professional.Bio ??  *@"Informações adicionais não disponíveis.")</p>
        </div>

        <div class="skills">
            <h2>Áreas de Atuação</h2>
            <ul>
                @foreach (var type in _professional.ProfessionalTypes)
                {
                    <li>@type</li>
                }
            </ul>
        </div>

        @if (_professional.ProfessionalTypes.Contains("Arquiteto") && _professional.GeneralArchitect != null)
        {
            <div class="architect-info">
                <h2>Detalhes do Arquiteto</h2>
                <p><strong>Nome:</strong> @(_professional.GeneralArchitect.name ?? "Nome não disponível")</p>
                <p><strong>Email:</strong> @(_professional.GeneralArchitect.email ?? "Email não disponível")</p>
                <p><strong>Registro no Conselho:</strong> @(_professional.GeneralArchitect.RegistroConselho ?? "Registro não disponível")</p>
                <p><strong>Especialidade:</strong> @(_professional.GeneralArchitect.Especialidade ?? "Especialidade não disponível")</p>
            </div>
        }

        @if (_projects.Any())
        {
            <div class="projects">
                <h2>Projetos Realizados</h2>
                <div class="project-list">
                    @foreach (var project in _projects)
                    {
                        <div class="project-card">
                            <h3>@project.ProjectName</h3>
                            <p><strong>Tipo de Construção:</strong> @project.ConstructionType</p>
                            <p><strong>Status:</strong> @project.Status</p>
                            <p><strong>Data de Início:</strong> @project.StartDate.ToShortDateString()</p>
                            <p><strong>Data de Término:</strong> @(project.EndDate.HasValue ? project.EndDate.Value.ToShortDateString() : "Não concluído")</p>
                            <p><strong>Orçamento:</strong> @project.Budget.HasValue ? $"R${project.Budget.Value:N2}" : "Não disponível"</p>
                            <p><strong>Cliente:</strong> @project.ClientName</p>
                            <p><strong>Endereço:</strong> @project.Address, @project.Neighborhood, @project.City - @project.State, @project.PostalCode, @project.Country</p>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

<style>
    .portfolio {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
        font-family: Arial, sans-serif;
    }

    .header {
        text-align: center;
    }

    .profile-pic {
        border-radius: 50%;
        width: 150px;
        height: 150px;
        object-fit: cover;
    }

    h1 {
        font-size: 2.5em;
        margin-top: 0.5em;
    }

    .contact-info {
        margin-top: 10px;
        font-size: 1.1em;
        color: #555;
    }

    .about, .skills, .projects {
        margin-top: 40px;
    }

        .about p {
            font-size: 1.2em;
            line-height: 1.6em;
        }

        .skills ul {
            list-style-type: none;
            padding-left: 0;
        }

        .skills li {
            background-color: #f1f1f1;
            display: inline-block;
            padding: 5px 15px;
            margin: 5px;
            border-radius: 15px;
        }

        .projects .project-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }

    .project-card {
        background-color: #fff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

        .project-card h3 {
            margin-top: 0;
            font-size: 1.5em;
        }

        .project-card p {
            font-size: 1em;
            margin: 0.5em 0;
        }
</style>
