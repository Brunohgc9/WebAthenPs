@page "/portfolio/{id:int}"
@using WebAthenPs.Models.DTOs.Professional
@using WebAthenPs.Models.DTOs.Project
@using WebAthenPs.Models.DTOs.Components
@using WebAthenPs.Project.Services.Interfaces.Professional
@using WebAthenPs.Project.Services.Interfaces.Project
@using WebAthenPs.Project.Services.Interfaces.Components
@using Blazored.LocalStorage
@inject IGenericProfessionalService ProfessionalService
@inject IProjectService ProjectService
@inject IPostService PostService
@inject ICommentService CommentService
@inject ILocalStorageService LocalStorage

@code {
    [Parameter] public int id { get; set; }

    private GenericProfessionalDTO _professional;
    private List<ProjectsDTO> _projects = new List<ProjectsDTO>();
    private List<PostDTO> _posts = new List<PostDTO>();
    private List<CommentDTO> _comments = new List<CommentDTO>();
    private bool _isLoading = true;
    private string _newCommentContent;
    private int _selectedPostId;
    private string _currentUserId;
    private Dictionary<int, List<CommentDTO>> _commentsByPost = new Dictionary<int, List<CommentDTO>>();


    // Ao inicializar, carrega as informações do profissional, projetos e posts.
    protected override async Task OnInitializedAsync()
    {
        await LoadUserIdFromLocalStorage();
        await LoadProfessionalDetails();
        await LoadProjects();
        await LoadPosts();
    }

    // Carrega o ID do usuário a partir do LocalStorage
    private async Task LoadUserIdFromLocalStorage()
    {
        _currentUserId = await LocalStorage.GetItemAsync<string>("userId");

        if (string.IsNullOrEmpty(_currentUserId))
        {
            Console.WriteLine("Usuário não está logado.");
        }
    }

    // Carrega os detalhes do profissional pelo ID passado na URL
    private async Task LoadProfessionalDetails()
    {
        try
        {
            _professional = await ProfessionalService.GetByIdAsync(id);

            if (_professional == null)
            {
                throw new Exception("Profissional não encontrado.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar detalhes do profissional: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    // Carrega os projetos associados ao profissional
    private async Task LoadProjects()
    {
        try
        {
            if (_professional != null && _professional.ProjectProfessionals.Any())
            {
                var projectIds = _professional.ProjectProfessionals.Select(pp => pp.ProjectId).ToList();
                var projects = new List<ProjectsDTO>();

                foreach (var projectId in projectIds)
                {
                    var project = await ProjectService.GetById(projectId);
                    if (project != null)
                    {
                        projects.Add(project);
                    }
                }

                _projects = projects;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar projetos: {ex.Message}");
        }
    }

    // Carrega os posts do profissional e os comentários associados
    // Carrega os posts do profissional e os comentários associados
    private async Task LoadPosts()
    {
        try
        {
            var userId = _professional?.UserId;
            if (!string.IsNullOrEmpty(userId))
            {
                _posts = (await PostService.GetPostsByUserIdAsync(userId)).ToList();

                // Para cada post, obtenha os comentários relacionados ao post específico
                foreach (var post in _posts)
                {
                    var postComments = await CommentService.GetByPostId(post.Id);
                    _commentsByPost[post.Id] = postComments.ToList(); // Populando o dicionário
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar posts e comentários: {ex.Message}");
        }
    }

    // Adiciona um novo comentário a um post específico
    private async Task AddCommentAsync()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(_newCommentContent) && _selectedPostId > 0 && !string.IsNullOrEmpty(_currentUserId))
            {
                var commentDto = new CommentCreateDTO
                    {
                        Content = _newCommentContent,
                        UserId = _currentUserId, // Utiliza o userId obtido do LocalStorage
                        PostId = _selectedPostId
                    };

                var createdComment = await CommentService.CreateComment(commentDto);

                if (createdComment != null)
                {
                    _comments.Add(createdComment);
                    _newCommentContent = string.Empty;
                }
            }
            else
            {
                Console.WriteLine("Conteúdo do comentário ou ID do post inválido.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao adicionar comentário: {ex.Message}");
        }
    }
}

@if (_isLoading)
{
    <p>Carregando...</p>
}
else if (_professional == null)
{
    <p>Profissional não encontrado.</p>
}
else
{
    <div class="portfolio">
        <!-- Dados do Profissional -->
        <div class="header">
            <img src="images/profile-placeholder.png" alt="Foto do Profissional" class="profile-pic" />
            <h1>@(_professional.UserName ?? "Nome não disponível")</h1>
            <p class="contact-info">
                <strong>Email:</strong> @(_professional.Email ?? "Email não disponível")<br />
                <strong>Telefone:</strong> @(_professional.PhoneNumber ?? "Telefone não disponível")
            </p>
        </div>

        <!-- Sobre o Profissional -->
        <div class="about">
            <h2>Sobre</h2>
            <p>@(@* _professional.Bio ?? *@ "Informações adicionais não disponíveis.")</p>
        </div>

        <!-- Áreas de Atuação -->
        <div class="skills">
            <h2>Áreas de Atuação</h2>
            <ul>
                @foreach (var type in _professional.ProfessionalTypes)
                {
                    <li>@type</li>
                }
            </ul>
        </div>

        <!-- Detalhes Específicos de Arquitetos -->
        @if (_professional.ProfessionalTypes.Contains("Arquiteto") && _professional.GeneralArchitect != null)
        {
            <div class="architect-info">
                <h2>Detalhes do Arquiteto</h2>
                <p><strong>Nome:</strong> @(_professional.GeneralArchitect.name ?? "Nome não disponível")</p>
                <p><strong>Email:</strong> @(_professional.GeneralArchitect.email ?? "Email não disponível")</p>
                <p><strong>Registro no Conselho:</strong> @(_professional.GeneralArchitect.RegistroConselho ?? "Registro não disponível")</p>
                <p><strong>Especialidade:</strong> @(_professional.GeneralArchitect.Especialidade ?? "Especialidade não disponível")</p>
            </div>
        }

        <!-- Listagem de Projetos -->
        @if (_projects.Any())
        {
            <div class="projects">
                <h2>Projetos Realizados</h2>
                <div class="project-list">
                    @foreach (var project in _projects)
                    {
                        <div class="project-card">
                            <h3>@project.ProjectName</h3>
                            <p><strong>Tipo de Construção:</strong> @project.ConstructionType</p>
                            <p><strong>Status:</strong> @project.Status</p>
                            <p><strong>Data de Início:</strong> @project.StartDate.ToShortDateString()</p>
                            <p><strong>Data de Término:</strong> @(project.EndDate.HasValue ? project.EndDate.Value.ToShortDateString() : "Não concluído")</p>
                            <p><strong>Orçamento:</strong> @project.Budget.HasValue ? $"R${project.Budget.Value:N2}" : "Não disponível"</p>
                            <p><strong>Cliente:</strong> @project.ClientName</p>
                            <p><strong>Endereço:</strong> @project.Address, @project.Neighborhood, @project.City - @project.State, @project.PostalCode, @project.Country</p>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Listagem de Posts -->
        <!-- Listagem de Posts -->
        @if (_posts.Any())
        {
            <div class="posts">
                <h2>Posts do Profissional</h2>
                <div class="post-list">
                    @foreach (var post in _posts)
                    {
                        <div class="post-card">
                            <p>@post.Content</p>
                            <p><strong>Data de Criação:</strong> @post.CreatedAt.ToShortDateString()</p>
                            <button @onclick="() => _selectedPostId = post.Id">Adicionar Comentário</button>
                            @if (_selectedPostId == post.Id)
                            {
                                <div class="comment-section">
                                    <textarea @bind="_newCommentContent" placeholder="Digite seu comentário..."></textarea>
                                    <button @onclick="AddCommentAsync">Enviar</button>
                                </div>
                            }
                            @if (_commentsByPost.TryGetValue(post.Id, out var comments) && comments.Any())
                            {
                                <div class="comments">
                                    @foreach (var comment in comments)
                                    {
                                        <div class="comment-card">
                                            <p>@comment.Content</p>
                                            <p><strong>Comentado em:</strong> @comment.CreatedAt.ToShortDateString()</p>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }


    </div>
}


<style>
    .portfolio {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
        font-family: Arial, sans-serif;
    }

    .header {
        text-align: center;
    }

    .profile-pic {
        border-radius: 50%;
        width: 150px;
        height: 150px;
        object-fit: cover;
    }

    h1 {
        font-size: 2.5em;
        margin-top: 0.5em;
    }

    .contact-info {
        margin-top: 10px;
        font-size: 1.1em;
        color: #555;
    }

    .about, .skills, .projects, .posts {
        margin-top: 40px;
    }

        .about p {
            font-size: 1.2em;
            line-height: 1.6em;
        }

        .skills ul {
            list-style-type: none;
            padding-left: 0;
        }

        .skills li {
            background-color: #f1f1f1;
            display: inline-block;
            padding: 5px 15px;
            margin: 5px;
            border-radius: 15px;
        }

        .projects .project-list, .posts .post-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }

    .project-card, .post-card {
        background-color: #fff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

        .project-card h3, .post-card h3 {
            margin-top: 0;
            font-size: 1.5em;
        }

        .project-card p, .post-card p {
            font-size: 1em;
            margin: 0.5em 0;
        }

    .comments {
        margin-top: 10px;
        padding: 10px;
        border-top: 1px solid #e0e0e0;
    }

    .comment-card {
        background-color: #f9f9f9;
        border-radius: 8px;
        padding: 10px;
        margin-bottom: 10px;
        box-shadow: 0 1px 5px rgba(0, 0, 0, 0.1);
    }

        .comment-card p {
            margin: 0;
        }

</style> 