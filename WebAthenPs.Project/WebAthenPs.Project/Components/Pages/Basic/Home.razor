@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using WebAthenPs.Models.DTOs.Project
@using WebAthenPs.Project.Services.Authentication
@using WebAthenPs.Project.Services.Interfaces.Project
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer


<PageTitle>Home</PageTitle>

@if (isUserLoggedIn)
{
    <h1>Olá, @userName! (ID: @userId)</h1>

    @if (projects != null && projects.Any())
    {
        <h2>Seus Projetos</h2>
        <div class="card-container">
            @foreach (var project in projects)
            {
                <div class="card">
                    <h3>@project.ProjectName</h3>
                    <p>Status: @project.Status</p>
                    <p>Orçamento: @project.Budget.ToString()</p>
                    <button @onclick="() => EditProject(project.ProjectId)">Editar</button>
                </div>
            }
        </div>
    }
    else
    {
        <p>Não existem projetos para você.</p>
    }
}
else
{
    <h1>Bem-vindo ao nosso site!</h1>
    <p>Por favor, faça login para ver seus projetos.</p>
}

@code {
    private bool isUserLoggedIn;
    private string userId;
    private string userName;
    private List<ProjectsDTO> projects;

    protected override async Task OnInitializedAsync()
    {
        var authState = await ((APIAuthenticationStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        var user = authState.User;

        isUserLoggedIn = user.Identity.IsAuthenticated;

        if (isUserLoggedIn)
        {
            // Obtém o ID do usuário
            userId = user.FindFirst(c => c.Type == "sub")?.Value; // ID do usuário está na claim "sub"

            // Tente obter o nome do usuário de diferentes claims possíveis
            userName = user.FindFirst(c => c.Type == "name")?.Value ??
                       user.FindFirst(c => c.Type == "unique_name")?.Value ??
                       user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;

            if (string.IsNullOrEmpty(userName))
            {
                userName = "Usuário Desconhecido"; // Fallback se o nome não for encontrado
            }

            try
            {
                // Busca os projetos do usuário logado
                projects = (await ProjectService.GetProjectsByLoggedInUser()).ToList();
            }
            catch (HttpRequestException)
            {
                // Lida com a exceção caso o pedido falhe
                projects = new List<ProjectsDTO>();
            }
        }
    }

    private void EditProject(int projectId)
    {
        NavigationManager.NavigateTo($"/update-project/{projectId}");
    }
}
