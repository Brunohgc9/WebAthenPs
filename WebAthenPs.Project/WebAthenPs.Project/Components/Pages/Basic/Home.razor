@page "/"
@using Blazored.LocalStorage
@using Blazored.SessionStorage
@using System.IdentityModel.Tokens.Jwt
@using WebAthenPs.Models.DTOs.Project
@using WebAthenPs.Project.Services.Implementation.Project
@using WebAthenPs.Project.Services.Interfaces.Project
@using WebAthenPs.Project.Services.Interfaces.User
@inject ILocalStorageService LocalStorageService
@inject ISessionStorageService SessionStorageService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IProjectService ProjectService

<PageTitle>Home</PageTitle>

@if (isUserLoggedIn)
{
    <h1>Olá, @userName!</h1>

    @if (projects != null && projects.Any())
    {
        <h2>Seus Projetos</h2>
        <div class="card-container">
            @foreach (var project in projects)
            {
                <div class="card">
                    <h3>@project.ProjectName</h3>
                    <p>Status: @project.Status</p>
                    <p>Orçamento: @project.Budget.ToString()</p>
                    <button @onclick="() => EditProject(project.ProjectId)">Editar</button>
                </div>
            }
        </div>
    }
    else
    {
        <p>Não existem projetos para você.</p>
    }
}
else
{
    <h1>Bem-vindo ao nosso site!</h1>
    <p>Por favor, faça login para ver seus projetos.</p>
}

@code {
    private bool isUserLoggedIn;
    private string userName;
    private List<ProjectsDTO> projects;

    protected override async Task OnInitializedAsync()
    {
        // Recupera o token através do AuthService
        string token = await AuthService.GetToken();

        Console.WriteLine($"Token: {token}"); // Log para verificar se o token está sendo recuperado

        isUserLoggedIn = !string.IsNullOrEmpty(token);

        if (isUserLoggedIn)
        {
            try
            {
                // Obtém o userId do token
                var userId = await AuthService.GetUserIdFromToken();

                // Armazena o nome do usuário a partir do local ou session storage
                userName = await LocalStorageService.GetItemAsync<string>("userName") ??
                            await SessionStorageService.GetItemAsync<string>("userName");

                // Busca os projetos do usuário logado
                projects = (await ProjectService.GetProjectsByLoggedInUser()).ToList();
            }
            catch (HttpRequestException ex)
            {
                // Lida com a exceção caso o pedido falhe
                Console.WriteLine($"Erro ao buscar dados: {ex.Message}");
                projects = new List<ProjectsDTO>(); // Garante que projects seja uma lista vazia
            }
        }

    }

    private async Task Logout()
    {
        await AuthService.Logout(); // Lógica de logout
        NavigationManager.NavigateTo("/"); // Redireciona para a página inicial após logout
        StateHasChanged(); // Atualiza a interface do usuário
    }

    private void EditProject(int projectId)
    {
        NavigationManager.NavigateTo($"/update-project/{projectId}");
    }
}
