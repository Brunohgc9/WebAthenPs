@using Microsoft.AspNetCore.Components.Forms
@using WebAthenPs.Models.DTOs.Components.Chats
@using WebAthenPs.Project.Services.Interfaces.Project
@inject SignalRConnection signalRConnection
@inject IJSRuntime js
@inject IProjectService projectService  // Serviço para obter os chats do projeto
@implements IDisposable

<div class="row">
    <div class="col-md-3 mb-4">
        <div class="card">
            <div class="card-header display-1 fs-4 text-primary">
                Chats Disponíveis
            </div>
            <div class="card-body">
                <ul class="nav nav-tabs" id="chatTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @activeTabClass(0)" @onclick="() => SetActiveTab(0)">
                            Chat Geral
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @activeTabClass(1)" @onclick="() => SetActiveTab(1)">
                            Chats Individuais
                        </button>
                    </li>
                </ul>
                <div class="tab-content mt-3">
                    <!-- Aba do Chat Geral -->
                    <div class="tab-pane fade @activeTabClass(0, "show active")">
                        @if (GeneralChat != null)
                        {
                            <div class="list-group">
                                <button class="list-group-item list-group-item-action" style="cursor: pointer" @onclick="(() => LoadChat(GeneralChat.Id, GetChatTitle(GeneralChat)))">
                                    @GetChatTitle(GeneralChat)
                                </button>
                            </div>
                        }
                        else
                        {
                            <em>Nenhum chat geral disponível</em>
                        }
                    </div>

                    <!-- Aba dos Chats Individuais -->
                    <div class="tab-pane fade @activeTabClass(1, "show active")">
                        @if (IndividualChats != null && IndividualChats.Count > 0)
                        {
                            <ul class="list-group">
                                @foreach (var chat in IndividualChats)
                                {
                                    <li class="list-group-item list-group-item-action" style="cursor: pointer" @onclick="(() => LoadChat(chat.Id, GetChatTitle(chat)))">
                                        @GetChatTitle(chat)
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <em>Nenhum chat individual disponível</em>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-9 mb-4">
        <div class="card">
            <div class="card-header display-1 fs-5 text-success">@CurrentChatTitle</div>
            <div class="card-body">
                @if (ChatMessages != null && ChatMessages.Count > 0)
                {
                    @foreach (var message in ChatMessages)
                    {
                        <div class="message">
                            @((MarkupString)message)
                        </div>
                    }
                }
                else
                {
                    <em>Nenhuma mensagem encontrada</em>
                }
            </div>
            <div class="card-footer">
                <textarea cols="5" @bind="Message" class="form-control mb-3" placeholder="Digite sua mensagem..."></textarea>

                <!-- Botão de anexar arquivo -->
                <button class="btn btn-outline-secondary mb-3" @onclick="TriggerFileInput">
                    <i class="bi bi-paperclip"></i> Anexar Arquivo
                </button>

                <!-- InputFile escondido -->
                <InputFile id="fileInput" style="display:none;" OnChange="HandleFileSelected" />

                <div class="d-flex justify-content-between">
                    <button class="btn btn-success" @onclick="SendMessage">Enviar Mensagem</button>
                    <button class="btn btn-primary" @onclick="SendFile">Enviar Arquivo</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int ProjectId { get; set; } // ID do projeto

    private string Message = string.Empty;
    private string CurrentChatTitle = string.Empty;
    private ChatDto? GeneralChat;
    private List<ChatDto> IndividualChats = new();
    private List<string> ChatMessages = new();
    private Guid CurrentChatId;

    private IBrowserFile? selectedFile; // Campo para armazenar o arquivo selecionado

    private string[] TabStates = { "general", "individual" }; // Estado das abas (Geral e Individuais)
    private int activeTabIndex = 0; // Índice da aba ativa (0 = geral, 1 = individual)

    // Método chamado ao inicializar o componente
    protected override async Task OnInitializedAsync()
    {
        // Inscreve-se para as mudanças de estado da conexão SignalR
        signalRConnection.ConnectionStateChanged += StateHasChanged;

        // Realiza a conexão com SignalR
        await Connect();

        // Carrega os chats
        await LoadChatsFromProjectService();

        // Inscreve-se para receber as mensagens de chat
        SubscribeToMessages();
    }

    // Inscrição para receber mensagens
    private void SubscribeToMessages()
    {
        signalRConnection.ReceiveMessage((userId, message) =>
        {
            ChatMessages.Add($"{userId}: {message}");
            InvokeAsync(StateHasChanged);
        });
    }

    // Método para carregar os chats gerais e individuais
    private async Task LoadChatsFromProjectService()
    {
        try
        {
            var chatId = await projectService.GetChatIdByProjectIdAsync(ProjectId);
            IndividualChats = await projectService.GetIndividualChatsByProjectIdAsync(ProjectId);

            if (chatId != Guid.Empty)
            {
                GeneralChat = new ChatDto { Id = chatId, IsGeneral = true };
            }
            else
            {
                GeneralChat = null;
                IndividualChats.Clear();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar o chat: {ex.Message}");
        }
    }

    // Método para carregar um chat específico (geral ou individual)
    private async Task LoadChat(Guid chatId, string chatTitle)
    {
        CurrentChatId = chatId;
        CurrentChatTitle = chatTitle;
        ChatMessages.Clear();

        // Carrega as mensagens do chat
        var messages = await signalRConnection.GetChatMessages(chatId);
        ChatMessages = messages.Select(m => $"{m.UserId}: {m.Message}").ToList();

        // Junta o chat
        await signalRConnection.JoinChat(chatId);
        StateHasChanged();
    }

    // Método para enviar uma mensagem no chat
    private async Task SendMessage()
    {
        if (string.IsNullOrEmpty(Message) || CurrentChatId == Guid.Empty)
            return;

        await signalRConnection.SendMessage(CurrentChatId, Message);
        ChatMessages.Add($"Eu: {Message}");
        Message = string.Empty;
        StateHasChanged();
    }
    private async Task<IFormFile> ConvertToIFormFile(IBrowserFile browserFile)
    {
        var memoryStream = new MemoryStream();
        await browserFile.OpenReadStream().CopyToAsync(memoryStream);
        memoryStream.Seek(0, SeekOrigin.Begin);

        return new FormFile(memoryStream, 0, memoryStream.Length, browserFile.Name, browserFile.Name);
    }

    // Método para enviar um arquivo
    private async Task SendFile()
    {
        if (selectedFile == null || CurrentChatId == Guid.Empty)
            return;

        // Defina o limite máximo de 5 MB
        var maxFileSize = 5 * 1024 * 1024; // 5 MB

        // Verifique se o arquivo é menor ou igual ao limite
        if (selectedFile.Size > maxFileSize)
        {
            // Exiba uma mensagem ou faça outro tratamento
            Console.WriteLine($"O arquivo excede o tamanho máximo de {maxFileSize / 1024 / 1024} MB.");
            return;
        }

        var fileName = selectedFile.Name;
        var fileBytes = new byte[selectedFile.Size];

        using (var stream = selectedFile.OpenReadStream(maxFileSize)) // Altere o limite aqui
        {
            await stream.ReadAsync(fileBytes);
        }

        // Chame o método do SignalR para enviar a mensagem e o arquivo
        await signalRConnection.SendMessageWithFile(CurrentChatId, "Arquivo enviado", fileBytes, fileName);

        ChatMessages.Add($"Eu: Arquivo {fileName} enviado.");
        StateHasChanged();
    }


    // Método chamado quando um arquivo é selecionado
    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    // Método para acionar o InputFile com JavaScript interop
    private async Task TriggerFileInput()
    {
        await js.InvokeVoidAsync("triggerFileInput", "fileInput");
    }

    // Método para estabelecer a conexão com o SignalR
    private async Task Connect()
    {
        await signalRConnection.StartConnection();
    }

    // Método que retorna o título do chat
    private string GetChatTitle(ChatDto chat)
    {
        if (chat.IsGeneral)
            return "Chat Geral";

        var userNames = chat.User?.Select(u => u.UserName).ToList();
        return userNames != null && userNames.Any()
            ? $"Chat com {string.Join(", ", userNames)}"
            : "Chat sem nome";
    }

    // Método que alterna a aba ativa
    private void SetActiveTab(int index)
    {
        activeTabIndex = index;
    }

    // Método que define a classe ativa da aba
    private string activeTabClass(int index, string additionalClasses = "")
    {
        return activeTabIndex == index ? $"active {additionalClasses}" : "";
    }

    // Método de limpeza ao destruir o componente
    public void Dispose()
    {
        signalRConnection.ConnectionStateChanged -= StateHasChanged;
        _ = signalRConnection.CloseConnection();
    }
}
