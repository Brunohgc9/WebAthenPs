@page "/projects"
@using WebAthenPs.Models.DTOs.Project
@using WebAthenPs.Models.DTOs.Project
@using WebAthenPs.Project.Services.Interfaces.Project
@inject IProjectService ProjectService

<h3>Projects</h3>

<!-- Formulário para listar todos os projetos -->
<div class="mb-4">
    <h4>Create Project</h4>
    <NavLink href="newProject">
        <button>Create Project</button>
    </NavLink>
</div>

<div class="mb-4">
    <h4>List All Projects</h4>
    <button @onclick="GetAllProjects">Load All Projects</button>
</div>

<!-- Formulário para buscar projeto por ID -->
<div class="mb-4">
    <h4>Find Project by ID</h4>
    <input type="number" @bind="projectId" placeholder="Enter Project ID" />
    <button @onclick="GetProjectById">Search</button>
</div>

<!-- Formulário para buscar projetos por status -->
<div class="mb-4">
    <h4>Find Projects by Status</h4>
    <input type="text" @bind="status" placeholder="Enter Project Status" />
    <button @onclick="GetProjectsByStatus">Search</button>
</div>

<!-- Formulário para buscar projetos por área -->
<div class="mb-4">
    <h4>Find Projects by Area</h4>
    <input type="number" @bind="area" placeholder="Enter Area in m²" />
    <button @onclick="GetProjectsByArea">Search</button>
</div>

<!-- Exibição de projetos -->
@if (projects != null)
{
    if (projects.Any())
    {
        <div class="card-container">
            @foreach (var project in projects)
            {
                <div class="card mb-3">
                    <div class="card-header bg-primary text-white">
                        <h5>@project.ProjectName</h5>
                    </div>
                    <div class="card-body">
                        <p><strong>Status:</strong> @project.Status</p>
                        <p><strong>Budget:</strong> @project.Budget</p>
                        <p><strong>Start Date:</strong> @project.StartDate.ToString("dd/MM/yyyy")</p>
                        <p><strong>Description:</strong> @project.Description</p>
                        @if (project.TotalArea != 0)
                        {
                            <p><strong>Total Area:</strong> @project.TotalArea m²</p>
                        }

                        <!-- Exibição dos profissionais relacionados -->
                        <div class="mt-3">
                            <h5>Professionals</h5>
                            @if (project.Professionals != null && project.Professionals.Any())
                            {
                                <ul>
                                    @foreach (var professional in project.Professionals)
                                    {
                                        <li>@professional.UserName - @professional.ProfessionalTypes</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No professionals associated with this project.</p>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No projects found.</p>
    }
}
else if (loading)
{
    <h3>Loading...</h3>
}

@code {
    private IEnumerable<ProjectsDTO> projects;
    private bool loading;
    private int? projectId;
    private string status;
    private decimal? area;

    private async Task GetAllProjects()
    {
        loading = true;
        projects = await ProjectService.GetAll();
        loading = false;
    }

    private async Task GetProjectById()
    {
        if (projectId.HasValue)
        {
            loading = true;
            var project = await ProjectService.GetById(projectId.Value);
            projects = project != null ? new List<ProjectsDTO> { project } : Enumerable.Empty<ProjectsDTO>();
            loading = false;
        }
    }

    private async Task GetProjectsByStatus()
    {
        if (!string.IsNullOrEmpty(status))
        {
            loading = true;
            projects = await ProjectService.GetByStatus(status);
            loading = false;
        }
    }

    private async Task GetProjectsByArea()
    {
        if (area.HasValue)
        {
            loading = true;
            projects = await ProjectService.GetByArea(area.Value);
            loading = false;
        }
    }
}

<style>
    .card-container {
        display: flex;
        flex-wrap: wrap;
        gap: 16px;
    }

    .card {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        box-shadow: 0 0 4px rgba(0, 0, 0, 0.1);
        padding: 16px;
        width: 300px;
    }

    .card-header {
        border-bottom: 1px solid #dee2e6;
        margin-bottom: 16px;
        padding-bottom: 8px;
    }

    .card-body p {
        margin: 8px 0;
    }
</style>
