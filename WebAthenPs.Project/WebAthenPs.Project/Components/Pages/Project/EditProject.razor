@page "/update-project/{ProjectId:int}"
@using WebAthenPs.Models.DTOs.Professional
@using WebAthenPs.Models.DTOs.Project
@using WebAthenPs.Project.Services.Interfaces.Professional
@using WebAthenPs.Project.Services.Interfaces.Project
@inject IProjectService ProjectService
@inject IGenericProfessionalService ProfessionalService
@inject NavigationManager NavigationManager
@inject ILogger<EditProject> Logger

@code {
    [Parameter]
    public int ProjectId { get; set; }

    private ProjectsDTO project;
    private IEnumerable<GenericProfessionalDTO> allProfessionals;
    private HashSet<int> selectedProfessionalIds = new HashSet<int>();

    protected override async Task OnInitializedAsync()
    {
        // Obter detalhes do projeto
        project = await ProjectService.GetById(ProjectId);

        // Obter todos os profissionais
        allProfessionals = await ProfessionalService.GetAllAsync(string.Empty);

        // Preencher os IDs dos profissionais selecionados
        if (project != null && project.ProjectProfessionals != null)
        {
            selectedProfessionalIds = new HashSet<int>(project.ProjectProfessionals.Select(p => p.ProfessionalId));
        }
    }

    private void ToggleProfessionalSelection(int professionalId)
    {
        if (selectedProfessionalIds.Contains(professionalId))
        {
            selectedProfessionalIds.Remove(professionalId);
        }
        else
        {
            selectedProfessionalIds.Add(professionalId);
        }
    }

    private async Task AddProfessionalsToProject()
    {
        if (project != null)
        {
            var projectProfessionals = new List<ProjectProfessionalDTO>();

            foreach (var professionalId in selectedProfessionalIds)
            {
                // Encontrar o profissional pelo ID
                var professional = allProfessionals.FirstOrDefault(p => p.Id == professionalId);

                if (professional != null)
                {
                    // Certifique-se de que o ProfessionalId está sendo corretamente preenchido com o ID do GenericProfessional
                    projectProfessionals.Add(new ProjectProfessionalDTO
                        {
                            ProfessionalId = professional.Id, // Aqui garantimos que o ID está sendo passado corretamente
                            ProjectId = project.ProjectId,
                            Professional = professional // Passando o DTO do profissional completo
                        });
                }
                else
                {
                    Logger.LogWarning($"Profissional com ID {professionalId} não encontrado.");
                }
            }

            // Associando os profissionais ao projeto
            project.ProjectProfessionals = projectProfessionals;

            // Atualizando o projeto
            var updatedProject = await ProjectService.UpdateProject(ProjectId, project);

            // Navegação para os detalhes do projeto se a atualização foi bem-sucedida
            if (updatedProject != null)
            {
                NavigationManager.NavigateTo($"/project-details/{ProjectId}");
            }
        }
    }


}

<h3>Detalhes do Projeto</h3>

@if (project != null)
{
    <h4>@project.ProjectName</h4>

    <h5>Adicionar Profissionais ao Projeto</h5>
    <ul>
        @foreach (var professional in allProfessionals)
        {
            <li>
                <input type="checkbox"
                       @onchange="(e) => ToggleProfessionalSelection(professional.Id)"
                       checked="@selectedProfessionalIds.Contains(professional.Id)" />
                @professional.UserName - @professional.Email
            </li>
        }
    </ul>

    <button @onclick="AddProfessionalsToProject">Adicionar Profissionais</button>
}
else
{
    <p>Carregando detalhes do projeto...</p>
}
