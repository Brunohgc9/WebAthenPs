@page "/viewproposal"
@using Microsoft.AspNetCore.SignalR.Client
@using WebAthenPs.Models.DTOs.Components
@using WebAthenPs.Models.DTOs.Professional
@using WebAthenPs.Models.DTOs.Client;
@using Blazored.SessionStorage
@using WebAthenPs.Project.Services.Interfaces.Components
@using WebAthenPs.Project.Services.Interfaces.Professional
@using WebAthenPs.Project.Services.Interfaces.User
@using WebAthenPs.Project.Services.Interfaces.Client;
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IHttpClientFactory HttpClientFactory
@inject IAuthService AuthService
@inject IGenericProfessionalService ProfessionalService
@inject IClientService ClientService
@inject IProposalService ProposalService
@implements IDisposable
@inject ILogger<Teste2> Logger

<h3>Ver Propostas Recebidas</h3>

@if (clientProposals != null && clientProposals.Any())
{
    <h4>Propostas para Clientes</h4>
    foreach (var proposal in clientProposals)
    {
        <div class="proposal-details border p-3 mb-3">
            <label><strong>Mensagem:</strong></label>
            <p>@proposal.ProposalMessage</p>

            <label><strong>Valor:</strong></label>
            <p>@proposal.ProposalValue.ToString("C")</p>

            <label><strong>Status:</strong></label>
            <p>@(proposal.IsAccepted ? "Aceita" : "Pendente")</p>

            @if (!proposal.IsAccepted)
            {
                <div class="actions">
                    <button class="btn btn-success" @onclick="() => AcceptProposal(proposal)">Aceitar</button>
                    <button class="btn btn-danger" @onclick="() => DeclineProposal(proposal)">Recusar</button>
                </div>
            }
            else
            {
                <div class="alert alert-info">Esta proposta já foi aceita.</div>
            }
        </div>
    }
}
else
{
    <p>Nenhuma proposta recebida para clientes.</p>
}

@if (professionalProposals != null && professionalProposals.Any())
{
    <h4>Propostas para Profissionais</h4>
    foreach (var proposal in professionalProposals)
    {
        <div class="proposal-details border p-3 mb-3">
            <label><strong>Mensagem:</strong></label>
            <p>@proposal.ProposalMessage</p>

            <label><strong>Valor:</strong></label>
            <p>@proposal.ProposalValue.ToString("C")</p>

            <label><strong>Status:</strong></label>
            <p>@(proposal.IsAccepted ? "Aceita" : "Pendente")</p>

            @if (!proposal.IsAccepted)
            {
                <div class="actions">
                    <button class="btn btn-success" @onclick="() => AcceptProposal(proposal)">Aceitar</button>
                    <button class="btn btn-danger" @onclick="() => DeclineProposal(proposal)">Recusar</button>
                </div>
            }
            else
            {
                <div class="alert alert-info">Esta proposta já foi aceita.</div>
            }
        </div>
    }
}
else
{
    <p>Nenhuma proposta recebida para profissionais.</p>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private HubConnection hubConnection;
    private List<ProposalDTO> clientProposals = new List<ProposalDTO>();
    private List<ProposalDTO> professionalProposals = new List<ProposalDTO>();
    private string errorMessage;
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        userId = await AuthService.GetUserIdFromToken();
        await InitializeConnection();
        await LoadProposals(); // Now just load proposals
    }

    private async Task InitializeConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7171/proposalHub"))
            .Build();

        try
        {
            await hubConnection.StartAsync();
            Logger.LogInformation("Conexão ao hub estabelecida com sucesso.");
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao conectar ao hub: {ex.Message}";
            Logger.LogError(ex, "Erro ao conectar ao hub.");
        }

        hubConnection.Closed += async (error) =>
        {
            Logger.LogWarning("Conexão ao hub fechada, tentando reconectar...");
            await Task.Delay(new Random().Next(0, 5000));
            await InitializeConnection();
        };
    }

    private async Task LoadProposals()
    {
        try
        {
            Logger.LogInformation("Tentando carregar propostas para UserId: {UserId}", userId);
            var professionalDto = await ProfessionalService.GetByUserId(userId);
            var clientDto = await ClientService.GetByUserId(userId); // Load the client data directly

            if (professionalDto != null)
            {
                var professionalId = professionalDto.Id;
                professionalProposals = await GetProposalsByProfessionalIdAsync(professionalId);
                Logger.LogInformation("Propostas carregadas para o profissional com ID: {ProfessionalId}", professionalId);
            }
            else
            {
                Logger.LogWarning("Usuário não é um profissional.");
            }

            if (clientDto != null)
            {
                clientProposals = await GetProposalsByClientIdAsync(clientDto.ClientId);
                Logger.LogInformation("Propostas carregadas para o cliente com ID: {ClientId}", clientDto.ClientId);
            }
            else
            {
                Logger.LogWarning("Cliente não encontrado para UserId: {UserId}", userId);
            }

            if (!clientProposals.Any() && !professionalProposals.Any())
            {
                errorMessage = "Nenhuma proposta recebida.";
                Logger.LogInformation("Nenhuma proposta recebida para UserId: {UserId}", userId);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar propostas: {ex.Message}";
            Logger.LogError(ex, "Erro ao carregar propostas para UserId: {UserId}", userId);
        }
    }

    private async Task<List<ProposalDTO>> GetProposalsByProfessionalIdAsync(int professionalId)
    {
        try
        {
            Logger.LogInformation("Carregando propostas para o profissional com ID: {ProfessionalId}", professionalId);
            var proposals = await ProposalService.GetByProfessionalIdAsync(professionalId);
            return proposals.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao carregar propostas para o profissional com ID: {ProfessionalId}", professionalId);
            return new List<ProposalDTO>();
        }
    }

    private async Task<List<ProposalDTO>> GetProposalsByClientIdAsync(int clientId)
    {
        try
        {
            Logger.LogInformation("Carregando propostas para o cliente com ID: {ClientId}", clientId);
            var proposalsResponse = await ProposalService.GetByClientIdAsync(clientId);
            return proposalsResponse.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao carregar propostas para o cliente com ID: {ClientId}", clientId);
            return new List<ProposalDTO>();
        }
    }

    private async Task AcceptProposal(ProposalDTO proposal)
    {
        try
        {
            proposal.IsAccepted = true;
            await hubConnection.InvokeAsync("UpdateProposalStatus", proposal);
            Logger.LogInformation("Proposta aceita: {@Proposal}", proposal);
            await ProposalService.UpdateAsync(proposal.ProposalId, proposal);
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao aceitar a proposta: {ex.Message}";
            Logger.LogError(ex, "Erro ao aceitar a proposta: {@Proposal}", proposal);
        }
    }

    private async Task DeclineProposal(ProposalDTO proposal)
    {
        try
        {
            proposal.IsAccepted = false;
            await hubConnection.InvokeAsync("UpdateProposalStatus", proposal);
            Logger.LogInformation("Proposta recusada: {@Proposal}", proposal);
            await ProposalService.UpdateAsync(proposal.ProposalId, proposal);
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao recusar a proposta: {ex.Message}";
            Logger.LogError(ex, "Erro ao recusar a proposta: {@Proposal}", proposal);
        }
    }

    public void Dispose()
    {
        _ = hubConnection?.DisposeAsync();
    }
}
