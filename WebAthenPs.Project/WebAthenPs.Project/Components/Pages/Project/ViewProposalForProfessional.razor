@page "/viewproposalprofessional"
@using WebAthenPs.Models.DTOs.Components
@using WebAthenPs.Models.DTOs.Professional
@using WebAthenPs.Project.Services.Interfaces.Components
@using WebAthenPs.Project.Services.Interfaces.Professional
@using WebAthenPs.Project.Services.Interfaces.Project
@using WebAthenPs.Project.Services.Interfaces.User

@inject ILogger<ViewProposalForProfessional> Logger
@inject IProposalService ProposalService
@inject IProjectService ProjectService
@inject IGenericProfessionalService ProfessionalService
@inject IAuthService AuthService

<div class="container">
    <h3>Propostas Recebidas</h3>

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link @activeTabClass("pending")" @onclick="() => SetActiveTab(State[1])">Pendentes</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @activeTabClass("accepted")" @onclick="() => SetActiveTab(State[0])">Aceitas</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @activeTabClass("declined")" @onclick="() => SetActiveTab(State[2])">Recusadas</a>
        </li>
    </ul>

    <div class="tab-content mt-3">
        @if (activeTab == "pending")
        {
            <div class="tab-pane active">
                <h4>Propostas Pendentes</h4>
                @if (pendingProposals.Any())
                {
                    foreach (var proposal in pendingProposals)
                    {
                        <div class="proposal-details border p-3 mb-3">
                            <label><strong>Mensagem:</strong></label>
                            <p>@proposal.ProposalMessage</p>

                            <label><strong>Valor:</strong></label>
                            <p>@proposal.ProposalValue.ToString("C")</p>

                            <label><strong>Projeto:</strong></label>
                            <p>@proposal.Projects?.ProjectId</p>
                            <p>@proposal.Projects?.ProjectName</p>
                            <p>@proposal.Projects?.Client?.UserName</p>

                            <label><strong>Tipo de Profissional:</strong></label>
                            <p>@string.Join(", ", proposal.ToBeContractedAs)</p>

                            <label><strong>Status:</strong></label>
                            <p>Pendente</p>

                            <div class="actions">
                                <button class="btn btn-success" @onclick="() => AcceptProposal(proposal)">Aceitar</button>
                                <button class="btn btn-danger" @onclick="() => DeclineProposal(proposal)">Recusar</button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>Nenhuma proposta pendente.</p>
                }
            </div>
        }
        else if (activeTab == "accepted")
        {
            <div class="tab-pane active">
                <h4>Propostas Aceitas</h4>
                @if (acceptedProposals.Any())
                {
                    foreach (var proposal in acceptedProposals)
                    {
                        <div class="proposal-details border p-3 mb-3">
                            <label><strong>Mensagem:</strong></label>
                            <p>@proposal.ProposalMessage</p>

                            <label><strong>Valor:</strong></label>
                            <p>@proposal.ProposalValue.ToString("C")</p>

                            <label><strong>Projeto:</strong></label>
                            <p>@proposal.Projects?.ProjectId</p>
                            <p>@proposal.Projects?.ProjectName</p>
                            <p>@proposal.Projects?.Client?.UserName</p>

                            <label><strong>Tipo de Profissional:</strong></label>
                            <p>@string.Join(", ", proposal.ToBeContractedAs)</p>

                            <label><strong>Status:</strong></label>
                            <p>Aceita</p>
                        </div>
                    }
                }
                else
                {
                    <p>Nenhuma proposta aceita.</p>
                }
            </div>
        }
        else if (activeTab == "declined")
        {
            <div class="tab-pane active">
                <h4>Propostas Recusadas</h4>
                @if (declinedProposals.Any())
                {
                    foreach (var proposal in declinedProposals)
                    {
                        <div class="proposal-details border p-3 mb-3">
                            <label><strong>Mensagem:</strong></label>
                            <p>@proposal.ProposalMessage</p>

                            <label><strong>Valor:</strong></label>
                            <p>@proposal.ProposalValue.ToString("C")</p>

                            <label><strong>Projeto:</strong></label>
                            <p>@proposal.Projects?.ProjectId</p>
                            <p>@proposal.Projects?.ProjectName</p>
                            <p>@proposal.Projects?.Client?.UserName</p>

                            <label><strong>Tipo de Profissional:</strong></label>
                            <p>@string.Join(", ", proposal.ToBeContractedAs)</p>

                            <label><strong>Status:</strong></label>
                            <p>Recusada</p>
                        </div>
                    }
                }
                else
                {
                    <p>Nenhuma proposta recusada.</p>
                }
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }

</div>

@code {
    string[] State = ["accepted", "pending", "declined"];
    private List<ProposalDTO> proposals = new List<ProposalDTO>();
    private List<ProposalDTO> pendingProposals = new List<ProposalDTO>();
    private List<ProposalDTO> acceptedProposals = new List<ProposalDTO>();
    private List<ProposalDTO> declinedProposals = new List<ProposalDTO>();
    private string errorMessage;
    private string userId;
    private string activeTab = "pending"; // Default tab

    protected override async Task OnInitializedAsync()
    {
        userId = await AuthService.GetUserIdFromToken();
        await LoadProposals();
    }

    private async Task LoadProposals()
    {
        try
        {
            Logger.LogInformation("Tentando carregar propostas para UserId: {UserId}", userId);
            var professionalDto = await ProfessionalService.GetByUserId(userId);

            if (professionalDto != null)
            {
                var professionalId = professionalDto.Id;
                proposals = (await ProposalService.GetByProfessionalIdAsync(professionalId)).ToList();
                Logger.LogInformation("Propostas carregadas para o profissional com ID: {ProfessionalId}", professionalId);

                // Atualizando a lógica de classificação
                pendingProposals = proposals.Where(p => !p.IsAccepted && (!p.IsDeclined.HasValue || p.IsDeclined == false)).ToList();
                acceptedProposals = proposals.Where(p => p.IsAccepted && (!p.IsDeclined.HasValue || p.IsDeclined == false)).ToList(); // Propostas aceitas
                declinedProposals = proposals.Where(p => p.IsDeclined == true).ToList(); // Propostas recusadas
            }
            else
            {
                Logger.LogWarning("Usuário não é um profissional.");
                errorMessage = "Usuário não é um profissional.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar propostas: {ex.Message}";
            Logger.LogError(ex, "Erro ao carregar propostas para UserId: {UserId}", userId);
        }
    }




    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private string activeTabClass(string tab) => activeTab == tab ? "active" : "";

    private async Task AcceptProposal(ProposalDTO proposal)
    {
        try
        {
            var professionalDto = await ProfessionalService.GetByUserId(userId);
            if (professionalDto == null)
            {
                errorMessage = "Usuário não é um profissional.";
                Logger.LogWarning("Tentativa de aceitar proposta sem profissional associado.");
                return;
            }

            proposal.IsAccepted = true; // Marque como aceita
            await ProposalService.RespondToProposalAsync(proposal.ProposalId, true);
            Logger.LogInformation("Proposta aceita: {@Proposal}", proposal);

            if (proposal.Projects != null)
            {
                var professionalId = professionalDto.Id;
                var projectId = proposal.Projects.ProjectId; // Certifique-se de que isso não é nulo
                var projectDto = await ProjectService.GetById(projectId);

                if (projectDto != null)
                {
                    var projectProfessionalDto = new ProjectProfessionalDTO
                        {
                            ProfessionalId = professionalId,
                            ProjectId = projectId,
                            ContractedAs = proposal.ToBeContractedAs // Passando o valor de ToBeContractedAs
                        };

                    // Chama o método para adicionar o profissional ao projeto
                    var isAdded = await ProjectService.AddProfessional(projectProfessionalDto, proposal); // Passando a proposta

                    if (!isAdded)
                    {
                        Logger.LogWarning("Não foi possível adicionar o profissional ao projeto com ID: {ProjectId}", projectId);
                        errorMessage = "Não foi possível adicionar o profissional ao projeto.";
                    }
                    else
                    {
                        Logger.LogInformation("Profissional adicionado ao projeto com ID: {ProjectId} com sucesso.", projectId);
                    }
                }
                else
                {
                    Logger.LogWarning("Não foi possível encontrar o projeto com ID: {ProjectId}", projectId);
                    errorMessage = "Projeto não encontrado.";
                }
            }
            else
            {
                Logger.LogWarning("A proposta não contém um projeto associado.");
                errorMessage = "A proposta não contém um projeto associado.";
            }

            await LoadProposals(); // Recarregar propostas
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao aceitar a proposta: {ex.Message}";
            Logger.LogError(ex, "Erro ao aceitar a proposta: {@Proposal}", proposal);
        }
    }


    private async Task DeclineProposal(ProposalDTO proposal)
    {
        try
        {
            proposal.IsAccepted = false; // Marque como não aceita
            proposal.IsDeclined = true; // Marque como recusada
            await ProposalService.RespondToProposalAsync(proposal.ProposalId, false); // Atualize a proposta na API
            Logger.LogInformation("Proposta recusada: {@Proposal}", proposal);

            // Recarregar propostas após a rejeição
            await LoadProposals(); // Recarregar propostas para refletir a nova classificação
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao recusar a proposta: {ex.Message}";
            Logger.LogError(ex, "Erro ao recusar a proposta: {@Proposal}", proposal);
        }
    }




}
