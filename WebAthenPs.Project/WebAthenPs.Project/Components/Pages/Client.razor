@page "/client"
@rendermode InteractiveServer
@inject IClientService ClientService

<h3>Clients</h3>

<!-- Formulário para listar todos os clientes -->
<div class="mb-4">
    <h4>List All Clients</h4>
    <button @onclick="GetAllClients">Load All Clients</button>
</div>

<!-- Formulário para buscar cliente por ID -->
<div class="mb-4">
    <h4>Find Client by ID</h4>
    <input type="number" @bind="clientId" placeholder="Enter Client ID" />
    <button @onclick="GetClientById">Search</button>
</div>

<!-- Formulário para buscar clientes por nome -->
<div class="mb-4">
    <h4>Find Clients by Name</h4>
    <input type="text" @bind="name" placeholder="Enter Client Name" />
    <button @onclick="GetClientsByName">Search</button>
</div>

<!-- Exibição de clientes -->
@if (clients != null)
{
    if (clients.Any())
    {
        foreach (var client in clients)
        {
            <div class="card mb-3">
                <div class="card-header bg-primary text-white">
                    <h5>@client.UserName</h5>
                </div>
                <div class="card-body">
                    <p>Client ID: @client.ClientId</p>
                    <p>Phone Number: @client.PhoneNumber</p>
                    <p>Email: @client.Email</p>
                    <h6>Houses:</h6>
                    @if (client.Houses != null && client.Houses.Any())
                    {
                        <ul>
                            @foreach (var house in client.Houses)
                            {
                                <li>@house.ProjectName</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No houses found.</p>
                    }
                    <h6>Professionals:</h6>
                    @if (client.GenericProfessionals != null && client.GenericProfessionals.Any())
                    {
                        <ul>
                            @foreach (var professional in client.GenericProfessionals)
                            {
                                <li>@professional.UserName</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No professionals found.</p>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <p>No clients found.</p>
    }
}
else if (loading)
{
    <h3>Loading...</h3>
}

@code {
    private IEnumerable<ClientDTO> clients;
    private bool loading;
    private int? clientId;
    private string name;

    private async Task GetAllClients()
    {
        loading = true;
        clients = await ClientService.GetAll();
        loading = false;
    }

    private async Task GetClientById()
    {
        if (clientId.HasValue)
        {
            loading = true;
            var client = await ClientService.GetById(clientId.Value);
            clients = client != null ? new List<ClientDTO> { client } : Enumerable.Empty<ClientDTO>();
            loading = false;
        }
    }

    private async Task GetClientsByName()
    {
        if (!string.IsNullOrEmpty(name))
        {
            loading = true;
            clients = await ClientService.GetByName(name);
            loading = false;
        }
    }
}
