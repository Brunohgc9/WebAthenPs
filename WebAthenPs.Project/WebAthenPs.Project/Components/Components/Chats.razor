@page "/chat"
@rendermode InteractiveAuto
@using Microsoft.AspNetCore.SignalR.Client
@using WebAthenPs.Models.DTOs.Components.Chats
@inject SignalRConnection signalRConnection
@inject IJSRuntime js
@implements IDisposable

<div class="row">
    <div class="col-md-3 mb-4">
        <div class="card">
            <div class="card-header display-1 fs-4 text-primary">
                Chats Disponíveis
            </div>
            <div class="card-body">
                @if (AvailableChats != null && AvailableChats.Count > 0)
                {
                    <ul class="list-group">
                        @foreach (var chat in AvailableChats)
                        {
                            <li class="list-group-item list-group-item-action" style="cursor: pointer" @onclick="(() => LoadChat(chat.Id))">
                                @chat.Id
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <em>Nenhum chat disponível</em>
                }
            </div>
        </div>
    </div>

    <div class="col-md-9 mb-4">
        <div class="card">
            <div class="card-header display-1 fs-5 text-success">@CurrentChatTitle</div>
            <div class="card-body">
                @if (ChatMessages != null && ChatMessages.Count > 0)
                {
                    @foreach (var message in ChatMessages)
                    {
                        <div class="message">
                            @((MarkupString)message)
                        </div>
                    }
                }
                else
                {
                    <em>Nenhuma mensagem encontrada</em>
                }
            </div>
            <div class="card-footer">
                <textarea cols="5" @bind="Message" class="form-control mb-3" placeholder="Digite sua mensagem..."></textarea>
                <button class="btn btn-success float-end" @onclick="SendMessage">Enviar Mensagem</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string Message = string.Empty;
    private string CurrentChatTitle = string.Empty;
    private List<ChatDto> AvailableChats = new List<ChatDto>();
    private List<string> ChatMessages = new List<string>();
    private Guid CurrentChatId;

    protected override async Task OnInitializedAsync()
    {
        signalRConnection.ConnectionStateChanged += StateHasChanged;
        await Connect();
        await LoadAvailableChats();
        SubscribeToMessages();
    }

    private void SubscribeToMessages()
    {
        // Inscreve-se para receber mensagens em tempo real
        signalRConnection.ReceiveMessage((userId, message) =>
        {
            ChatMessages.Add($"{userId}: {message}");
            InvokeAsync(StateHasChanged); // Atualiza a UI instantaneamente
        });
    }

    private async Task LoadAvailableChats()
    {
        AvailableChats = await signalRConnection.GetUserChats();
    }

    private async Task LoadChat(Guid chatId)
    {
        CurrentChatId = chatId;
        CurrentChatTitle = $"Chat {chatId}";
        ChatMessages.Clear();

        var messages = await signalRConnection.GetChatMessages(chatId);
        ChatMessages = messages.Select(m => $"{m.UserId}: {m.Message}").ToList();

        // Ao entrar no chat, une-se ao grupo do SignalR
        await signalRConnection.JoinChat(chatId);

        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrEmpty(Message) || CurrentChatId == Guid.Empty)
            return;

        await signalRConnection.SendMessage(CurrentChatId, Message);
        ChatMessages.Add($"Eu: {Message}");
        Message = string.Empty;
        StateHasChanged();
    }

    private async Task Connect()
    {
        await signalRConnection.StartConnection();
    }

    public void Dispose()
    {
        signalRConnection.ConnectionStateChanged -= StateHasChanged;
        _ = signalRConnection.CloseConnection();
    }
}
