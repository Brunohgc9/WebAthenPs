@using Microsoft.AspNetCore.SignalR.Client
@using WebAthenPs.Models.DTOs.Components.Chats
@inject SignalRConnection signalRConnection
@inject IJSRuntime js
@implements IDisposable

<div class="row">
    <div class="col-md-3 mb-4">
        <div class="card">
            <div class="card-header display-1 fs-4 text-primary">
                Chats Disponíveis
            </div>
            <div class="card-body">
                <ul class="nav nav-tabs" id="chatTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="general-chat-tab" data-bs-toggle="tab" data-bs-target="#general-chat" type="button" role="tab" aria-controls="general-chat" aria-selected="true">
                            Chat Geral
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="individual-chats-tab" data-bs-toggle="tab" data-bs-target="#individual-chats" type="button" role="tab" aria-controls="individual-chats" aria-selected="false">
                            Chats Individuais
                        </button>
                    </li>
                </ul>
                <div class="tab-content mt-3">
                    <div class="tab-pane fade show active" id="general-chat" role="tabpanel" aria-labelledby="general-chat-tab">
                        @if (GeneralChat != null)
                        {
                            <button class="btn btn-link w-100 text-start" @onclick="(() => LoadChat(GeneralChat.Id, GetChatTitle(GeneralChat)))">
                                @GetChatTitle(GeneralChat)
                            </button>
                        }
                        else
                        {
                            <em>Nenhum chat geral disponível</em>
                        }
                    </div>
                    <div class="tab-pane fade" id="individual-chats" role="tabpanel" aria-labelledby="individual-chats-tab">
                        @if (IndividualChats != null && IndividualChats.Count > 0)
                        {
                            <ul class="list-group">
                                @foreach (var chat in IndividualChats)
                                {
                                    <li class="list-group-item list-group-item-action" style="cursor: pointer" @onclick="(() => LoadChat(chat.Id, GetChatTitle(chat)))">
                                        @GetChatTitle(chat)
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <em>Nenhum chat individual disponível</em>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-9 mb-4">
        <div class="card">
            <div class="card-header display-1 fs-5 text-success">@CurrentChatTitle</div>
            <div class="card-body">
                @if (ChatMessages != null && ChatMessages.Count > 0)
                {
                    @foreach (var message in ChatMessages)
                    {
                        <div class="message">
                            @((MarkupString)message)
                        </div>
                    }
                }
                else
                {
                    <em>Nenhuma mensagem encontrada</em>
                }
            </div>
            <div class="card-footer">
                <textarea cols="5" @bind="Message" class="form-control mb-3" placeholder="Digite sua mensagem..."></textarea>
                <button class="btn btn-success float-end" @onclick="SendMessage">Enviar Mensagem</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int ProjectId { get; set; } // ID do projeto

    private string Message = string.Empty;
    private string CurrentChatTitle = string.Empty;
    private ChatDto? GeneralChat;
    private List<ChatDto> IndividualChats = new();
    private List<string> ChatMessages = new();
    private Guid CurrentChatId;

    protected override async Task OnInitializedAsync()
    {
        signalRConnection.ConnectionStateChanged += StateHasChanged;
        await Connect();
        await LoadChats();
        SubscribeToMessages();
    }

    private void SubscribeToMessages()
    {
        signalRConnection.ReceiveMessage((userId, message) =>
        {
            ChatMessages.Add($"{userId}: {message}");
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task LoadChats()
    {
        var chats = await signalRConnection.GetChatsByProjectId(ProjectId);

        GeneralChat = chats.FirstOrDefault(c => c.IsGeneral);
        IndividualChats = chats.Where(c => !c.IsGeneral).ToList();
    }

    private async Task LoadChat(Guid chatId, string chatTitle)
    {
        CurrentChatId = chatId;
        CurrentChatTitle = chatTitle;
        ChatMessages.Clear();

        var messages = await signalRConnection.GetChatMessages(chatId);
        ChatMessages = messages.Select(m => $"{m.UserId}: {m.Message}").ToList();

        await signalRConnection.JoinChat(chatId);
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrEmpty(Message) || CurrentChatId == Guid.Empty)
            return;

        await signalRConnection.SendMessage(CurrentChatId, Message);
        ChatMessages.Add($"Eu: {Message}");
        Message = string.Empty;
        StateHasChanged();
    }

    private async Task Connect()
    {
        await signalRConnection.StartConnection();
    }

    private string GetChatTitle(ChatDto chat)
    {
        if (chat.IsGeneral)
            return "Chat Geral";

        // Verifica se há algum usuário e retorna o nome do primeiro
        var userNames = chat.User?.Select(u => u.UserName).ToList();
        return userNames != null && userNames.Any()
            ? $"Chat com {string.Join(", ", userNames)}"
            : "Chat sem nome";
    }


    public void Dispose()
    {
        signalRConnection.ConnectionStateChanged -= StateHasChanged;
        _ = signalRConnection.CloseConnection();
    }
}
