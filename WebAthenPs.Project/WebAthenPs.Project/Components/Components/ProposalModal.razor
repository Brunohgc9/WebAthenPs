@page "/sendproposal/{professionalId:int}"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Headers
@using WebAthenPs.Models.DTOs.Components
@using WebAthenPs.Models.DTOs.Client
@using WebAthenPs.Models.DTOs.Professional
@using WebAthenPs.Models.DTOs.Project
@using Blazored.LocalStorage
@using WebAthenPs.Project.Services.Interfaces.User
@using WebAthenPs.Project.Services.Interfaces.Client
@using WebAthenPs.Project.Services.Interfaces.Project
@using WebAthenPs.Project.Services.Interfaces.Professional
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject IHttpClientFactory HttpClientFactory
@inject IAuthService AuthService
@inject IClientService ClientService
@inject IProjectService ProjectService
@inject IGenericProfessionalService ProfessionalService
@inject SignalRConnection SignalRConnection // Injetando a conexão SignalR
@implements IDisposable
@rendermode InteractiveServer

<h3>Enviar Proposta</h3>

<div>
    <label>Projeto:</label>
    <select @bind="selectedProjectId">
        <option value="">Selecione um projeto</option>
        @if (projects != null)
        {
            @foreach (var project in projects)
            {
                <option value="@project.ProjectId">@project.ProjectName</option>
            }
        }
    </select>

    <label>Mensagem:</label>
    <input type="text" @bind="proposalMessage" placeholder="Digite a mensagem da proposta" />

    <label>Valor:</label>
    <input type="number" @bind="proposalValue" min="0" placeholder="Digite o valor da proposta" />

    <div>
        <label>Tipo de Contratação:</label>
        <select @bind="selectedProfessionalType">
            <option value="">Selecione o tipo de contratação</option>
            @if (professionalTypes != null)
            {
                @foreach (var type in professionalTypes)
                {
                    <option value="@type">@type</option>
                }
            }
        </select>

        <button @onclick="SendProposal">Enviar Proposta</button>
    </div>
</div>

@if (isSuccess)
{
    <div class="alert alert-success mt-3">Proposta enviada com sucesso!</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    [Parameter] public int ProfessionalId { get; set; }
    private HubConnection hubConnection;
    private string proposalMessage;
    private decimal proposalValue;
    private bool isSuccess = false;
    private string errorMessage;
    private int? selectedProjectId;
    private List<ProjectsDTO> projects;
    private List<string> professionalTypes = new List<string>();
    private string selectedProfessionalType = ""; // string
    private Guid? chatId; // Adicionando um ID para o chat

    protected override async Task OnInitializedAsync()
    {
        await InitializeConnection();
        await LoadProjects();
        await LoadProfessionalTypes(); // Carrega os tipos de profissional
    }

    private async Task InitializeConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7171/proposalHub"))
            .Build();

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("Conexão ao hub estabelecida com sucesso.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao conectar ao hub: {ex.Message}");
        }

        hubConnection.Closed += async (error) =>
        {
            Console.WriteLine("Conexão fechada. Tentando reconectar...");
            await Task.Delay(new Random().Next(0, 5000));
            await InitializeConnection();
        };
    }

    private async Task LoadProjects()
    {
        try
        {
            projects = (List<ProjectsDTO>)await ProjectService.GetProjectsByLoggedInUser();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar projetos: {ex.Message}";
        }
    }

    private async Task LoadProfessionalTypes()
    {
        try
        {
            var professional = await ProfessionalService.GetByIdAsync(ProfessionalId);
            professionalTypes = professional.ProfessionalTypes; // Carrega os tipos de profissional
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar os tipos de profissional: {ex.Message}";
        }
    }

    private async Task SendProposal()
    {
        if (selectedProjectId == null || string.IsNullOrEmpty(selectedProfessionalType))
        {
            errorMessage = "Por favor, selecione um projeto e um tipo de contratação.";
            return;
        }

        try
        {
            if (hubConnection.State == HubConnectionState.Disconnected)
            {
                await hubConnection.StartAsync();
            }

            var token = await AuthService.GetToken();

            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Token não encontrado ou está vazio.";
                return;
            }

            var userId = await AuthService.GetUserIdFromToken();
            var clientDto = await ClientService.GetByUserId(userId);
            var clientId = clientDto?.ClientId;

            if (clientId == null)
            {
                errorMessage = "Cliente não encontrado para o UserId.";
                return;
            }

            // Obter o userId do profissional
            var professional = await ProfessionalService.GetByIdAsync(ProfessionalId);
            var professionalUserId = professional.UserId; // Supondo que você tenha uma propriedade UserId no DTO

            // Criação do chat
            SignalRConnection.StartConnection();
            chatId = await SignalRConnection.CreateChat();

            // Adicionar usuário do cliente e profissional ao chat
            // Aqui, é necessário garantir que `chatId` não seja nulo antes de passar para o método
            if (chatId.HasValue)
            {
                await SignalRConnection.AddUserToChat(chatId.Value, userId); // Adiciona o cliente
                await SignalRConnection.AddUserToChat(chatId.Value, professionalUserId); // Adiciona o profissional
            }

            else
            {
                errorMessage = "Não foi possível criar o chat.";
                return;
            }

            var proposalDto = new ProposalDTO
                {
                    ProposalId = Guid.NewGuid(),
                    ProposalMessage = proposalMessage,
                    ProposalValue = proposalValue,
                    ProposalType = selectedProfessionalType,
                    IsAccepted = false,
                    Client = new ClientDTO { ClientId = clientId.Value },
                    Professional = new GenericProfessionalDTO { Id = ProfessionalId, UserId = professionalUserId }, // Adiciona o userId do profissional
                    Projects = new ProjectsDTO { ProjectId = selectedProjectId.Value },
                    ToBeContractedAs = new List<string> { selectedProfessionalType }
                };

            await hubConnection.InvokeAsync("SendProposal", proposalDto);
            isSuccess = true;
            errorMessage = null;

            // Limpar o formulário após o envio
            ClearForm();
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"Erro de requisição HTTP: {httpEx.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao enviar a proposta: {ex.Message}";
        }
    }



    private void ClearForm()
    {
        proposalMessage = string.Empty;
        proposalValue = 0;
        selectedProjectId = null;
        selectedProfessionalType = string.Empty;
        isSuccess = false;
    }

    public void Dispose()
    {
        _ = hubConnection?.DisposeAsync();
    }
}
